<macros>
<macro name="typeDocs()">
::if docs != null && docs.comments != null::
> Comments:
> ```hx ::raw docs.comments::
```


::end::
</macro>

<macro name="classLink(ctx)">**[::raw ctx.nameDots::](::raw ctx.name::)**</macro>

<macro name="methodHeader(m)">
#####$$showAccess(::m::)$$showDynamic(::m::)$$showInline(::m::)**::raw m.name::** ::m.params::(::if m.args != null::::raw m.args::::end::) : ::raw m.returns::#####
::if m.isOverride::> Overrides: **::raw m.inheritance.link.text::**
::elseif m.isInherited::> Inherited from: **(::raw m.inheritance.link.text::)[::raw m.inheritance.link.text::]**
::end::
</macro>

<macro name="methodDocs(m)">
::if m.docs != null || m.platforms != null::
::if m.docs != null::
::if m.docs.deprecated::
> Deprecated: *::raw m.docs.deprecatedMsg::*
::end::
::if m.docs.typeParams.length != 0::
> Types:
::foreach pd m.docs.typeParams::> * `::pd.arg::` ::raw pd.desc::
::end::
::end::
::if m.docs.params.length != 0::
> Parameters:
::foreach pd m.docs.params::> * `::pd.arg::` ::raw pd.desc::
::end::
::end::
::if m.docs.returns.length != 0::
> Returns:
::foreach s m.docs.returns::> * ::raw s::
::end::
::end::
::if m.docs.throws.length != 0::
> Throws:
::foreach td m.docs.throws::> * ::td.name:: ::raw td.desc::
::end::
::end::
::if m.docs.requires.length != 0::
> Requires:
::foreach i m.docs.requires::> * ::raw i::
::end::
::end::
::if m.docs.see.length != 0::
> See:
::foreach i m.docs.see::> * ::raw i::
::end::
::end::
::if m.docs.todos.length != 0::
> Todo: 
::foreach i m.docs.todos::> * ::raw i::
::end::
::end::
::if m.docs.authors.length != 0::
> Authors: 
::foreach i m.docs.authors::> * ::raw i::
::end::
::end::
::end::
::if m.platforms != null && m.platforms.length != 0 && (platforms == null || platforms.length > m.platforms.length) ::
> Platforms: ::foreach p m.platforms::::if !repeat.p.first::, ::end::::p::::end::
::end::
::end::
::if m.docs != null && m.docs.comments != null::> Comments:
> ```hx ::raw m.docs.comments::
```::end::
</macro>

<macro name="varHeader(f)">#####$$showAccess(::f::) **::f.name::** ::raw f.rights:: : ::raw f.returns::#####
::if f.isInherited::> Inherited from (::raw f.inheritance.link.text::)[::raw f.inheritance.link.text::]::end::
</macro>

<macro name="varDocs(m)">
::if m.platforms != null::
::if m.platforms.length != 0 && (platforms == null || platforms.length > m.platforms.length) ::
Platforms: ::foreach p m.platforms::::if !repeat.p.first::, ::end::::p::::end::
::end::
::end::
::if m.docs != null && m.docs.comments != null::> ```hx ::raw m.docs.comments::
```::end::
</macro>

<macro name="enumConstructor(m)">
#####**::raw m.name::**::if m.args.length > 0::(::raw m.args::)::end::#####
</macro>

<macro name="showPlatforms(l)">
::if l != null::
::if l.length > 0 && (platforms == null || platforms.length > l.length) ::
Available in **::foreach i l::::i:: ::end::**
::end::
::end::
</macro>



<macro name="showAccess(f)">::if config.developer::::f.access::::end::</macro>

<macro name="showDynamic(m)">::if m.isDynamic::dynamic::end::</macro>

<macro name="showInline(f)">::if f.isInline::Inline::end::</macro>

<!--
The following methods are for typedef.mtt, which are handled
differently than classes or enums
-->
<macro name="dumpPlatformsOrAll(all, l)">
::if l == null || l.length == 0 || l.length == all.length::
::foreach i all::::i:: ::end::
::else::
::foreach i l::::i:: ::end::
::end::
</macro>

<macro name="typedefVarHeader(f)">
> var **::f.name::** : ::raw f.returns::
</macro>

<!-- Displays only if platform list [l] is of different length of [all] -->
<macro name="displayPlatformsIfDifferent(l, all)">
::if l.length != all.length::
Available in: ::foreach i l::::i:: ::end::
::end::
</macro>

<!--
Debug Macros
-->
<macro name="debugPlatforms(l)">
::if l == null::
NO PLATFORM DATA
::elseif l.length == 0::
ZERO LENGTH PLATFORM DATA
::else::
::foreach i l::::i:: ::end::
::end::
</macro>
</macros>