<haxe>
	<class path="Array" params="T" file="C:\Motion-Twin\haxe\std/js/_std/Array.hx" extern="1">
		<unshift public="1" set="method"><f a="x">
	<c path="Array.T"/>
	<e path="Void"/>
</f></unshift>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<splice public="1" set="method"><f a="pos:len">
	<c path="Int"/>
	<c path="Int"/>
	<c path="Array"><c path="Array.T"/></c>
</f></splice>
		<sort public="1" set="method"><f a="f">
	<f a=":">
		<c path="Array.T"/>
		<c path="Array.T"/>
		<c path="Int"/>
	</f>
	<e path="Void"/>
</f></sort>
		<slice public="1" set="method"><f a="pos:?end">
	<c path="Int"/>
	<c path="Int"/>
	<c path="Array"><c path="Array.T"/></c>
</f></slice>
		<shift public="1" set="method"><f a=""><t path="Null"><c path="Array.T"/></t></f></shift>
		<reverse public="1" set="method"><f a=""><e path="Void"/></f></reverse>
		<push public="1" set="method"><f a="x">
	<c path="Array.T"/>
	<c path="Int"/>
</f></push>
		<pop public="1" set="method"><f a=""><t path="Null"><c path="Array.T"/></t></f></pop>
		<join public="1" set="method"><f a="sep">
	<c path="String"/>
	<c path="String"/>
</f></join>
		<concat public="1" set="method"><f a="a">
	<c path="Array"><c path="Array.T"/></c>
	<c path="Array"><c path="Array.T"/></c>
</f></concat>
		<length public="1" set="null">
			<c path="Int"/>
			<meta/>
		</length>
		<new public="1" set="method"><f a=""><e path="Void"/></f></new>
		<meta><m n=":core_api"/></meta>
	</class>
	<class path="Class" params="T" file="C:\Motion-Twin\haxe\std/Class.hx" extern="1">
		<haxe_doc>An abstract type that represents a Class.
	See [Type] for the haXe Reflection API.</haxe_doc>
		<meta/>
	</class>
	<class path="Date" params="" file="C:\Motion-Twin\haxe\std/js/_std/Date.hx" extern="1">
		<getDay public="1" set="method"><f a=""><c path="Int"/></f></getDay>
		<getDate public="1" set="method"><f a=""><c path="Int"/></f></getDate>
		<getMonth public="1" set="method"><f a=""><c path="Int"/></f></getMonth>
		<getFullYear public="1" set="method"><f a=""><c path="Int"/></f></getFullYear>
		<getSeconds public="1" set="method"><f a=""><c path="Int"/></f></getSeconds>
		<getMinutes public="1" set="method"><f a=""><c path="Int"/></f></getMinutes>
		<getHours public="1" set="method"><f a=""><c path="Int"/></f></getHours>
		<getTime public="1" set="method"><f a=""><c path="Float"/></f></getTime>
		<new public="1" set="method"><f a="year:month:day:hour:min:sec">
	<c path="Int"/>
	<c path="Int"/>
	<c path="Int"/>
	<c path="Int"/>
	<c path="Int"/>
	<c path="Int"/>
	<e path="Void"/>
</f></new>
		<meta><m n=":core_api"/></meta>
	</class>
	<class path="Enum" params="T" file="C:\Motion-Twin\haxe\std/Enum.hx" extern="1">
		<haxe_doc>An abstract type that represents an Enum.
	See [Type] for the haXe Reflection API.</haxe_doc>
		<meta/>
	</class>
	<class path="EnumValue" params="" file="C:\Motion-Twin\haxe\std/EnumValue.hx" extern="1"><haxe_doc>An abstract type that represents any enum value.
	See [Type] for the haXe Reflection API.</haxe_doc></class>
	<class path="Hash" params="T" file="C:\Motion-Twin\haxe\std/js/_std/Hash.hx">
		<iterator public="1" set="method" line="64">
			<f a=""><t path="Iterator"><c path="Hash.T"/></t></f>
			<meta/>
		</iterator>
		<keys public="1" set="method" line="53">
			<f a=""><t path="Iterator"><c path="String"/></t></f>
			<meta/>
		</keys>
		<get public="1" set="method" line="38">
			<f a="key">
				<c path="String"/>
				<t path="Null"><c path="Hash.T"/></t>
			</f>
			<meta/>
		</get>
		<set public="1" set="method" line="34">
			<f a="key:value">
				<c path="String"/>
				<c path="Hash.T"/>
				<e path="Void"/>
			</f>
			<meta/>
		</set>
		<h>
			<d/>
			<meta/>
		</h>
		<new public="1" set="method" line="30">
			<f a=""><e path="Void"/></f>
			<meta/>
		</new>
		<meta><m n=":core_api"/></meta>
	</class>
	<class path="IntHash" params="T" file="C:\Motion-Twin\haxe\std/js/_std/IntHash.hx">
		<iterator public="1" set="method" line="63">
			<f a=""><t path="Iterator"><c path="IntHash.T"/></t></f>
			<meta/>
		</iterator>
		<keys public="1" set="method" line="52">
			<f a=""><t path="Iterator"><c path="Int"/></t></f>
			<meta/>
		</keys>
		<remove public="1" set="method" line="46">
			<f a="key">
				<c path="Int"/>
				<e path="Bool"/>
			</f>
			<meta/>
		</remove>
		<get public="1" set="method" line="38">
			<f a="key">
				<c path="Int"/>
				<t path="Null"><c path="IntHash.T"/></t>
			</f>
			<meta/>
		</get>
		<set public="1" set="method" line="34">
			<f a="key:value">
				<c path="Int"/>
				<c path="IntHash.T"/>
				<e path="Void"/>
			</f>
			<meta/>
		</set>
		<h>
			<d/>
			<meta/>
		</h>
		<new public="1" set="method" line="30">
			<f a=""><e path="Void"/></f>
			<meta/>
		</new>
		<meta><m n=":core_api"/></meta>
	</class>
	<class path="IntIter" params="" file="C:\Motion-Twin\haxe\std/IntIter.hx" extern="1">
		<haxe_doc>Integer iterator. Used for interval implementation.</haxe_doc>
		<meta><m n=":native"><e>Dynamic</e></m></meta>
	</class>
	<class path="Lambda" params="" file="C:\Motion-Twin\haxe\std/Lambda.hx">
		<exists public="1" params="A" set="method" line="97" static="1">
			<f a="it:f">
				<t path="Iterable"><c path="exists.A"/></t>
				<f a="">
					<c path="exists.A"/>
					<e path="Bool"/>
				</f>
				<e path="Bool"/>
			</f>
			<meta/>
			<haxe_doc>Tells if at least one element of the iterable is found by using the specific function.</haxe_doc>
		</exists>
		<filter public="1" params="A" set="method" line="125" static="1">
			<f a="it:f">
				<t path="Iterable"><c path="filter.A"/></t>
				<f a="">
					<c path="filter.A"/>
					<e path="Bool"/>
				</f>
				<c path="List"><c path="filter.A"/></c>
			</f>
			<meta/>
			<haxe_doc>Return the list of elements matching the function 'f'</haxe_doc>
		</filter>
		<haxe_doc>The [Lambda] class is a collection of functional methods in order to
	use functional-style programming with haXe.</haxe_doc>
		<meta/>
	</class>
	<class path="LazyInst" params="" file="../src/LazyInst.hx">
		<haxe_doc>* @author Tom Byrne</haxe_doc>
		<meta/>
	</class>
	<class path="List" params="T" file="C:\Motion-Twin\haxe\std/List.hx">
		<iterator public="1" set="method" line="152">
			<f a=""><t path="Iterator"><c path="List.T"/></t></f>
			<meta/>
			<haxe_doc>Returns an iterator on the elements of the list.</haxe_doc>
		</iterator>
		<add public="1" set="method" line="51">
			<f a="item">
				<c path="List.T"/>
				<e path="Void"/>
			</f>
			<meta/>
			<haxe_doc>Add an element at the end of the list.</haxe_doc>
		</add>
		<length public="1" set="null">
			<c path="Int"/>
			<meta/>
			<haxe_doc>The number of elements in this list.</haxe_doc>
		</length>
		<q>
			<c path="Array"><d/></c>
			<meta/>
		</q>
		<h>
			<c path="Array"><d/></c>
			<meta/>
		</h>
		<new public="1" set="method" line="44">
			<f a=""><e path="Void"/></f>
			<meta/>
			<haxe_doc>Creates a new empty list.</haxe_doc>
		</new>
		<haxe_doc>A linked-list of elements. The list is composed of two-elements arrays
	that are chained together. It's optimized so that adding or removing an
	element doesn't imply to copy the whole array content everytime.</haxe_doc>
		<meta/>
	</class>
	<class path="Math" params="" file="C:\Motion-Twin\haxe\std/Math.hx" extern="1">
		<PI public="1" set="null" static="1">
			<c path="Float"/>
			<meta/>
		</PI>
		<NaN public="1" set="null" static="1">
			<c path="Float"/>
			<meta/>
		</NaN>
		<NEGATIVE_INFINITY public="1" set="null" static="1">
			<c path="Float"/>
			<meta/>
		</NEGATIVE_INFINITY>
		<POSITIVE_INFINITY public="1" set="null" static="1">
			<c path="Float"/>
			<meta/>
		</POSITIVE_INFINITY>
		<abs public="1" set="method" static="1"><f a="v">
	<c path="Float"/>
	<c path="Float"/>
</f></abs>
		<min public="1" set="method" static="1"><f a="a:b">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
</f></min>
		<max public="1" set="method" static="1"><f a="a:b">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
</f></max>
		<sin public="1" set="method" static="1"><f a="v">
	<c path="Float"/>
	<c path="Float"/>
</f></sin>
		<cos public="1" set="method" static="1"><f a="v">
	<c path="Float"/>
	<c path="Float"/>
</f></cos>
		<atan2 public="1" set="method" static="1"><f a="y:x">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
</f></atan2>
		<tan public="1" set="method" static="1"><f a="v">
	<c path="Float"/>
	<c path="Float"/>
</f></tan>
		<exp public="1" set="method" static="1"><f a="v">
	<c path="Float"/>
	<c path="Float"/>
</f></exp>
		<log public="1" set="method" static="1"><f a="v">
	<c path="Float"/>
	<c path="Float"/>
</f></log>
		<sqrt public="1" set="method" static="1"><f a="v">
	<c path="Float"/>
	<c path="Float"/>
</f></sqrt>
		<round public="1" set="method" static="1"><f a="v">
	<c path="Float"/>
	<c path="Int"/>
</f></round>
		<floor public="1" set="method" static="1"><f a="v">
	<c path="Float"/>
	<c path="Int"/>
</f></floor>
		<ceil public="1" set="method" static="1"><f a="v">
	<c path="Float"/>
	<c path="Int"/>
</f></ceil>
		<atan public="1" set="method" static="1"><f a="v">
	<c path="Float"/>
	<c path="Float"/>
</f></atan>
		<asin public="1" set="method" static="1"><f a="v">
	<c path="Float"/>
	<c path="Float"/>
</f></asin>
		<acos public="1" set="method" static="1"><f a="v">
	<c path="Float"/>
	<c path="Float"/>
</f></acos>
		<pow public="1" set="method" static="1"><f a="v:exp">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
</f></pow>
		<random public="1" set="method" static="1"><f a=""><c path="Float"/></f></random>
		<isFinite public="1" set="method" static="1"><f a="f">
	<c path="Float"/>
	<e path="Bool"/>
</f></isFinite>
		<isNaN public="1" set="method" static="1"><f a="f">
	<c path="Float"/>
	<e path="Bool"/>
</f></isNaN>
		<haxe_doc>This class defines mathematical functions and constants.</haxe_doc>
		<meta/>
	</class>
	<class path="Reflect" params="" file="C:\Motion-Twin\haxe\std/js/_std/Reflect.hx">
		<field public="1" get="inline" set="null" line="32" static="1">
			<f a="o:field">
				<d/>
				<c path="String"/>
				<d/>
			</f>
			<meta/>
		</field>
		<isFunction public="1" set="method" line="72" static="1">
			<f a="f">
				<d/>
				<e path="Bool"/>
			</f>
			<meta/>
		</isFunction>
		<compareMethods public="1" set="method" line="80" static="1">
			<f a="f1:f2">
				<d/>
				<d/>
				<e path="Bool"/>
			</f>
			<meta/>
		</compareMethods>
		<meta><m n=":core_api"/></meta>
	</class>
	<class path="String" params="" file="C:\Motion-Twin\haxe\std/js/_std/String.hx" extern="1">
		<fromCharCode public="1" set="method" static="1"><f a="code">
	<c path="Int"/>
	<c path="String"/>
</f></fromCharCode>
		<substring public="1" set="method"><f a="startIndex:?endIndex">
	<c path="Int"/>
	<c path="Int"/>
	<c path="String"/>
</f></substring>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<split public="1" set="method"><f a="delimiter">
	<c path="String"/>
	<c path="Array"><c path="String"/></c>
</f></split>
		<lastIndexOf public="1" set="method"><f a="str:?startIndex">
	<c path="String"/>
	<c path="Int"/>
	<c path="Int"/>
</f></lastIndexOf>
		<indexOf public="1" set="method"><f a="str:?startIndex">
	<c path="String"/>
	<c path="Int"/>
	<c path="Int"/>
</f></indexOf>
		<charAt public="1" set="method"><f a="index">
	<c path="Int"/>
	<c path="String"/>
</f></charAt>
		<toLowerCase public="1" set="method"><f a=""><c path="String"/></f></toLowerCase>
		<toUpperCase public="1" set="method"><f a=""><c path="String"/></f></toUpperCase>
		<length public="1" set="null">
			<c path="Int"/>
			<meta/>
		</length>
		<new public="1" set="method"><f a="string">
	<c path="String"/>
	<e path="Void"/>
</f></new>
		<meta><m n=":core_api"/></meta>
	</class>
	<class path="Std" params="" file="C:\Motion-Twin\haxe\std/js/_std/Std.hx">
		<string public="1" set="method" line="33" static="1">
			<f a="s">
				<d/>
				<c path="String"/>
			</f>
			<meta/>
		</string>
		<random public="1" set="method" line="55" static="1">
			<f a="x">
				<c path="Int"/>
				<c path="Int"/>
			</f>
			<meta/>
		</random>
		<meta><m n=":core_api"/></meta>
	</class>
	<enum path="Void" params="" file="C:\Motion-Twin\haxe\std/StdTypes.hx" module="StdTypes"><haxe_doc>The standard Void type. Only [null] values can be of the type [Void].</haxe_doc></enum>
	<class path="Float" params="" file="C:\Motion-Twin\haxe\std/StdTypes.hx" module="StdTypes" extern="1">
		<haxe_doc>The standard Float type, this is a double-precision IEEE 64bit float.</haxe_doc>
		<meta/>
	</class>
	<class path="Int" params="" file="C:\Motion-Twin\haxe\std/StdTypes.hx" module="StdTypes" extern="1">
		<extends path="Float"/>
		<haxe_doc>The standard Int type. Its precision depends on the platform.</haxe_doc>
		<meta/>
	</class>
	<typedef path="Null" params="T" file="C:\Motion-Twin\haxe\std/StdTypes.hx" module="StdTypes">
		<c path="Null.T"/>
		<haxe_doc>[Null] can be useful in two cases. In order to document some methods
	that accepts or can return a [null] value, or for the Flash9 compiler and AS3
	generator to distinguish between base values that can be null and others that
	can't.</haxe_doc>
	</typedef>
	<enum path="Bool" params="" file="C:\Motion-Twin\haxe\std/StdTypes.hx" module="StdTypes">
		<true/>
		<false/>
		<haxe_doc>The standard Boolean type is represented as an enum with two choices.</haxe_doc>
		<meta/>
	</enum>
	<class path="Dynamic" params="T" file="C:\Motion-Twin\haxe\std/StdTypes.hx" module="StdTypes" extern="1">
		<haxe_doc>Dynamic is an internal compiler type which has special behavior.
	See the haXe language reference for more informations.</haxe_doc>
		<meta/>
	</class>
	<typedef path="Iterator" params="T" file="C:\Motion-Twin\haxe\std/StdTypes.hx" module="StdTypes">
		<a>
			<next set="method"><f a=""><c path="Iterator.T"/></f></next>
			<hasNext set="method"><f a=""><e path="Bool"/></f></hasNext>
		</a>
		<haxe_doc>An Iterator is a structure that permits to list a given container
	values. It can be used by your own data structures. See the haXe
	documentation for more informations.</haxe_doc>
	</typedef>
	<typedef path="Iterable" params="T" file="C:\Motion-Twin\haxe\std/StdTypes.hx" module="StdTypes">
		<a><iterator set="method"><f a=""><t path="Iterator"><c path="Iterable.T"/></t></f></iterator></a>
		<haxe_doc>An Iterable is a data structure which has an iterator() method.
	See [Lambda] for generic functions on iterable structures.</haxe_doc>
	</typedef>
	<class path="ArrayAccess" params="T" file="C:\Motion-Twin\haxe\std/StdTypes.hx" module="StdTypes" extern="1" interface="1"><haxe_doc>ArrayAccess is used to indicate a class that can be accessed using brackets.
	The type parameter represent the type of the elements stored.</haxe_doc></class>
	<class path="StringBuf" params="" file="C:\Motion-Twin\haxe\std/StringBuf.hx" extern="1">
		<haxe_doc>A String buffer is an efficient way to build a big string by
	appending small elements together.</haxe_doc>
		<meta><m n=":native"><e>Dynamic</e></m></meta>
	</class>
	<enum path="ValueType" params="" file="C:\Motion-Twin\haxe\std/js/_std/Type.hx" module="Type">
		<TUnknown/>
		<TObject/>
		<TNull/>
		<TInt/>
		<TFunction/>
		<TFloat/>
		<TEnum a="e"><c path="Enum"><d/></c></TEnum>
		<TClass a="c"><c path="Class"><d/></c></TClass>
		<TBool/>
	</enum>
	<class path="Type" params="" file="C:\Motion-Twin\haxe\std/js/_std/Type.hx">
		<getClass public="1" params="T" set="method" line="40" static="1">
			<f a="o">
				<c path="getClass.T"/>
				<c path="Class"><c path="getClass.T"/></c>
			</f>
			<meta/>
		</getClass>
		<getEnum public="1" set="method" line="46" static="1">
			<f a="o">
				<c path="EnumValue"/>
				<c path="Enum"><d/></c>
			</f>
			<meta/>
		</getEnum>
		<getClassName public="1" set="method" line="57" static="1">
			<f a="c">
				<c path="Class"><d/></c>
				<c path="String"/>
			</f>
			<meta/>
		</getClassName>
		<createInstance public="1" params="T" set="method" line="83" static="1">
			<f a="cl:args">
				<c path="Class"><c path="createInstance.T"/></c>
				<c path="Array"><d/></c>
				<c path="createInstance.T"/>
			</f>
			<meta/>
		</createInstance>
		<enumEq public="1" params="T" set="method" line="185" static="1">
			<f a="a:b">
				<c path="enumEq.T"/>
				<c path="enumEq.T"/>
				<e path="Bool"/>
			</f>
			<meta/>
		</enumEq>
		<meta><m n=":core_api"/></meta>
	</class>
	<class path="cmtc.ds.hash.ObjectHash" params="Key:Val" file="../src/cmtc/ds/hash/ObjectHash.hx">
		<clsId line="16" static="1">
			<c path="Int"/>
			<meta/>
		</clsId>
		<keys public="1" set="method" line="203">
			<f a=""><t path="Iterator"><c path="cmtc.ds.hash.ObjectHash.Key"/></t></f>
			<meta/>
		</keys>
		<delete public="1" set="method" line="171">
			<f a="k">
				<c path="cmtc.ds.hash.ObjectHash.Key"/>
				<e path="Bool"/>
			</f>
			<meta/>
		</delete>
		<get public="1" set="method" line="118">
			<f a="k">
				<c path="cmtc.ds.hash.ObjectHash.Key"/>
				<t path="Null"><c path="cmtc.ds.hash.ObjectHash.Val"/></t>
			</f>
			<meta/>
		</get>
		<getObjectId set="method" line="67">
			<f a="obj">
				<d/>
				<c path="Int"/>
			</f>
			<meta/>
		</getObjectId>
		<set public="1" set="method" line="37">
			<f a="k:v">
				<c path="cmtc.ds.hash.ObjectHash.Key"/>
				<c path="cmtc.ds.hash.ObjectHash.Val"/>
				<e path="Void"/>
			</f>
			<meta/>
		</set>
		<length public="1" set="null">
			<c path="Int"/>
			<meta/>
		</length>
		<ival>
			<c path="IntHash"><c path="Array"><d/></c></c>
			<meta/>
		</ival>
		<new public="1" set="method" line="26">
			<f a=""><e path="Void"/></f>
			<meta/>
		</new>
		<haxe_doc>* ...
 * @author waneck</haxe_doc>
		<meta/>
	</class>
	<class path="composure.core.ComposeItem" params="" file="../src/composure/core/ComposeItem.hx">
		<getRealTrait public="1" set="method" line="21" static="1">
			<f a="trait">
				<d/>
				<c path="composure.traits.ITrait"/>
			</f>
			<meta/>
		</getRealTrait>
		<removeParentInjector set="method" line="301">
			<f a="injector">
				<c path="composure.injectors.IInjector"/>
				<e path="Void"/>
			</f>
			<meta/>
		</removeParentInjector>
		<addParentInjector set="method" line="297">
			<f a="injector">
				<c path="composure.injectors.IInjector"/>
				<e path="Void"/>
			</f>
			<meta/>
		</addParentInjector>
		<onRootRemove set="method" line="288">
			<f a=""><e path="Void"/></f>
			<meta/>
		</onRootRemove>
		<onRootAdd set="method" line="281">
			<f a=""><e path="Void"/></f>
			<meta/>
		</onRootAdd>
		<onParentRemove set="method" line="271">
			<f a=""><e path="Void"/></f>
			<meta/>
		</onParentRemove>
		<onParentAdd set="method" line="261">
			<f a=""><e path="Void"/></f>
			<meta/>
		</onParentAdd>
		<removeTraitInjector set="method" line="246">
			<f a="injector">
				<c path="composure.injectors.IInjector"/>
				<e path="Void"/>
			</f>
			<meta/>
		</removeTraitInjector>
		<addTraitInjector set="method" line="231">
			<f a="injector">
				<c path="composure.injectors.IInjector"/>
				<e path="Void"/>
			</f>
			<meta/>
		</addTraitInjector>
		<_removeTrait set="method" line="202">
			<f a="trait">
				<d/>
				<e path="Void"/>
			</f>
			<meta/>
		</_removeTrait>
		<removeAllTraits public="1" set="method" line="197">
			<f a=""><e path="Void"/></f>
			<meta/>
			<haxe_doc>* Removes all traits from this item.</haxe_doc>
		</removeAllTraits>
		<removeTraits public="1" set="method" line="189">
			<f a="traits">
				<c path="Array"><d/></c>
				<e path="Void"/>
			</f>
			<meta/>
			<haxe_doc>* Removes a list of traits from this item.
	 * @see					addTrait
	 * @param	trait		The list of traits to remove from this item.</haxe_doc>
		</removeTraits>
		<removeTrait public="1" set="method" line="181">
			<f a="trait">
				<d/>
				<e path="Void"/>
			</f>
			<meta/>
			<haxe_doc>* Removes a trait from this item.
	 * @see					addTrait
	 * @param	trait		The trait to remove from this item.</haxe_doc>
		</removeTrait>
		<_addTrait set="method" line="148">
			<f a="trait">
				<d/>
				<e path="Void"/>
			</f>
			<meta/>
		</_addTrait>
		<addTraits public="1" set="method" line="143">
			<f a="traits">
				<c path="Array"><d/></c>
				<e path="Void"/>
			</f>
			<meta/>
			<haxe_doc>* Adds multiple traits to this item.
	 * @see					addTrait
	 * @param	traits		The traits to add to this item.</haxe_doc>
		</addTraits>
		<addTrait public="1" set="method" line="135">
			<f a="trait">
				<d/>
				<e path="Void"/>
			</f>
			<meta/>
			<haxe_doc>* Adds a trait to this item. Any type of object can be added, but if it implements ITrait
	 * it will have access to more information about the item and it's other traits. If, for structural reasons,
	 * it is inconvenient to implement ITrait, the object can expose a method called 'getProxiedTrait()' which should
	 * return an ITrait object to operate as it's proxy regarding other traits etc.
	 * @param	trait		The trait to add to this item.</haxe_doc>
		</addTrait>
		<getTrait public="1" params="TraitType" set="method" line="98">
			<f a="TraitType">
				<c path="Class"><c path="getTrait.TraitType"/></c>
				<c path="getTrait.TraitType"/>
			</f>
			<meta/>
			<haxe_doc>* Gets the first trait of a certain type.
	 * @param	TraitType		The type which the returned trait must implement.
	 * @return		A trait object, returns null if no matching trait is found.</haxe_doc>
		</getTrait>
		<setRoot set="method" line="84">
			<f a="root">
				<c path="composure.core.ComposeRoot"/>
				<e path="Void"/>
			</f>
			<meta/>
		</setRoot>
		<_traitToPair>
			<c path="cmtc.ds.hash.ObjectHash">
				<d/>
				<t path="composure.traits.TraitPair"><d/></t>
			</c>
			<meta/>
		</_traitToPair>
		<_traitToCast>
			<c path="cmtc.ds.hash.ObjectHash">
				<d/>
				<c path="composure.traits.ITrait"/>
			</c>
			<meta/>
		</_traitToCast>
		<_uniInjectors>
			<c path="org.tbyrne.collections.UniqueList"><c path="composure.injectors.IInjector"/></c>
			<meta/>
		</_uniInjectors>
		<_ascInjectors>
			<c path="org.tbyrne.collections.UniqueList"><c path="composure.injectors.IInjector"/></c>
			<meta/>
		</_ascInjectors>
		<_parentMarrier>
			<c path="composure.injectors.InjectorMarrier"/>
			<meta/>
		</_parentMarrier>
		<_siblingMarrier>
			<c path="composure.injectors.InjectorMarrier"/>
			<meta/>
		</_siblingMarrier>
		<_traitCollection>
			<c path="composure.traits.TraitCollection"/>
			<meta/>
		</_traitCollection>
		<_root>
			<c path="composure.core.ComposeRoot"/>
			<meta/>
		</_root>
		<_parentItem>
			<c path="composure.core.ComposeGroup"/>
			<meta/>
		</_parentItem>
		<getRoot set="method" line="59">
			<f a=""><c path="composure.core.ComposeRoot"/></f>
			<meta/>
		</getRoot>
		<setParentItem set="method" line="42">
			<f a="value">
				<c path="composure.core.ComposeGroup"/>
				<c path="composure.core.ComposeGroup"/>
			</f>
			<meta/>
		</setParentItem>
		<getParentItem set="method" line="39">
			<f a=""><c path="composure.core.ComposeGroup"/></f>
			<meta/>
		</getParentItem>
		<parentItem public="1" get="getParentItem" set="setParentItem">
			<c path="composure.core.ComposeGroup"/>
			<meta/>
			<haxe_doc>* The ComposeGroup to which this item is added, if this is the root 'parentItem' will be a self-reference.
	 * This value is set automatically and shouldn't be manually changed.</haxe_doc>
		</parentItem>
		<new public="1" set="method" line="76">
			<f a="?initTraits">
				<c path="Array"><d/></c>
				<e path="Void"/>
			</f>
			<meta/>
			<haxe_doc>* @param	initTraits		A list of traits to add to this ComposeItem initially.</haxe_doc>
		</new>
		<haxe_doc><![CDATA[* ComposeItem forms is the base class of all conceptual items in Composure.
 * It allows traits to be added and removed.<br/>
 * ComposeItem should only be used for performance critical items, it is recommended
 * that most items be represented by the subclass ComposeGroup, which adds the ability
 * to add/remove child items.
 * @author		Tom Byrne]]></haxe_doc>
		<meta/>
	</class>
	<class path="composure.core.ComposeGroup" params="" file="../src/composure/core/ComposeGroup.hx">
		<extends path="composure.core.ComposeItem"/>
		<removeDescParentInjector set="method" line="344">
			<f a="injector">
				<c path="composure.injectors.IInjector"/>
				<e path="Void"/>
			</f>
			<meta/>
		</removeDescParentInjector>
		<addDescParentInjector set="method" line="337">
			<f a="injector">
				<c path="composure.injectors.IInjector"/>
				<e path="Void"/>
			</f>
			<meta/>
		</addDescParentInjector>
		<checkForNewlyUnignoredInjectors set="method" line="319">
			<f a=""><e path="Void"/></f>
			<meta/>
		</checkForNewlyUnignoredInjectors>
		<checkForNewlyIgnoredInjectors set="method" line="300">
			<f a=""><e path="Void"/></f>
			<meta/>
		</checkForNewlyIgnoredInjectors>
		<removeParentInjector set="method" line="290" override="1">
			<f a="injector">
				<c path="composure.injectors.IInjector"/>
				<e path="Void"/>
			</f>
			<meta/>
		</removeParentInjector>
		<addParentInjector set="method" line="280" override="1">
			<f a="injector">
				<c path="composure.injectors.IInjector"/>
				<e path="Void"/>
			</f>
			<meta/>
		</addParentInjector>
		<_removeAscendingInjector set="method" line="275">
			<f a="injector">
				<c path="composure.injectors.IInjector"/>
				<e path="Void"/>
			</f>
			<meta/>
		</_removeAscendingInjector>
		<removeAscendingInjector public="1" set="method" line="267">
			<f a="injector">
				<c path="composure.injectors.IInjector"/>
				<e path="Void"/>
			</f>
			<meta/>
			<haxe_doc>* @private
	 * This is an interal function of Composure. Do not call this method.</haxe_doc>
		</removeAscendingInjector>
		<_addAscendingInjector set="method" line="258">
			<f a="injector">
				<c path="composure.injectors.IInjector"/>
				<e path="Void"/>
			</f>
			<meta/>
		</_addAscendingInjector>
		<addAscendingInjector public="1" set="method" line="249">
			<f a="injector">
				<c path="composure.injectors.IInjector"/>
				<e path="Void"/>
			</f>
			<meta/>
			<haxe_doc>* @private
	 * This is an interal function of Composure. Do not call this method.</haxe_doc>
		</addAscendingInjector>
		<onParentRemove set="method" line="234" override="1">
			<f a=""><e path="Void"/></f>
			<meta/>
		</onParentRemove>
		<onParentAdd set="method" line="223" override="1">
			<f a=""><e path="Void"/></f>
			<meta/>
		</onParentAdd>
		<removeTraitInjector set="method" line="184" override="1">
			<f a="injector">
				<c path="composure.injectors.IInjector"/>
				<e path="Void"/>
			</f>
			<meta/>
		</removeTraitInjector>
		<addTraitInjector set="method" line="175" override="1">
			<f a="injector">
				<c path="composure.injectors.IInjector"/>
				<e path="Void"/>
			</f>
			<meta/>
		</addTraitInjector>
		<removeAllTraits public="1" set="method" line="171" override="1">
			<f a=""><e path="Void"/></f>
			<meta/>
			<haxe_doc>* @inheritDoc</haxe_doc>
		</removeAllTraits>
		<removeTraits public="1" set="method" line="164" override="1">
			<f a="traits">
				<c path="Array"><d/></c>
				<e path="Void"/>
			</f>
			<meta/>
			<haxe_doc>* @inheritDoc</haxe_doc>
		</removeTraits>
		<removeTrait public="1" set="method" line="157" override="1">
			<f a="trait">
				<d/>
				<e path="Void"/>
			</f>
			<meta/>
			<haxe_doc>* @inheritDoc</haxe_doc>
		</removeTrait>
		<addTraits public="1" set="method" line="150" override="1">
			<f a="traits">
				<c path="Array"><d/></c>
				<e path="Void"/>
			</f>
			<meta/>
			<haxe_doc>* @inheritDoc</haxe_doc>
		</addTraits>
		<addTrait public="1" set="method" line="143" override="1">
			<f a="trait">
				<d/>
				<e path="Void"/>
			</f>
			<meta/>
			<haxe_doc>* @inheritDoc</haxe_doc>
		</addTrait>
		<removeChildTrait public="1" set="method" line="136">
			<f a="traitPair">
				<t path="composure.traits.TraitPair"><d/></t>
				<e path="Void"/>
			</f>
			<meta/>
			<haxe_doc>* @private
	 * This is an interal function of Composure. Do not call this method.</haxe_doc>
		</removeChildTrait>
		<addChildTrait public="1" set="method" line="128">
			<f a="traitPair">
				<t path="composure.traits.TraitPair"><d/></t>
				<e path="Void"/>
			</f>
			<meta/>
			<haxe_doc>* @private
	 * This is an interal function of Composure. Do not call this method.</haxe_doc>
		</addChildTrait>
		<removeChild public="1" set="method" line="90">
			<f a="item">
				<c path="composure.core.ComposeItem"/>
				<e path="Void"/>
			</f>
			<meta/>
			<haxe_doc>* Removes a child ComposeItem from this ComposeGroup.
	 * @param	item		A ComposeItem object to remove as a child from this group.</haxe_doc>
		</removeChild>
		<addChild public="1" set="method" line="60">
			<f a="item">
				<c path="composure.core.ComposeItem"/>
				<e path="Void"/>
			</f>
			<meta/>
			<haxe_doc>* Adds a child ComposeItem to this ComposeGroup.
	 * @param	item		A ComposeItem object to add as a child to this group.</haxe_doc>
		</addChild>
		<setRoot set="method" line="50" override="1">
			<f a="game">
				<c path="composure.core.ComposeRoot"/>
				<e path="Void"/>
			</f>
			<meta/>
		</setRoot>
		<_ignoredParentDescInjectors>
			<c path="org.tbyrne.collections.UniqueList"><c path="composure.injectors.IInjector"/></c>
			<meta/>
		</_ignoredParentDescInjectors>
		<_parentDescInjectors>
			<c path="org.tbyrne.collections.UniqueList"><c path="composure.injectors.IInjector"/></c>
			<meta/>
		</_parentDescInjectors>
		<_descInjectors>
			<c path="org.tbyrne.collections.UniqueList"><c path="composure.injectors.IInjector"/></c>
			<meta/>
		</_descInjectors>
		<_childAscendingMarrier>
			<c path="composure.injectors.InjectorMarrier"/>
			<meta/>
		</_childAscendingMarrier>
		<_ignoredChildAscInjectors>
			<c path="org.tbyrne.collections.UniqueList"><c path="composure.injectors.IInjector"/></c>
			<meta/>
		</_ignoredChildAscInjectors>
		<_childAscInjectors>
			<c path="org.tbyrne.collections.UniqueList"><c path="composure.injectors.IInjector"/></c>
			<meta/>
		</_childAscInjectors>
		<_children>
			<c path="org.tbyrne.collections.UniqueList"><c path="composure.core.ComposeItem"/></c>
			<meta/>
		</_children>
		<_descendantTraits>
			<c path="composure.traits.TraitCollection"/>
			<meta/>
		</_descendantTraits>
		<get_children set="method" line="24">
			<f a=""><t path="Iterable"><c path="composure.core.ComposeItem"/></t></f>
			<meta/>
		</get_children>
		<new public="1" set="method" line="42">
			<f a="?initTraits">
				<c path="Array"><d/></c>
				<e path="Void"/>
			</f>
			<meta/>
			<haxe_doc>* @param	initTraits		A list of traits to add to this ComposeItem initially.</haxe_doc>
		</new>
		<haxe_doc><![CDATA[* ComposeGroup is the core item used in Composure. It represents one conceptual object.
 * It shouldn't be directly overriden, instead it should be instantiated and then
 * populated with traits, each adding one atomic piece of behaviour.<br/>
 * ComposeGroup adds to the functionality of ComposeItem by allowing child items. For
 * performance critical items that will never need to house children, ComposeItem can
 * be used instead.
 * @author		Tom Byrne]]></haxe_doc>
		<meta/>
	</class>
	<class path="composure.core.ComposeRoot" params="" file="../src/composure/core/ComposeRoot.hx">
		<extends path="composure.core.ComposeGroup"/>
		<removeUniversalInjector public="1" set="method" line="42">
			<f a="injector">
				<c path="composure.injectors.IInjector"/>
				<e path="Void"/>
			</f>
			<meta/>
			<haxe_doc>* @private</haxe_doc>
		</removeUniversalInjector>
		<addUniversalInjector public="1" set="method" line="35">
			<f a="injector">
				<c path="composure.injectors.IInjector"/>
				<e path="Void"/>
			</f>
			<meta/>
			<haxe_doc>* @private</haxe_doc>
		</addUniversalInjector>
		<_universalMarrier>
			<c path="composure.injectors.InjectorMarrier"/>
			<meta/>
		</_universalMarrier>
		<haxe_doc><![CDATA[* ComposeRoot is the root item for the Composure library.
 * When using Composure, one top-level ComposeRoot object should be
 * created. All other objects should then be added to this object or one
 * of it's descendants.<br/>
 * It is recommended that you do not add traits directly to the root object.
 * Adding them to some 'stage' or 'controller' item instead will allow your app
 * to coexist and interrelate with other Composure apps in future.<br/>
 * The only functional change ComposeRoot adds to ComposeGroup is that it's
 * 'root' property is a reference to itself.
 * @author		Tom Byrne]]></haxe_doc>
	</class>
	<class path="composure.injectors.IInjector" params="" file="../src/composure/injectors/IInjector.hx" interface="1">
		<isInterestedIn public="1" set="method"><f a="item:trait">
	<c path="composure.core.ComposeItem"/>
	<d/>
	<e path="Bool"/>
</f></isInterestedIn>
		<shouldAscend public="1" set="method"><f a="item">
	<c path="composure.core.ComposeItem"/>
	<e path="Bool"/>
</f></shouldAscend>
		<shouldDescend public="1" set="method"><f a="item">
	<c path="composure.core.ComposeItem"/>
	<e path="Bool"/>
</f></shouldDescend>
		<injectorRemoved public="1" set="method"><f a="traitPair">
	<t path="composure.traits.TraitPair"><d/></t>
	<e path="Void"/>
</f></injectorRemoved>
		<injectorAdded public="1" set="method"><f a="traitPair">
	<t path="composure.traits.TraitPair"><d/></t>
	<e path="Void"/>
</f></injectorAdded>
		<ownerTrait public="1">
			<d/>
			<meta/>
		</ownerTrait>
		<acceptOwnerTrait public="1" set="null">
			<e path="Bool"/>
			<meta/>
		</acceptOwnerTrait>
		<universal public="1" set="null">
			<e path="Bool"/>
			<meta/>
		</universal>
		<descendants public="1" set="null">
			<e path="Bool"/>
			<meta/>
		</descendants>
		<ascendants public="1" set="null">
			<e path="Bool"/>
			<meta/>
		</ascendants>
		<siblings public="1" set="null">
			<e path="Bool"/>
			<meta/>
		</siblings>
	</class>
	<class path="composure.injectors.AbstractInjector" params="" file="../src/composure/injectors/AbstractInjector.hx">
		<implements path="composure.injectors.IInjector"/>
		<isInterestedIn public="1" set="method" line="123">
			<f a="item:trait">
				<c path="composure.core.ComposeItem"/>
				<d/>
				<e path="Bool"/>
			</f>
			<meta/>
		</isInterestedIn>
		<shouldAscend public="1" set="method" line="119">
			<f a="item">
				<c path="composure.core.ComposeItem"/>
				<e path="Bool"/>
			</f>
			<meta/>
		</shouldAscend>
		<shouldDescend public="1" set="method" line="115">
			<f a="item">
				<c path="composure.core.ComposeItem"/>
				<e path="Bool"/>
			</f>
			<meta/>
		</shouldDescend>
		<injectorRemoved public="1" set="method" line="79">
			<f a="traitPair">
				<t path="composure.traits.TraitPair"><d/></t>
				<e path="Void"/>
			</f>
			<meta/>
		</injectorRemoved>
		<injectorAdded public="1" set="method" line="59">
			<f a="traitPair">
				<t path="composure.traits.TraitPair"><d/></t>
				<e path="Void"/>
			</f>
			<meta/>
		</injectorAdded>
		<_addedTraits>
			<c path="org.tbyrne.collections.UniqueList"><d/></c>
			<meta/>
		</_addedTraits>
		<passThroughItem public="1">
			<e path="Bool"/>
			<meta/>
		</passThroughItem>
		<passThroughInjector public="1">
			<e path="Bool"/>
			<meta/>
		</passThroughInjector>
		<ownerTrait public="1">
			<d/>
			<meta/>
		</ownerTrait>
		<_enumValMode>
			<e path="Bool"/>
			<meta/>
		</_enumValMode>
		<set_interestedTraitType set="method" line="22">
			<f a="value">
				<d/>
				<d/>
			</f>
			<meta/>
		</set_interestedTraitType>
		<interestedTraitType public="1" set="set_interestedTraitType">
			<d/>
			<meta/>
		</interestedTraitType>
		<acceptOwnerTrait public="1">
			<e path="Bool"/>
			<meta/>
		</acceptOwnerTrait>
		<universal public="1">
			<e path="Bool"/>
			<meta/>
		</universal>
		<ascendants public="1">
			<e path="Bool"/>
			<meta/>
		</ascendants>
		<descendants public="1">
			<e path="Bool"/>
			<meta/>
		</descendants>
		<siblings public="1">
			<e path="Bool"/>
			<meta/>
		</siblings>
		<removeHandler public="1">
			<d/>
			<meta/>
		</removeHandler>
		<addHandler public="1">
			<d/>
			<meta/>
		</addHandler>
		<new public="1" set="method" line="43">
			<f a="interestedTraitType:addHandler:removeHandler:?siblings:?descendants:?ascendants:?universal">
				<d/>
				<d/>
				<d/>
				<e path="Bool"/>
				<e path="Bool"/>
				<e path="Bool"/>
				<e path="Bool"/>
				<e path="Void"/>
			</f>
			<meta/>
		</new>
		<meta/>
	</class>
	<class path="composure.injectors.Injector" params="" file="../src/composure/injectors/Injector.hx">
		<extends path="composure.injectors.AbstractInjector"/>
		<isInterestedIn public="1" set="method" line="35" override="1">
			<f a="item:trait">
				<c path="composure.core.ComposeItem"/>
				<d/>
				<e path="Bool"/>
			</f>
			<meta/>
		</isInterestedIn>
		<shouldAscend public="1" set="method" line="28" override="1">
			<f a="item">
				<c path="composure.core.ComposeItem"/>
				<e path="Bool"/>
			</f>
			<meta/>
		</shouldAscend>
		<shouldDescend public="1" set="method" line="21" override="1">
			<f a="item">
				<c path="composure.core.ComposeItem"/>
				<e path="Bool"/>
			</f>
			<meta/>
		</shouldDescend>
		<maxMatches public="1">
			<c path="Int"/>
			<meta/>
		</maxMatches>
		<stopAscendingAt public="1">
			<f a="::">
				<c path="composure.core.ComposeItem"/>
				<d/>
				<c path="composure.injectors.Injector"/>
				<e path="Bool"/>
			</f>
			<meta/>
		</stopAscendingAt>
		<stopDescendingAt public="1">
			<f a="::">
				<c path="composure.core.ComposeItem"/>
				<d/>
				<c path="composure.injectors.Injector"/>
				<e path="Bool"/>
			</f>
			<meta/>
		</stopDescendingAt>
		<matchTrait public="1">
			<f a="::">
				<c path="composure.core.ComposeItem"/>
				<d/>
				<c path="composure.injectors.Injector"/>
				<e path="Bool"/>
			</f>
			<meta/>
		</matchTrait>
		<new public="1" set="method" line="14">
			<f a="traitType:addHandler:removeHandler:?siblings:?descendants:?ascendants:?universal">
				<d/>
				<d/>
				<d/>
				<e path="Bool"/>
				<e path="Bool"/>
				<e path="Bool"/>
				<e path="Bool"/>
				<e path="Void"/>
			</f>
			<meta/>
		</new>
		<meta/>
	</class>
	<class path="composure.injectors.InjectorMarrier" params="" file="../src/composure/injectors/InjectorMarrier.hx">
		<compareTrait set="method" line="122">
			<f a="traitPair:traitInjector">
				<t path="composure.traits.TraitPair"><d/></t>
				<c path="composure.injectors.IInjector"/>
				<e path="Void"/>
			</f>
			<meta/>
		</compareTrait>
		<onTraitRemoved set="method" line="107">
			<f a="traitPair">
				<t path="composure.traits.TraitPair"><d/></t>
				<e path="Void"/>
			</f>
			<meta/>
		</onTraitRemoved>
		<onTraitAdded set="method" line="101">
			<f a="traitPair">
				<t path="composure.traits.TraitPair"><d/></t>
				<e path="Void"/>
			</f>
			<meta/>
		</onTraitAdded>
		<removeInjector public="1" set="method" line="73">
			<f a="traitInjector">
				<c path="composure.injectors.IInjector"/>
				<e path="Void"/>
			</f>
			<meta/>
		</removeInjector>
		<addInjector public="1" set="method" line="55">
			<f a="traitInjector">
				<c path="composure.injectors.IInjector"/>
				<e path="Void"/>
			</f>
			<meta/>
		</addInjector>
		<_traitLookup>
			<c path="cmtc.ds.hash.ObjectHash">
				<d/>
				<c path="org.tbyrne.collections.UniqueList"><c path="composure.injectors.IInjector"/></c>
			</c>
			<meta/>
		</_traitLookup>
		<_injectorLookup>
			<c path="cmtc.ds.hash.ObjectHash">
				<c path="composure.injectors.IInjector"/>
				<c path="org.tbyrne.collections.UniqueList"><t path="composure.traits.TraitPair"><d/></t></c>
			</c>
			<meta/>
		</_injectorLookup>
		<_traitInjectors>
			<c path="org.tbyrne.collections.UniqueList"><c path="composure.injectors.IInjector"/></c>
			<meta/>
		</_traitInjectors>
		<_traits>
			<c path="composure.traits.TraitCollection"/>
			<meta/>
		</_traits>
		<getTraitInjectors set="method" line="34">
			<f a=""><c path="org.tbyrne.collections.UniqueList"><c path="composure.injectors.IInjector"/></c></f>
			<meta/>
		</getTraitInjectors>
		<set_traits set="method" line="19">
			<f a="value">
				<c path="composure.traits.TraitCollection"/>
				<c path="composure.traits.TraitCollection"/>
			</f>
			<meta/>
		</set_traits>
		<get_traits set="method" line="16">
			<f a=""><c path="composure.traits.TraitCollection"/></f>
			<meta/>
		</get_traits>
		<traits public="1" get="get_traits" set="set_traits">
			<c path="composure.traits.TraitCollection"/>
			<meta/>
		</traits>
		<new public="1" set="method" line="47">
			<f a="traits">
				<c path="composure.traits.TraitCollection"/>
				<e path="Void"/>
			</f>
			<meta/>
		</new>
		<meta/>
	</class>
	<class path="composure.injectors.PropInjector" params="" file="../src/composure/injectors/PropInjector.hx" extern="1">
		<extends path="composure.injectors.Injector"/>
		<haxe_doc>* ...
 * @author Tom Byrne</haxe_doc>
		<meta><m n=":native"><e>Dynamic</e></m></meta>
	</class>
	<class path="composure.macro.InjectorMacro" params="" file="../src/composure/macro/InjectorMacro.hx" extern="1">
		<haxe_doc><![CDATA[* The InjectorMacro is used to convert inject metadata into IInjector objects.
 * It gets run at compile-time using the build metadata:<br/>
 * '@build(composure.macro.InjectorMacro.inject())'<br/>
 * which should be added directly above your trait class definition.<br/>
 * <br/>
 * If your trait extends AbstractTrait, it needn't use the '@build' metadata
 * as all subclasses of AbstractTrait automatically get processed by the 
 * InjectorMacro.
 * 
 * @author Tom Byrne]]></haxe_doc>
		<meta><m n=":native"><e>Dynamic</e></m></meta>
	</class>
	<class path="composure.macro._InjectorMacro.InjectorAccess" params="" file="../src/composure/macro/InjectorMacro.hx" private="1" module="composure.macro.InjectorMacro" extern="1"><meta><m n=":native"><e>Dynamic</e></m></meta></class>
	<class path="composure.traitCheckers.GenerationChecker" params="" file="../src/composure/traitCheckers/GenerationChecker.hx" extern="1">
		<haxe_doc>* @author Tom Byrne</haxe_doc>
		<meta><m n=":native"><e>Dynamic</e></m></meta>
	</class>
	<enum path="composure.traitCheckers.ItemType" params="" file="../src/composure/traitCheckers/GenerationChecker.hx" module="composure.traitCheckers.GenerationChecker">
		<specific a="ItemType"><c path="composure.core.ComposeItem"/></specific>
		<root/>
		<injectorItem/>
	</enum>
	<class path="composure.traitCheckers.MatchProps" params="" file="../src/composure/traitCheckers/MatchProps.hx" extern="1">
		<haxe_doc>* ...
 * @author Tom Byrne</haxe_doc>
		<meta><m n=":native"><e>Dynamic</e></m></meta>
	</class>
	<class path="composure.traitCheckers.TraitTypeChecker" params="" file="../src/composure/traitCheckers/TraitTypeChecker.hx" extern="1">
		<haxe_doc>* @author Tom Byrne</haxe_doc>
		<meta><m n=":native"><e>Dynamic</e></m></meta>
	</class>
	<class path="composure.traits.ITrait" params="" file="../src/composure/traits/ITrait.hx" interface="1">
		<getInjectors public="1" set="method">
			<f a=""><t path="Iterable"><c path="composure.injectors.IInjector"/></t></f>
			<haxe_doc>* This provides a way for this trait to gain access to other traits in the
	 * application.
	 * @return A list of IInjectors, each one describing which traits it is concerned with.</haxe_doc>
		</getInjectors>
		<group public="1" set="null">
			<c path="composure.core.ComposeGroup"/>
			<meta/>
			<haxe_doc>* The group to which this item is added. This is a method of convenience,
	 * and should return the 'item' property cast as a ComposeGroup.</haxe_doc>
		</group>
		<item public="1" set="set_item">
			<c path="composure.core.ComposeItem"/>
			<meta/>
			<haxe_doc>* The item which this trait is added to. Do not set this manually,
	 * the ComposeItem class sets this property automatically when the 
	 * trait is added to it.</haxe_doc>
		</item>
		<haxe_doc>* ITrait can be implemented by traits to give them access to the item
 * to which they are added. It also allows traits to return a list of 
 * injectors, which describe other traits (sibling, ascendant or descendant)
 * which this trait should gain access to.
 * 
 * @author		Tom Byrne</haxe_doc>
		<meta/>
	</class>
	<class path="composure.traits.AbstractTrait" params="" file="../src/composure/traits/AbstractTrait.hx">
		<implements path="composure.traits.ITrait"/>
		<removeInjector public="1" set="method" line="195">
			<f a="injector">
				<c path="composure.injectors.IInjector"/>
				<e path="Void"/>
			</f>
			<meta/>
			<haxe_doc>* Removes an injector from this trait.
	 * @see addInjector
	 * @param injector The injector to remove from this trait.</haxe_doc>
		</removeInjector>
		<addInjector public="1" set="method" line="181">
			<f a="injector">
				<c path="composure.injectors.IInjector"/>
				<e path="Void"/>
			</f>
			<meta/>
			<haxe_doc>* Adds an injector to this trait, each injector is a description of a certain other trait
	 * that this trait would like access to.
	 * @param injector The injector to add to this trait.</haxe_doc>
		</addInjector>
		<getInjectors public="1" set="method" line="117">
			<f a=""><t path="Iterable"><c path="composure.injectors.IInjector"/></t></f>
			<meta/>
			<haxe_doc>* This provides a way for this trait to gain access to other traits in the
	 * application.
	 * @return A list of IInjectors, each one describing which traits it is concerned with.</haxe_doc>
		</getInjectors>
		<onItemAdd set="method" line="108">
			<f a=""><e path="Void"/></f>
			<meta/>
		</onItemAdd>
		<onItemRemove set="method" line="105">
			<f a=""><e path="Void"/></f>
			<meta/>
		</onItemRemove>
		<_ownerTrait>
			<d/>
			<meta/>
		</_ownerTrait>
		<_childItems>
			<c path="org.tbyrne.collections.UniqueList"><c path="composure.core.ComposeItem"/></c>
			<meta/>
		</_childItems>
		<_siblingTraits>
			<c path="org.tbyrne.collections.UniqueList"><d/></c>
			<meta/>
		</_siblingTraits>
		<_injectors>
			<c path="org.tbyrne.collections.UniqueList"><c path="composure.injectors.IInjector"/></c>
			<meta/>
		</_injectors>
		<set_item set="method" line="40">
			<f a="value">
				<c path="composure.core.ComposeItem"/>
				<c path="composure.core.ComposeItem"/>
			</f>
			<meta/>
		</set_item>
		<item public="1" set="set_item">
			<c path="composure.core.ComposeItem"/>
			<meta/>
			<haxe_doc>* The item which this trait is added to. Do not set this manually,
	 * the ComposeItem class sets this property automatically when the 
	 * trait is added to it.</haxe_doc>
		</item>
		<group public="1" set="null">
			<c path="composure.core.ComposeGroup"/>
			<meta/>
			<haxe_doc>* The group to which this item is added. This is a method of convenience,
	 * and returns the 'item' property cast as a ComposeGroup.</haxe_doc>
		</group>
		<haxe_doc><![CDATA[* The AbstractTrait class can be extended by any trait to gain access
 * to the trait to which it is added. It also allows traits to access
 * other traits in the application either via the injection metadata
 * or via manually adding injectors via the addInjector method.<br/>
 * <br/>
 * If, for whatever reason, it is not possible or convenient to extend 
 * AbstractTrait, it is also possible to instantiate it within your trait
 * (passing <code>this</code> in as the constructor argument) and returning this
 * instance via a <code>getProxiedTrait</code> method. To use injection metadata in
 * this situation you must also add the <code>@build(composure.macro.InjectorMacro.inject())</code>
 * metadata to your class.
 * 
 * @author		Tom Byrne]]></haxe_doc>
		<meta>
			<m n=":autoBuild"><e>'???'</e></m>
			<m n=":autoBuild"><e>'???'</e></m>
		</meta>
	</class>
	<typedef path="composure.traits.TraitPair" params="TraitType" file="../src/composure/traits/ITrait.hx" module="composure.traits.ITrait"><a>
	<trait><c path="composure.traits.TraitPair.TraitType"/></trait>
	<item><c path="composure.core.ComposeItem"/></item>
</a></typedef>
	<class path="composure.traits.TraitCollection" params="" file="../src/composure/traits/TraitCollection.hx">
		<get_traitRemoved set="method" line="28">
			<f a=""><c path="msignal.Signal1"><t path="composure.traits.TraitPair"><d/></t></c></f>
			<meta/>
		</get_traitRemoved>
		<_traitRemoved>
			<c path="msignal.Signal1"><t path="composure.traits.TraitPair"><d/></t></c>
			<meta/>
		</_traitRemoved>
		<get_traitAdded set="method" line="25">
			<f a=""><c path="msignal.Signal1"><t path="composure.traits.TraitPair"><d/></t></c></f>
			<meta/>
		</get_traitAdded>
		<_traitAdded>
			<c path="msignal.Signal1"><t path="composure.traits.TraitPair"><d/></t></c>
			<meta/>
		</_traitAdded>
		<removeTrait public="1" set="method" line="173">
			<f a="traitPair">
				<t path="composure.traits.TraitPair"><d/></t>
				<e path="Void"/>
			</f>
			<meta/>
		</removeTrait>
		<addTrait public="1" set="method" line="165">
			<f a="traitPair">
				<t path="composure.traits.TraitPair"><d/></t>
				<e path="Void"/>
			</f>
			<meta/>
		</addTrait>
		<validateCache public="1" params="TraitType" set="method" line="70">
			<f a="matchType">
				<c path="Class"><c path="validateCache.TraitType"/></c>
				<c path="composure.traits._TraitCollection.TraitTypeCache"><c path="validateCache.TraitType"/></c>
			</f>
			<meta/>
		</validateCache>
		<getTrait public="1" params="TraitType" set="method" line="47">
			<f a="TraitType">
				<c path="Class"><c path="getTrait.TraitType"/></c>
				<c path="getTrait.TraitType"/>
			</f>
			<meta/>
		</getTrait>
		<traitPairs public="1" set="null">
			<c path="org.tbyrne.collections.UniqueList"><t path="composure.traits.TraitPair"><d/></t></c>
			<meta/>
		</traitPairs>
		<_traitTypeCache>
			<c path="Hash"><c path="composure.traits._TraitCollection.TraitTypeCache"><d/></c></c>
			<meta/>
		</_traitTypeCache>
		<_testSignal>
			<c path="msignal.Signal1"><d/></c>
			<meta/>
		</_testSignal>
		<get_testSignal set="method" line="31">
			<f a=""><c path="msignal.Signal1"><d/></c></f>
			<meta/>
		</get_testSignal>
		<testSignal public="1" get="get_testSignal" set="null">
			<c path="msignal.Signal1"><d/></c>
			<meta/>
		</testSignal>
		<traitRemoved public="1" get="get_traitRemoved" set="null">
			<c path="msignal.Signal1"><t path="composure.traits.TraitPair"><d/></t></c>
			<meta><m n="lazyInst"/></meta>
		</traitRemoved>
		<traitAdded public="1" get="get_traitAdded" set="null">
			<c path="msignal.Signal1"><t path="composure.traits.TraitPair"><d/></t></c>
			<meta><m n="lazyInst"/></meta>
		</traitAdded>
		<new public="1" set="method" line="41">
			<f a=""><e path="Void"/></f>
			<meta/>
		</new>
		<haxe_doc>* The TraitCollection holds a collection of traits and has the
 * ability to compare them to a collection of injectors. This is 
 * used internally in Composure.
 * 
 * @author Tom Byrne</haxe_doc>
		<meta><m n=":build"><e>'???'</e></m></meta>
	</class>
	<class path="composure.traits._TraitCollection.TraitTypeCache" params="TraitType" file="../src/composure/traits/TraitCollection.hx" private="1" module="composure.traits.TraitCollection">
		<invalid public="1">
			<c path="org.tbyrne.collections.UniqueList"><t path="composure.traits.TraitPair"><c path="composure.traits._TraitCollection.TraitTypeCache.TraitType"/></t></c>
			<meta/>
		</invalid>
		<matched public="1">
			<c path="org.tbyrne.collections.UniqueList"><t path="composure.traits.TraitPair"><c path="composure.traits._TraitCollection.TraitTypeCache.TraitType"/></t></c>
			<meta/>
		</matched>
		<getTraitsList public="1">
			<c path="org.tbyrne.collections.UniqueList"><c path="composure.traits._TraitCollection.TraitTypeCache.TraitType"/></c>
			<meta/>
		</getTraitsList>
		<getTraits public="1">
			<t path="Iterable"><c path="composure.traits._TraitCollection.TraitTypeCache.TraitType"/></t>
			<meta/>
		</getTraits>
		<getTrait public="1">
			<c path="composure.traits._TraitCollection.TraitTypeCache.TraitType"/>
			<meta/>
		</getTrait>
		<methodCachesSafe public="1">
			<e path="Bool"/>
			<meta/>
		</methodCachesSafe>
		<new public="1" set="method" line="195">
			<f a=""><e path="Void"/></f>
			<meta/>
		</new>
		<meta/>
	</class>
	<class path="composure.utilTraits.Furnisher" params="" file="../src/composure/utilTraits/Furnisher.hx">
		<extends path="composure.traits.AbstractTrait"/>
		<unregisterItem set="method" line="307">
			<f a="trait:currItem:origItem">
				<d/>
				<c path="composure.core.ComposeItem"/>
				<c path="composure.core.ComposeItem"/>
				<e path="Void"/>
			</f>
			<meta/>
		</unregisterItem>
		<registerItem set="method" line="240">
			<f a="trait:origItem">
				<d/>
				<c path="composure.core.ComposeItem"/>
				<c path="composure.core.ComposeItem"/>
			</f>
			<meta/>
		</registerItem>
		<getItem set="method" line="237">
			<f a="trait">
				<d/>
				<c path="composure.core.ComposeItem"/>
			</f>
			<meta/>
		</getItem>
		<testRules set="method" line="221">
			<f a="foundTrait:item:rules">
				<d/>
				<c path="composure.core.ComposeItem"/>
				<c path="Array"><e path="composure.utilTraits.AddRule"/></c>
				<e path="Bool"/>
			</f>
			<meta/>
		</testRules>
		<getTrait set="method" line="204">
			<f a="foundTrait:item:addTrait">
				<d/>
				<c path="composure.core.ComposeItem"/>
				<e path="composure.utilTraits.AddTrait"/>
				<d/>
			</f>
			<meta/>
		</getTrait>
		<onConcernedTraitRemoved set="method" line="167">
			<f a="trait:currItem">
				<d/>
				<c path="composure.core.ComposeItem"/>
				<e path="Void"/>
			</f>
			<meta/>
		</onConcernedTraitRemoved>
		<onConcernedTraitAdded set="method" line="142">
			<f a="trait:origItem">
				<d/>
				<c path="composure.core.ComposeItem"/>
				<e path="Void"/>
			</f>
			<meta/>
		</onConcernedTraitAdded>
		<_ignoreTraitChanges>
			<e path="Bool"/>
			<meta/>
		</_ignoreTraitChanges>
		<_originalParents>
			<c path="cmtc.ds.hash.ObjectHash">
				<d/>
				<c path="composure.core.ComposeGroup"/>
			</c>
			<meta/>
		</_originalParents>
		<_originalItems>
			<c path="cmtc.ds.hash.ObjectHash">
				<d/>
				<c path="composure.core.ComposeItem"/>
			</c>
			<meta/>
		</_originalItems>
		<_traitToItems>
			<c path="cmtc.ds.hash.ObjectHash">
				<d/>
				<c path="composure.core.ComposeItem"/>
			</c>
			<meta/>
		</_traitToItems>
		<_addedTraits>
			<c path="cmtc.ds.hash.ObjectHash">
				<d/>
				<c path="Array"><d/></c>
			</c>
			<meta/>
		</_addedTraits>
		<_foundTraits>
			<c path="org.tbyrne.collections.UniqueList"><d/></c>
			<meta/>
		</_foundTraits>
		<_addTraits>
			<c path="org.tbyrne.collections.UniqueList"><e path="composure.utilTraits.AddTrait"/></c>
			<meta/>
		</_addTraits>
		<_injector>
			<c path="composure.injectors.Injector"/>
			<meta/>
		</_injector>
		<_addType>
			<e path="composure.utilTraits.AddType"/>
			<meta/>
		</_addType>
		<set_searchAscendants set="method" line="103">
			<f a="value">
				<e path="Bool"/>
				<e path="Bool"/>
			</f>
			<meta/>
		</set_searchAscendants>
		<searchAscendants public="1" set="set_searchAscendants">
			<e path="Bool"/>
			<meta/>
		</searchAscendants>
		<set_searchDescendants set="method" line="93">
			<f a="value">
				<e path="Bool"/>
				<e path="Bool"/>
			</f>
			<meta/>
		</set_searchDescendants>
		<searchDescendants public="1" set="set_searchDescendants">
			<e path="Bool"/>
			<meta/>
		</searchDescendants>
		<set_searchSiblings set="method" line="83">
			<f a="value">
				<e path="Bool"/>
				<e path="Bool"/>
			</f>
			<meta/>
		</set_searchSiblings>
		<searchSiblings public="1" set="set_searchSiblings">
			<e path="Bool"/>
			<meta/>
		</searchSiblings>
		<set_concernedTraitType set="method" line="68">
			<f a="value">
				<d/>
				<d/>
			</f>
			<meta/>
		</set_concernedTraitType>
		<concernedTraitType public="1" set="set_concernedTraitType">
			<d/>
			<meta/>
		</concernedTraitType>
		<haxe_doc><![CDATA[* The Furnisher class is used to add traits to an item in response
 * to a certain type of trait being added to the item.<br/>
 * <br/>
 * This is very useful when creating interchangable libraries. For example,
 * when wanting to add a platform specific display trait to a items in the
 * presence of another trait:
 * <pre><code>
 * var furnisher:Furnisher = new Furnisher(RectangleInfo, [TType(HtmlRectangleDisplay)]);
 * stage.addTrait(furnisher);
 * </code></pre>
 * In this example, any item which has a RectangleInfo trait added to it (representing
 * a rectangle's position and size) will also get a HtmlRectangleDisplay trait added to
 * it. The HtmlRectangleDisplay object can then access the RectangleInfo's size and 
 * position properties using injection metadata. In this way, the display method for
 * all rectangles could be quickly and easily be swapped out for another display trait.
 * 
 * @author Tom Byrne]]></haxe_doc>
		<meta>
			<m n=":build"><e>'???'</e></m>
			<m n=":autoBuild"><e>'???'</e></m>
			<m n=":build"><e>'???'</e></m>
			<m n=":autoBuild"><e>'???'</e></m>
		</meta>
	</class>
	<enum path="composure.utilTraits.AddTrait" params="" file="../src/composure/utilTraits/Furnisher.hx" module="composure.utilTraits.Furnisher">
		<TType a="t:?rules">
			<c path="Class"><d/></c>
			<c path="Array"><e path="composure.utilTraits.AddRule"/></c>
		</TType>
		<TInst a="t:?rules">
			<d/>
			<c path="Array"><e path="composure.utilTraits.AddRule"/></c>
		</TInst>
		<TFact a="f:?rules">
			<f a=""><d/></f>
			<c path="Array"><e path="composure.utilTraits.AddRule"/></c>
		</TFact>
		<meta/>
	</enum>
	<enum path="composure.utilTraits.AddRule" params="" file="../src/composure/utilTraits/Furnisher.hx" module="composure.utilTraits.Furnisher">
		<UnlessHas a="t"><c path="Class"><d/></c></UnlessHas>
		<IfHas a="t"><c path="Class"><d/></c></IfHas>
		<meta/>
	</enum>
	<enum path="composure.utilTraits.AddType" params="" file="../src/composure/utilTraits/Furnisher.hx" module="composure.utilTraits.Furnisher">
		<traitSibling a="?adoptMatchedTrait"><e path="Bool"/></traitSibling>
		<traitItem/>
		<traitChild a="?adoptMatchedTrait"><e path="Bool"/></traitChild>
		<selfSibling a="?adoptMatchedTrait"><e path="Bool"/></selfSibling>
		<selfItem a="?adoptMatchedTrait"><e path="Bool"/></selfItem>
		<selfChild a="?adoptMatchedTrait"><e path="Bool"/></selfChild>
		<itemSibling a="item:?adoptMatchedTrait">
			<c path="composure.core.ComposeItem"/>
			<e path="Bool"/>
		</itemSibling>
		<itemChild a="group:?adoptMatchedTrait">
			<c path="composure.core.ComposeGroup"/>
			<e path="Bool"/>
		</itemChild>
		<item a="item:?adoptMatchedTrait">
			<c path="composure.core.ComposeItem"/>
			<e path="Bool"/>
		</item>
		<adoptItem a="newParent:?adoptMatchedTrait">
			<c path="composure.core.ComposeGroup"/>
			<e path="Bool"/>
		</adoptItem>
		<meta/>
	</enum>
	<class path="composure.utilTraits.TraitTypeLimiter" params="" file="../src/composure/utilTraits/TraitTypeLimiter.hx">
		<extends path="composure.traits.AbstractTrait"/>
		<reAddTrait set="method" line="156">
			<f a="item:added:removed">
				<c path="composure.core.ComposeItem"/>
				<c path="Array"><d/></c>
				<c path="Array"><d/></c>
				<e path="Void"/>
			</f>
			<meta/>
		</reAddTrait>
		<checkTraits set="method" line="93">
			<f a=""><e path="Void"/></f>
			<meta/>
		</checkTraits>
		<_ignoreChanges>
			<e path="Bool"/>
			<meta/>
		</_ignoreChanges>
		<_removed>
			<c path="cmtc.ds.hash.ObjectHash">
				<c path="composure.core.ComposeItem"/>
				<c path="Array"><d/></c>
			</c>
			<meta/>
		</_removed>
		<_added>
			<c path="cmtc.ds.hash.ObjectHash">
				<c path="composure.core.ComposeItem"/>
				<c path="Array"><d/></c>
			</c>
			<meta/>
		</_added>
		<policy public="1">
			<e path="composure.utilTraits.LimitPolicy"/>
			<meta/>
		</policy>
		<set_maxCount set="method" line="25">
			<f a="value">
				<c path="Int"/>
				<c path="Int"/>
			</f>
			<meta/>
		</set_maxCount>
		<maxCount public="1" set="set_maxCount">
			<c path="Int"/>
			<meta/>
		</maxCount>
		<haxe_doc><![CDATA[* TraitTypeLimiter is used to restrict the amount of a certain type of trait
 * which can be added to a certain item. It could be used, for example, to limit the
 * amount of IMatrixTransform traits on a certain item to 1.<br/>
 * If the initially added trait (i.e. the last one added before maxCount was reached)
 * implements ITransmittableTrait, then the removed trait will be passed into this
 * trait using the transmitFrom method, this allows the existing trait to copy over
 * information from the new trait.<br/>
 * Typically this class is used when the end user has control over trait structures
 * to enforce certain rules.
 * @author Tom Byrne]]></haxe_doc>
		<meta>
			<m n=":build"><e>'???'</e></m>
			<m n=":autoBuild"><e>'???'</e></m>
			<m n=":build"><e>'???'</e></m>
			<m n=":autoBuild"><e>'???'</e></m>
		</meta>
	</class>
	<enum path="composure.utilTraits.LimitPolicy" params="" file="../src/composure/utilTraits/TraitTypeLimiter.hx" module="composure.utilTraits.TraitTypeLimiter">
		<FirstInLastOut/>
		<FirstInFirstOut/>
		<meta/>
	</enum>
	<class path="composure.utilTraits.ITransmittableTrait" params="" file="../src/composure/utilTraits/TraitTypeLimiter.hx" module="composure.utilTraits.TraitTypeLimiter" interface="1"><transmitFrom public="1" set="method"><f a="trait">
	<d/>
	<e path="Void"/>
</f></transmitFrom></class>
	<class path="composureTest.ClassIncluder" params="" file="../testSrc/composureTest/ClassIncluder.hx">
		<main set="method" line="13" static="1">
			<f a=""><e path="Void"/></f>
			<meta/>
		</main>
		<meta/>
	</class>
	<class path="haxe.FastCell" params="T" file="C:\Motion-Twin\haxe\std/haxe/FastList.hx" module="haxe.FastList">
		<next public="1">
			<c path="haxe.FastCell"><c path="haxe.FastCell.T"/></c>
			<meta/>
		</next>
		<elt public="1">
			<c path="haxe.FastCell.T"/>
			<meta/>
		</elt>
		<new public="1" set="method" line="33">
			<f a="elt:next">
				<c path="haxe.FastCell.T"/>
				<c path="haxe.FastCell"><c path="haxe.FastCell.T"/></c>
				<e path="Void"/>
			</f>
			<meta/>
		</new>
		<meta/>
	</class>
	<class path="haxe.FastList" params="T" file="C:\Motion-Twin\haxe\std/haxe/FastList.hx">
		<iterator public="1" set="method" line="138">
			<f a=""><t path="Iterator"><c path="haxe.FastList.T"/></t></f>
			<meta/>
			<haxe_doc>Returns an iterator on the elements of the list.</haxe_doc>
		</iterator>
		<remove public="1" set="method" line="107">
			<f a="v">
				<c path="haxe.FastList.T"/>
				<e path="Bool"/>
			</f>
			<meta/>
			<haxe_doc>Remove the first element that is [== v] from the list.
		Returns [true] if an element was removed, [false] otherwise.</haxe_doc>
		</remove>
		<first public="1" get="inline" set="null" line="77">
			<f a=""><t path="Null"><c path="haxe.FastList.T"/></t></f>
			<meta/>
			<haxe_doc>Returns the first element of the list, or null
		if the list is empty.</haxe_doc>
		</first>
		<add public="1" get="inline" set="null" line="69">
			<f a="item">
				<c path="haxe.FastList.T"/>
				<e path="Void"/>
			</f>
			<meta/>
			<haxe_doc>Add an element at the head of the list.</haxe_doc>
		</add>
		<head public="1">
			<c path="haxe.FastCell"><c path="haxe.FastList.T"/></c>
			<meta/>
		</head>
		<new public="1" set="method" line="63">
			<f a=""><e path="Void"/></f>
			<meta/>
			<haxe_doc>Creates a new empty list.</haxe_doc>
		</new>
		<haxe_doc>A linked-list of elements. A different class is created for each container used in platforms where it matters</haxe_doc>
		<meta/>
	</class>
	<class path="haxe.Log" params="" file="C:\Motion-Twin\haxe\std/haxe/Log.hx">
		<trace public="1" set="dynamic" line="29" static="1">
			<f a="v:?infos">
				<d/>
				<t path="haxe.PosInfos"/>
				<e path="Void"/>
			</f>
			<meta/>
		</trace>
		<meta/>
	</class>
	<typedef path="haxe.PosInfos" params="" file="C:\Motion-Twin\haxe\std/haxe/PosInfos.hx"><a>
	<methodName><c path="String"/></methodName>
	<lineNumber><c path="Int"/></lineNumber>
	<fileName><c path="String"/></fileName>
	<customParams>
		<c path="Array"><d/></c>
		<meta><m n=":optional"/></meta>
	</customParams>
	<className><c path="String"/></className>
</a></typedef>
	<class path="haxe.Serializer" params="" file="C:\Motion-Twin\haxe\std/haxe/Serializer.hx" extern="1"><meta><m n=":native"><e>Dynamic</e></m></meta></class>
	<typedef path="haxe.TypeResolver" params="" file="C:\Motion-Twin\haxe\std/haxe/Unserializer.hx" module="haxe.Unserializer"><a>
	<resolveEnum set="method"><f a="name">
	<c path="String"/>
	<c path="Enum"><d/></c>
</f></resolveEnum>
	<resolveClass set="method"><f a="name">
	<c path="String"/>
	<c path="Class"><d/></c>
</f></resolveClass>
</a></typedef>
	<class path="haxe.Unserializer" params="" file="C:\Motion-Twin\haxe\std/haxe/Unserializer.hx" extern="1"><meta><m n=":native"><e>Dynamic</e></m></meta></class>
	<class path="haxe.macro.Compiler" params="" file="C:\Motion-Twin\haxe\std/haxe/macro/Compiler.hx" extern="1">
		<haxe_doc>All these methods can be called for compiler configuration macros.</haxe_doc>
		<meta><m n=":native"><e>Dynamic</e></m></meta>
	</class>
	<class path="haxe.macro.Context" params="" file="C:\Motion-Twin\haxe\std/haxe/macro/Context.hx" extern="1">
		<haxe_doc>This is an API that can be used by macros implementations.</haxe_doc>
		<meta><m n=":native"><e>Dynamic</e></m></meta>
	</class>
	<typedef path="haxe.macro.Position" params="" file="C:\Motion-Twin\haxe\std/haxe/macro/Expr.hx" module="haxe.macro.Expr"><a>
	<min><c path="Int"/></min>
	<max><c path="Int"/></max>
	<file><c path="String"/></file>
</a></typedef>
	<enum path="haxe.macro.Constant" params="" file="C:\Motion-Twin\haxe\std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<CType a="s"><c path="String"/></CType>
		<CString a="s"><c path="String"/></CString>
		<CRegexp a="r:opt">
			<c path="String"/>
			<c path="String"/>
		</CRegexp>
		<CInt a="v"><c path="String"/></CInt>
		<CIdent a="s"><c path="String"/></CIdent>
		<CFloat a="f"><c path="String"/></CFloat>
	</enum>
	<enum path="haxe.macro.Binop" params="" file="C:\Motion-Twin\haxe\std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<OpXor/>
		<OpUShr/>
		<OpSub/>
		<OpShr/>
		<OpShl/>
		<OpOr/>
		<OpNotEq/>
		<OpMult/>
		<OpMod/>
		<OpLte/>
		<OpLt/>
		<OpInterval/>
		<OpGte/>
		<OpGt/>
		<OpEq/>
		<OpDiv/>
		<OpBoolOr/>
		<OpBoolAnd/>
		<OpAssignOp a="op"><e path="haxe.macro.Binop"/></OpAssignOp>
		<OpAssign/>
		<OpAnd/>
		<OpAdd/>
	</enum>
	<enum path="haxe.macro.Unop" params="" file="C:\Motion-Twin\haxe\std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<OpNot/>
		<OpNegBits/>
		<OpNeg/>
		<OpIncrement/>
		<OpDecrement/>
	</enum>
	<typedef path="haxe.macro.Expr" params="" file="C:\Motion-Twin\haxe\std/haxe/macro/Expr.hx"><a>
	<pos><t path="haxe.macro.Position"/></pos>
	<expr><e path="haxe.macro.ExprDef"/></expr>
</a></typedef>
	<typedef path="haxe.macro.ExprRequire" params="T" file="C:\Motion-Twin\haxe\std/haxe/macro/Expr.hx" module="haxe.macro.Expr"><t path="haxe.macro.Expr"/></typedef>
	<typedef path="haxe.macro.ExprOf" params="T" file="C:\Motion-Twin\haxe\std/haxe/macro/Expr.hx" module="haxe.macro.Expr"><t path="haxe.macro.Expr"/></typedef>
	<enum path="haxe.macro.ExprDef" params="" file="C:\Motion-Twin\haxe\std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<EWhile a="econd:e:normalWhile">
			<t path="haxe.macro.Expr"/>
			<t path="haxe.macro.Expr"/>
			<e path="Bool"/>
		</EWhile>
		<EVars a="vars"><c path="Array"><a>
	<type><t path="Null"><e path="haxe.macro.ComplexType"/></t></type>
	<name><c path="String"/></name>
	<expr><t path="Null"><t path="haxe.macro.Expr"/></t></expr>
</a></c></EVars>
		<EUntyped a="e"><t path="haxe.macro.Expr"/></EUntyped>
		<EUnop a="op:postFix:e">
			<e path="haxe.macro.Unop"/>
			<e path="Bool"/>
			<t path="haxe.macro.Expr"/>
		</EUnop>
		<EType a="e:field">
			<t path="haxe.macro.Expr"/>
			<c path="String"/>
		</EType>
		<ETry a="e:catches">
			<t path="haxe.macro.Expr"/>
			<c path="Array"><a>
	<type><e path="haxe.macro.ComplexType"/></type>
	<name><c path="String"/></name>
	<expr><t path="haxe.macro.Expr"/></expr>
</a></c>
		</ETry>
		<EThrow a="e"><t path="haxe.macro.Expr"/></EThrow>
		<ETernary a="econd:eif:eelse">
			<t path="haxe.macro.Expr"/>
			<t path="haxe.macro.Expr"/>
			<t path="haxe.macro.Expr"/>
		</ETernary>
		<ESwitch a="e:cases:edef">
			<t path="haxe.macro.Expr"/>
			<c path="Array"><a>
	<values><c path="Array"><t path="haxe.macro.Expr"/></c></values>
	<expr><t path="haxe.macro.Expr"/></expr>
</a></c>
			<t path="Null"><t path="haxe.macro.Expr"/></t>
		</ESwitch>
		<EReturn a="?e"><t path="haxe.macro.Expr"/></EReturn>
		<EParenthesis a="e"><t path="haxe.macro.Expr"/></EParenthesis>
		<EObjectDecl a="fields"><c path="Array"><a>
	<field><c path="String"/></field>
	<expr><t path="haxe.macro.Expr"/></expr>
</a></c></EObjectDecl>
		<ENew a="t:params">
			<t path="haxe.macro.TypePath"/>
			<c path="Array"><t path="haxe.macro.Expr"/></c>
		</ENew>
		<EIn a="e1:e2">
			<t path="haxe.macro.Expr"/>
			<t path="haxe.macro.Expr"/>
		</EIn>
		<EIf a="econd:eif:eelse">
			<t path="haxe.macro.Expr"/>
			<t path="haxe.macro.Expr"/>
			<t path="Null"><t path="haxe.macro.Expr"/></t>
		</EIf>
		<EFunction a="name:f">
			<t path="Null"><c path="String"/></t>
			<t path="haxe.macro.Function"/>
		</EFunction>
		<EFor a="it:expr">
			<t path="haxe.macro.Expr"/>
			<t path="haxe.macro.Expr"/>
		</EFor>
		<EField a="e:field">
			<t path="haxe.macro.Expr"/>
			<c path="String"/>
		</EField>
		<EDisplayNew a="t"><t path="haxe.macro.TypePath"/></EDisplayNew>
		<EDisplay a="e:isCall">
			<t path="haxe.macro.Expr"/>
			<e path="Bool"/>
		</EDisplay>
		<EContinue/>
		<EConst a="c"><e path="haxe.macro.Constant"/></EConst>
		<ECheckType a="e:t">
			<t path="haxe.macro.Expr"/>
			<e path="haxe.macro.ComplexType"/>
		</ECheckType>
		<ECast a="e:t">
			<t path="haxe.macro.Expr"/>
			<t path="Null"><e path="haxe.macro.ComplexType"/></t>
		</ECast>
		<ECall a="e:params">
			<t path="haxe.macro.Expr"/>
			<c path="Array"><t path="haxe.macro.Expr"/></c>
		</ECall>
		<EBreak/>
		<EBlock a="exprs"><c path="Array"><t path="haxe.macro.Expr"/></c></EBlock>
		<EBinop a="op:e1:e2">
			<e path="haxe.macro.Binop"/>
			<t path="haxe.macro.Expr"/>
			<t path="haxe.macro.Expr"/>
		</EBinop>
		<EArrayDecl a="values"><c path="Array"><t path="haxe.macro.Expr"/></c></EArrayDecl>
		<EArray a="e1:e2">
			<t path="haxe.macro.Expr"/>
			<t path="haxe.macro.Expr"/>
		</EArray>
	</enum>
	<enum path="haxe.macro.ComplexType" params="" file="C:\Motion-Twin\haxe\std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<TPath a="p"><t path="haxe.macro.TypePath"/></TPath>
		<TParent a="t"><e path="haxe.macro.ComplexType"/></TParent>
		<TOptional a="t"><e path="haxe.macro.ComplexType"/></TOptional>
		<TFunction a="args:ret">
			<c path="Array"><e path="haxe.macro.ComplexType"/></c>
			<e path="haxe.macro.ComplexType"/>
		</TFunction>
		<TExtend a="p:fields">
			<t path="haxe.macro.TypePath"/>
			<c path="Array"><t path="haxe.macro.Field"/></c>
		</TExtend>
		<TAnonymous a="fields"><c path="Array"><t path="haxe.macro.Field"/></c></TAnonymous>
	</enum>
	<typedef path="haxe.macro.TypePath" params="" file="C:\Motion-Twin\haxe\std/haxe/macro/Expr.hx" module="haxe.macro.Expr"><a>
	<sub>
		<t path="Null"><c path="String"/></t>
		<meta><m n=":optional"/></meta>
	</sub>
	<params><c path="Array"><e path="haxe.macro.TypeParam"/></c></params>
	<pack><c path="Array"><c path="String"/></c></pack>
	<name><c path="String"/></name>
</a></typedef>
	<enum path="haxe.macro.TypeParam" params="" file="C:\Motion-Twin\haxe\std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<TPType a="t"><e path="haxe.macro.ComplexType"/></TPType>
		<TPExpr a="e"><t path="haxe.macro.Expr"/></TPExpr>
	</enum>
	<typedef path="haxe.macro.Function" params="" file="C:\Motion-Twin\haxe\std/haxe/macro/Expr.hx" module="haxe.macro.Expr"><a>
	<ret><t path="Null"><e path="haxe.macro.ComplexType"/></t></ret>
	<params><c path="Array"><a>
	<name><c path="String"/></name>
	<constraints><c path="Array"><e path="haxe.macro.ComplexType"/></c></constraints>
</a></c></params>
	<expr><t path="Null"><t path="haxe.macro.Expr"/></t></expr>
	<args><c path="Array"><t path="haxe.macro.FunctionArg"/></c></args>
</a></typedef>
	<typedef path="haxe.macro.FunctionArg" params="" file="C:\Motion-Twin\haxe\std/haxe/macro/Expr.hx" module="haxe.macro.Expr"><a>
	<value>
		<t path="Null"><t path="haxe.macro.Expr"/></t>
		<meta><m n=":optional"/></meta>
	</value>
	<type><t path="Null"><e path="haxe.macro.ComplexType"/></t></type>
	<opt><e path="Bool"/></opt>
	<name><c path="String"/></name>
</a></typedef>
	<typedef path="haxe.macro.Metadata" params="" file="C:\Motion-Twin\haxe\std/haxe/macro/Expr.hx" module="haxe.macro.Expr"><c path="Array"><a>
	<pos><t path="haxe.macro.Position"/></pos>
	<params><c path="Array"><t path="haxe.macro.Expr"/></c></params>
	<name><c path="String"/></name>
</a></c></typedef>
	<typedef path="haxe.macro.Field" params="" file="C:\Motion-Twin\haxe\std/haxe/macro/Expr.hx" module="haxe.macro.Expr"><a>
	<pos><t path="haxe.macro.Position"/></pos>
	<name><c path="String"/></name>
	<meta>
		<t path="haxe.macro.Metadata"/>
		<meta><m n=":optional"/></meta>
	</meta>
	<kind><e path="haxe.macro.FieldType"/></kind>
	<doc>
		<t path="Null"><c path="String"/></t>
		<meta><m n=":optional"/></meta>
	</doc>
	<access>
		<c path="Array"><e path="haxe.macro.Access"/></c>
		<meta><m n=":optional"/></meta>
	</access>
</a></typedef>
	<enum path="haxe.macro.Access" params="" file="C:\Motion-Twin\haxe\std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<AStatic/>
		<APublic/>
		<APrivate/>
		<AOverride/>
		<AInline/>
		<ADynamic/>
	</enum>
	<enum path="haxe.macro.FieldType" params="" file="C:\Motion-Twin\haxe\std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<FVar a="t:?e">
			<t path="Null"><e path="haxe.macro.ComplexType"/></t>
			<t path="haxe.macro.Expr"/>
		</FVar>
		<FProp a="get:set:t:?e">
			<c path="String"/>
			<c path="String"/>
			<e path="haxe.macro.ComplexType"/>
			<t path="haxe.macro.Expr"/>
		</FProp>
		<FFun a="f"><t path="haxe.macro.Function"/></FFun>
	</enum>
	<typedef path="haxe.macro.TypeDefinition" params="" file="C:\Motion-Twin\haxe\std/haxe/macro/Expr.hx" module="haxe.macro.Expr"><a>
	<pos><t path="haxe.macro.Position"/></pos>
	<params><c path="Array"><a>
	<name><c path="String"/></name>
	<constraints><c path="Array"><e path="haxe.macro.ComplexType"/></c></constraints>
</a></c></params>
	<pack><c path="Array"><c path="String"/></c></pack>
	<name><c path="String"/></name>
	<meta><t path="haxe.macro.Metadata"/></meta>
	<kind><e path="haxe.macro.TypeDefKind"/></kind>
	<isExtern><e path="Bool"/></isExtern>
	<fields><c path="Array"><t path="haxe.macro.Field"/></c></fields>
</a></typedef>
	<enum path="haxe.macro.TypeDefKind" params="" file="C:\Motion-Twin\haxe\std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<TDStructure/>
		<TDEnum/>
		<TDClass a="?extend:?implement:?isInterface">
			<t path="haxe.macro.TypePath"/>
			<c path="Array"><t path="haxe.macro.TypePath"/></c>
			<e path="Bool"/>
		</TDClass>
	</enum>
	<class path="haxe.macro.Error" params="" file="C:\Motion-Twin\haxe\std/haxe/macro/Expr.hx" module="haxe.macro.Expr" extern="1">
		<haxe_doc>This error can be used to handle or produce compilation errors in macros.</haxe_doc>
		<meta><m n=":native"><e>Dynamic</e></m></meta>
	</class>
	<typedef path="haxe.macro.Ref" params="T" file="C:\Motion-Twin\haxe\std/haxe/macro/Type.hx" module="haxe.macro.Type"><a>
	<toString set="method"><f a=""><c path="String"/></f></toString>
	<get set="method"><f a=""><c path="haxe.macro.Ref.T"/></f></get>
</a></typedef>
	<enum path="haxe.macro.Type" params="" file="C:\Motion-Twin\haxe\std/haxe/macro/Type.hx">
		<TType a="t:params">
			<t path="haxe.macro.Ref"><t path="haxe.macro.DefType"/></t>
			<c path="Array"><e path="haxe.macro.Type"/></c>
		</TType>
		<TMono a="t"><t path="haxe.macro.Ref"><t path="Null"><e path="haxe.macro.Type"/></t></t></TMono>
		<TLazy a="f"><f a=""><e path="haxe.macro.Type"/></f></TLazy>
		<TInst a="t:params">
			<t path="haxe.macro.Ref"><t path="haxe.macro.ClassType"/></t>
			<c path="Array"><e path="haxe.macro.Type"/></c>
		</TInst>
		<TFun a="args:ret">
			<c path="Array"><a>
	<t><e path="haxe.macro.Type"/></t>
	<opt><e path="Bool"/></opt>
	<name><c path="String"/></name>
</a></c>
			<e path="haxe.macro.Type"/>
		</TFun>
		<TEnum a="t:params">
			<t path="haxe.macro.Ref"><t path="haxe.macro.EnumType"/></t>
			<c path="Array"><e path="haxe.macro.Type"/></c>
		</TEnum>
		<TDynamic a="t"><t path="Null"><e path="haxe.macro.Type"/></t></TDynamic>
		<TAnonymous a="a"><t path="haxe.macro.Ref"><t path="haxe.macro.AnonType"/></t></TAnonymous>
	</enum>
	<typedef path="haxe.macro.AnonType" params="" file="C:\Motion-Twin\haxe\std/haxe/macro/Type.hx" module="haxe.macro.Type"><a><fields><c path="Array"><t path="haxe.macro.ClassField"/></c></fields></a></typedef>
	<typedef path="haxe.macro.BaseType" params="" file="C:\Motion-Twin\haxe\std/haxe/macro/Type.hx" module="haxe.macro.Type"><a>
	<pos><t path="haxe.macro.Position"/></pos>
	<params><c path="Array"><a>
	<t><e path="haxe.macro.Type"/></t>
	<name><c path="String"/></name>
</a></c></params>
	<pack><c path="Array"><c path="String"/></c></pack>
	<name><c path="String"/></name>
	<module><c path="String"/></module>
	<meta><t path="haxe.macro.MetaAccess"/></meta>
	<isPrivate><e path="Bool"/></isPrivate>
	<isExtern><e path="Bool"/></isExtern>
	<exclude set="method"><f a=""><e path="Void"/></f></exclude>
	<doc><t path="Null"><c path="String"/></t></doc>
</a></typedef>
	<typedef path="haxe.macro.ClassField" params="" file="C:\Motion-Twin\haxe\std/haxe/macro/Type.hx" module="haxe.macro.Type"><a>
	<type><e path="haxe.macro.Type"/></type>
	<pos><t path="haxe.macro.Position"/></pos>
	<params><c path="Array"><a>
	<t><e path="haxe.macro.Type"/></t>
	<name><c path="String"/></name>
</a></c></params>
	<name><c path="String"/></name>
	<meta><t path="haxe.macro.MetaAccess"/></meta>
	<kind><e path="haxe.macro.FieldKind"/></kind>
	<isPublic><e path="Bool"/></isPublic>
	<expr set="method"><f a=""><t path="Null"><e path="haxe.macro.TypedExpr"/></t></f></expr>
	<doc><t path="Null"><c path="String"/></t></doc>
</a></typedef>
	<enum path="haxe.macro.ClassKind" params="" file="C:\Motion-Twin\haxe\std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<KTypeParameter/>
		<KNormal/>
		<KMacroType/>
		<KGenericInstance a="cl:params">
			<t path="haxe.macro.Ref"><t path="haxe.macro.ClassType"/></t>
			<c path="Array"><e path="haxe.macro.Type"/></c>
		</KGenericInstance>
		<KGeneric/>
		<KExtension a="cl:params">
			<t path="haxe.macro.Ref"><t path="haxe.macro.ClassType"/></t>
			<c path="Array"><e path="haxe.macro.Type"/></c>
		</KExtension>
		<KExpr a="expr"><t path="haxe.macro.Expr"/></KExpr>
	</enum>
	<typedef path="haxe.macro.ClassType" params="" file="C:\Motion-Twin\haxe\std/haxe/macro/Type.hx" module="haxe.macro.Type"><a>
	<superClass><t path="Null"><a>
	<t><t path="haxe.macro.Ref"><t path="haxe.macro.ClassType"/></t></t>
	<params><c path="Array"><e path="haxe.macro.Type"/></c></params>
</a></t></superClass>
	<statics><t path="haxe.macro.Ref"><c path="Array"><t path="haxe.macro.ClassField"/></c></t></statics>
	<pos><t path="haxe.macro.Position"/></pos>
	<params><c path="Array"><a>
	<t><e path="haxe.macro.Type"/></t>
	<name><c path="String"/></name>
</a></c></params>
	<pack><c path="Array"><c path="String"/></c></pack>
	<name><c path="String"/></name>
	<module><c path="String"/></module>
	<meta><t path="haxe.macro.MetaAccess"/></meta>
	<kind><e path="haxe.macro.ClassKind"/></kind>
	<isPrivate><e path="Bool"/></isPrivate>
	<isInterface><e path="Bool"/></isInterface>
	<isExtern><e path="Bool"/></isExtern>
	<interfaces><c path="Array"><a>
	<t><t path="haxe.macro.Ref"><t path="haxe.macro.ClassType"/></t></t>
	<params><c path="Array"><e path="haxe.macro.Type"/></c></params>
</a></c></interfaces>
	<init><t path="Null"><e path="haxe.macro.TypedExpr"/></t></init>
	<fields><t path="haxe.macro.Ref"><c path="Array"><t path="haxe.macro.ClassField"/></c></t></fields>
	<exclude set="method"><f a=""><e path="Void"/></f></exclude>
	<doc><t path="Null"><c path="String"/></t></doc>
	<constructor><t path="Null"><t path="haxe.macro.Ref"><t path="haxe.macro.ClassField"/></t></t></constructor>
</a></typedef>
	<typedef path="haxe.macro.EnumField" params="" file="C:\Motion-Twin\haxe\std/haxe/macro/Type.hx" module="haxe.macro.Type"><a>
	<type><e path="haxe.macro.Type"/></type>
	<pos><t path="haxe.macro.Position"/></pos>
	<name><c path="String"/></name>
	<meta><t path="haxe.macro.MetaAccess"/></meta>
	<index><c path="Int"/></index>
	<doc><t path="Null"><c path="String"/></t></doc>
</a></typedef>
	<typedef path="haxe.macro.EnumType" params="" file="C:\Motion-Twin\haxe\std/haxe/macro/Type.hx" module="haxe.macro.Type"><a>
	<pos><t path="haxe.macro.Position"/></pos>
	<params><c path="Array"><a>
	<t><e path="haxe.macro.Type"/></t>
	<name><c path="String"/></name>
</a></c></params>
	<pack><c path="Array"><c path="String"/></c></pack>
	<names><c path="Array"><c path="String"/></c></names>
	<name><c path="String"/></name>
	<module><c path="String"/></module>
	<meta><t path="haxe.macro.MetaAccess"/></meta>
	<isPrivate><e path="Bool"/></isPrivate>
	<isExtern><e path="Bool"/></isExtern>
	<exclude set="method"><f a=""><e path="Void"/></f></exclude>
	<doc><t path="Null"><c path="String"/></t></doc>
	<constructs><c path="Hash"><t path="haxe.macro.EnumField"/></c></constructs>
</a></typedef>
	<typedef path="haxe.macro.DefType" params="" file="C:\Motion-Twin\haxe\std/haxe/macro/Type.hx" module="haxe.macro.Type"><a>
	<type><e path="haxe.macro.Type"/></type>
	<pos><t path="haxe.macro.Position"/></pos>
	<params><c path="Array"><a>
	<t><e path="haxe.macro.Type"/></t>
	<name><c path="String"/></name>
</a></c></params>
	<pack><c path="Array"><c path="String"/></c></pack>
	<name><c path="String"/></name>
	<module><c path="String"/></module>
	<meta><t path="haxe.macro.MetaAccess"/></meta>
	<isPrivate><e path="Bool"/></isPrivate>
	<isExtern><e path="Bool"/></isExtern>
	<exclude set="method"><f a=""><e path="Void"/></f></exclude>
	<doc><t path="Null"><c path="String"/></t></doc>
</a></typedef>
	<typedef path="haxe.macro.MetaAccess" params="" file="C:\Motion-Twin\haxe\std/haxe/macro/Type.hx" module="haxe.macro.Type"><a>
	<remove set="method"><f a="name">
	<c path="String"/>
	<e path="Void"/>
</f></remove>
	<has set="method"><f a="name">
	<c path="String"/>
	<e path="Bool"/>
</f></has>
	<get set="method"><f a=""><t path="haxe.macro.Metadata"/></f></get>
	<add set="method"><f a="name:params:pos">
	<c path="String"/>
	<c path="Array"><t path="haxe.macro.Expr"/></c>
	<t path="haxe.macro.Position"/>
	<e path="Void"/>
</f></add>
</a></typedef>
	<enum path="haxe.macro.FieldKind" params="" file="C:\Motion-Twin\haxe\std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<FVar a="read:write">
			<e path="haxe.macro.VarAccess"/>
			<e path="haxe.macro.VarAccess"/>
		</FVar>
		<FMethod a="k"><e path="haxe.macro.MethodKind"/></FMethod>
	</enum>
	<enum path="haxe.macro.VarAccess" params="" file="C:\Motion-Twin\haxe\std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<AccResolve/>
		<AccRequire a="r"><c path="String"/></AccRequire>
		<AccNormal/>
		<AccNo/>
		<AccNever/>
		<AccInline/>
		<AccCall a="m"><c path="String"/></AccCall>
	</enum>
	<enum path="haxe.macro.MethodKind" params="" file="C:\Motion-Twin\haxe\std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<MethNormal/>
		<MethMacro/>
		<MethInline/>
		<MethDynamic/>
	</enum>
	<enum path="haxe.macro.TypedExpr" params="" file="C:\Motion-Twin\haxe\std/haxe/macro/Type.hx" module="haxe.macro.Type"/>
	<class path="js.Boot" params="" file="C:\Motion-Twin\haxe\std/js/Boot.hx">
		<__unhtml set="method" line="29" static="1">
			<f a="s">
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta/>
		</__unhtml>
		<__trace set="method" line="33" static="1">
			<f a="v:i">
				<a>
					<toString set="null"><f a=""><c path="String"/></f></toString>
					<length set="null"><c path="Int"/></length>
					<hasOwnProperty set="null"><f a="">
	<c path="String"/>
	<e path="Bool"/>
</f></hasOwnProperty>
					<__enum__ set="null"><e path="Bool"/></__enum__>
				</a>
				<t path="haxe.PosInfos"/>
				<e path="Void"/>
			</f>
			<meta/>
		</__trace>
		<__string_rec set="method" line="75" static="1">
			<f a="o:s">
				<a>
					<toString set="null"><f a=""><c path="String"/></f></toString>
					<length set="null"><c path="Int"/></length>
					<hasOwnProperty set="null"><f a="">
	<c path="String"/>
	<e path="Bool"/>
</f></hasOwnProperty>
					<__enum__ set="null"><e path="Bool"/></__enum__>
				</a>
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta><m n=":feature"><e>has_enum</e></m></meta>
		</__string_rec>
		<__interfLoop set="method" line="147" static="1">
			<f a="cc:cl">
				<d/>
				<d/>
				<e path="Bool"/>
			</f>
			<meta/>
		</__interfLoop>
		<__instanceof set="method" line="162" static="1">
			<f a="o:cl">
				<d/>
				<t path="#Array"/>
				<e path="Bool"/>
			</f>
			<meta><m n=":feature"><e>typed_catch</e></m></meta>
		</__instanceof>
		<__cast set="method" line="198" static="1">
			<f a="o:t">
				<d/>
				<d/>
				<unknown/>
			</f>
			<meta><m n=":feature"><e>typed_cast</e></m></meta>
		</__cast>
		<meta/>
	</class>
	<typedef path="msignal.AnySignal" params="" file="C:\Motion-Twin\haxe\lib\msignal/1,1,2/msignal/Signal.hx" module="msignal.Signal"><c path="msignal.Signal">
	<d/>
	<d/>
</c></typedef>
	<class path="msignal.Signal" params="TSlot:TListener" file="C:\Motion-Twin\haxe\lib\msignal/1,1,2/msignal/Signal.hx">
		<get_numListeners set="method" line="167">
			<f a=""><c path="Int"/></f>
			<meta/>
		</get_numListeners>
		<createSlot set="method" line="162">
			<f a="listener:?once:?priority">
				<c path="msignal.Signal.TListener"/>
				<e path="Bool"/>
				<c path="Int"/>
				<c path="msignal.Signal.TSlot"/>
			</f>
			<meta><m n="IgnoreCover"/></meta>
		</createSlot>
		<registrationPossible set="method" line="144">
			<f a="listener:once">
				<c path="msignal.Signal.TListener"/>
				<e path="Bool"/>
				<e path="Bool"/>
			</f>
			<meta/>
		</registrationPossible>
		<registerListener set="method" line="128">
			<f a="listener:?once:?priority">
				<c path="msignal.Signal.TListener"/>
				<e path="Bool"/>
				<c path="Int"/>
				<c path="msignal.Signal.TSlot"/>
			</f>
			<meta/>
		</registerListener>
		<remove public="1" set="method" line="111">
			<f a="listener">
				<c path="msignal.Signal.TListener"/>
				<c path="msignal.Signal.TSlot"/>
			</f>
			<meta/>
			<haxe_doc>Unsubscribes a listener from the signal.
	
	@param listener The listener to remove
	@return The removed listener slot</haxe_doc>
		</remove>
		<add public="1" set="method" line="59">
			<f a="listener">
				<c path="msignal.Signal.TListener"/>
				<c path="msignal.Signal.TSlot"/>
			</f>
			<meta/>
			<haxe_doc>Subscribes a listener for the signal.
	
	@param listener A function matching the signature of TListener
	@return The added listener slot</haxe_doc>
		</add>
		<priorityBased>
			<e path="Bool"/>
			<meta/>
		</priorityBased>
		<slots>
			<c path="msignal.SlotList">
				<c path="msignal.Signal.TSlot"/>
				<c path="msignal.Signal.TListener"/>
			</c>
			<meta/>
		</slots>
		<valueClasses public="1">
			<c path="Array"><d/></c>
			<meta/>
		</valueClasses>
		<new set="method" line="45">
			<f a="?valueClasses">
				<c path="Array"><d/></c>
				<e path="Void"/>
			</f>
			<meta/>
		</new>
		<haxe_doc>A Signal manages a list of listeners, which are executed when the signal is 
dispatched.</haxe_doc>
		<meta/>
	</class>
	<class path="msignal.Signal0" params="" file="C:\Motion-Twin\haxe\lib\msignal/1,1,2/msignal/Signal.hx" module="msignal.Signal">
		<extends path="msignal.Signal">
			<c path="msignal.Slot0"/>
			<f a=""><e path="Void"/></f>
		</extends>
		<createSlot set="method" line="197" override="1">
			<f a="listener:?once:?priority">
				<f a=""><e path="Void"/></f>
				<e path="Bool"/>
				<c path="Int"/>
				<c path="msignal.Slot0"/>
			</f>
			<meta/>
		</createSlot>
		<haxe_doc>Signal that executes listeners with no arguments.</haxe_doc>
	</class>
	<class path="msignal.Signal1" params="TValue" file="C:\Motion-Twin\haxe\lib\msignal/1,1,2/msignal/Signal.hx" module="msignal.Signal">
		<extends path="msignal.Signal">
			<c path="msignal.Slot1"><c path="msignal.Signal1.TValue"/></c>
			<f a="">
				<c path="msignal.Signal1.TValue"/>
				<e path="Void"/>
			</f>
		</extends>
		<createSlot set="method" line="227" override="1">
			<f a="listener:?once:?priority">
				<f a="">
					<c path="msignal.Signal1.TValue"/>
					<e path="Void"/>
				</f>
				<e path="Bool"/>
				<c path="Int"/>
				<c path="msignal.Slot1"><c path="msignal.Signal1.TValue"/></c>
			</f>
			<meta/>
		</createSlot>
		<dispatch public="1" set="method" line="216">
			<f a="value">
				<c path="msignal.Signal1.TValue"/>
				<e path="Void"/>
			</f>
			<meta/>
			<haxe_doc>Executes the signals listeners with one arguement.</haxe_doc>
		</dispatch>
		<new public="1" set="method" line="208">
			<f a="?type">
				<d/>
				<e path="Void"/>
			</f>
			<meta/>
		</new>
		<haxe_doc>Signal that executes listeners with one arguments.</haxe_doc>
		<meta/>
	</class>
	<class path="msignal.Signal2" params="TValue1:TValue2" file="C:\Motion-Twin\haxe\lib\msignal/1,1,2/msignal/Signal.hx" module="msignal.Signal">
		<extends path="msignal.Signal">
			<c path="msignal.Slot2">
				<c path="msignal.Signal2.TValue1"/>
				<c path="msignal.Signal2.TValue2"/>
			</c>
			<f a=":">
				<c path="msignal.Signal2.TValue1"/>
				<c path="msignal.Signal2.TValue2"/>
				<e path="Void"/>
			</f>
		</extends>
		<createSlot set="method" line="257" override="1">
			<f a="listener:?once:?priority">
				<f a=":">
					<c path="msignal.Signal2.TValue1"/>
					<c path="msignal.Signal2.TValue2"/>
					<e path="Void"/>
				</f>
				<e path="Bool"/>
				<c path="Int"/>
				<c path="msignal.Slot2">
					<c path="msignal.Signal2.TValue1"/>
					<c path="msignal.Signal2.TValue2"/>
				</c>
			</f>
			<meta/>
		</createSlot>
		<haxe_doc>Signal that executes listeners with two arguments.</haxe_doc>
	</class>
	<typedef path="msignal.AnySlot" params="" file="C:\Motion-Twin\haxe\lib\msignal/1,1,2/msignal/Slot.hx" module="msignal.Slot"><c path="msignal.Slot">
	<d/>
	<d/>
</c></typedef>
	<class path="msignal.Slot" params="TSignal:TListener" file="C:\Motion-Twin\haxe\lib\msignal/1,1,2/msignal/Slot.hx">
		<set_listener set="method" line="91">
			<f a="value">
				<c path="msignal.Slot.TListener"/>
				<c path="msignal.Slot.TListener"/>
			</f>
			<meta/>
		</set_listener>
		<remove public="1" set="method" line="76">
			<f a=""><e path="Void"/></f>
			<meta/>
			<haxe_doc>Removes the slot from its signal.</haxe_doc>
		</remove>
		<signal>
			<c path="msignal.Slot.TSignal"/>
			<meta/>
		</signal>
		<enabled public="1">
			<e path="Bool"/>
			<meta/>
			<haxe_doc>Whether the listener is called on execution. Defaults to true.</haxe_doc>
		</enabled>
		<priority public="1" set="null">
			<c path="Int"/>
			<meta/>
			<haxe_doc>The priority of this slot should be given in the execution order.
	An Signal will call higher numbers before lower ones.
	Defaults to 0.</haxe_doc>
		</priority>
		<once public="1" set="null">
			<e path="Bool"/>
			<meta/>
			<haxe_doc>Whether this slot is automatically removed after it has been used once.</haxe_doc>
		</once>
		<listener public="1" set="set_listener">
			<c path="msignal.Slot.TListener"/>
			<meta/>
			<haxe_doc>The listener associated with this slot.
	Note: for hxcpp 2.10 this requires a getter method to compile</haxe_doc>
		</listener>
		<new set="method" line="64">
			<f a="signal:listener:?once:?priority">
				<c path="msignal.Slot.TSignal"/>
				<c path="msignal.Slot.TListener"/>
				<e path="Bool"/>
				<c path="Int"/>
				<e path="Void"/>
			</f>
			<meta/>
		</new>
		<haxe_doc>Defines the basic properties of a listener associated with a Signal.</haxe_doc>
		<meta/>
	</class>
	<class path="msignal.Slot0" params="" file="C:\Motion-Twin\haxe\lib\msignal/1,1,2/msignal/Slot.hx" module="msignal.Slot">
		<extends path="msignal.Slot">
			<c path="msignal.Signal0"/>
			<f a=""><e path="Void"/></f>
		</extends>
		<new public="1" set="method" line="103">
			<f a="signal:listener:?once:?priority">
				<c path="msignal.Signal0"/>
				<f a=""><e path="Void"/></f>
				<e path="Bool"/>
				<c path="Int"/>
				<e path="Void"/>
			</f>
			<meta/>
		</new>
		<haxe_doc>A slot that executes a listener with no arguments.</haxe_doc>
		<meta/>
	</class>
	<class path="msignal.Slot1" params="TValue" file="C:\Motion-Twin\haxe\lib\msignal/1,1,2/msignal/Slot.hx" module="msignal.Slot">
		<extends path="msignal.Slot">
			<c path="msignal.Signal1"><c path="msignal.Slot1.TValue"/></c>
			<f a="">
				<c path="msignal.Slot1.TValue"/>
				<e path="Void"/>
			</f>
		</extends>
		<execute public="1" set="method" line="138">
			<f a="value1">
				<c path="msignal.Slot1.TValue"/>
				<e path="Void"/>
			</f>
			<meta/>
			<haxe_doc><![CDATA[Executes a listener with one argument.
	If <code>param</code> is not null, it overrides the value provided.]]></haxe_doc>
		</execute>
		<param public="1">
			<d/>
			<meta/>
			<haxe_doc>Allows the slot to inject the argument to dispatch.</haxe_doc>
		</param>
		<new public="1" set="method" line="129">
			<f a="signal:listener:?once:?priority">
				<c path="msignal.Signal1"><c path="msignal.Slot1.TValue"/></c>
				<f a="">
					<c path="msignal.Slot1.TValue"/>
					<e path="Void"/>
				</f>
				<e path="Bool"/>
				<c path="Int"/>
				<e path="Void"/>
			</f>
			<meta/>
		</new>
		<haxe_doc>A slot that executes a listener with one argument.</haxe_doc>
		<meta/>
	</class>
	<class path="msignal.Slot2" params="TValue1:TValue2" file="C:\Motion-Twin\haxe\lib\msignal/1,1,2/msignal/Slot.hx" module="msignal.Slot">
		<extends path="msignal.Slot">
			<c path="msignal.Signal2">
				<c path="msignal.Slot2.TValue1"/>
				<c path="msignal.Slot2.TValue2"/>
			</c>
			<f a=":">
				<c path="msignal.Slot2.TValue1"/>
				<c path="msignal.Slot2.TValue2"/>
				<e path="Void"/>
			</f>
		</extends>
		<new public="1" set="method" line="162">
			<f a="signal:listener:?once:?priority">
				<c path="msignal.Signal2">
					<c path="msignal.Slot2.TValue1"/>
					<c path="msignal.Slot2.TValue2"/>
				</c>
				<f a=":">
					<c path="msignal.Slot2.TValue1"/>
					<c path="msignal.Slot2.TValue2"/>
					<e path="Void"/>
				</f>
				<e path="Bool"/>
				<c path="Int"/>
				<e path="Void"/>
			</f>
			<meta/>
		</new>
		<haxe_doc>A slot that executes a listener with two arguments.</haxe_doc>
		<meta/>
	</class>
	<class path="msignal.SlotList" params="TSlot:TListener" file="C:\Motion-Twin\haxe\lib\msignal/1,1,2/msignal/SlotList.hx">
		<NIL public="1" static="1">
			<c path="msignal.SlotList">
				<d/>
				<d/>
			</c>
			<meta/>
			<haxe_doc>Represents an empty list. Used as the list terminator.</haxe_doc>
		</NIL>
		<find public="1" set="method" line="240">
			<f a="listener">
				<c path="msignal.SlotList.TListener"/>
				<c path="msignal.SlotList.TSlot"/>
			</f>
			<meta/>
			<haxe_doc>Retrieves the Slot associated with a supplied listener within the SlotList.
	@param   listener The Function being searched for
	@return  The ISlot in this list associated with the listener parameter through the ISlot.listener property.
			 Returns null if no such ISlot instance exists or the list is empty.</haxe_doc>
		</find>
		<filterNot public="1" set="method" line="189">
			<f a="listener">
				<c path="msignal.SlotList.TListener"/>
				<c path="msignal.SlotList">
					<c path="msignal.SlotList.TSlot"/>
					<c path="msignal.SlotList.TListener"/>
				</c>
			</f>
			<meta/>
			<haxe_doc>Returns the slots in this list that do not contain the supplied listener.
	Note: assumes the listener is not repeated within the list.
	@param	listener The function to remove.
	@return A list consisting of all elements of this list that do not have listener.</haxe_doc>
		</filterNot>
		<insertWithPriority public="1" set="method" line="152">
			<f a="slot">
				<c path="msignal.SlotList.TSlot"/>
				<c path="msignal.SlotList">
					<c path="msignal.SlotList.TSlot"/>
					<c path="msignal.SlotList.TListener"/>
				</c>
			</f>
			<meta/>
		</insertWithPriority>
		<prepend public="1" set="method" line="105">
			<f a="slot">
				<c path="msignal.SlotList.TSlot"/>
				<c path="msignal.SlotList">
					<c path="msignal.SlotList.TSlot"/>
					<c path="msignal.SlotList.TListener"/>
				</c>
			</f>
			<meta/>
			<haxe_doc>Prepends a slot to this list.
	@param	slot The item to be prepended.
	@return	A list consisting of slot followed by all elements of this list.</haxe_doc>
		</prepend>
		<get_length set="method" line="79">
			<f a=""><c path="Int"/></f>
			<meta/>
		</get_length>
		<length public="1" get="get_length" set="null">
			<c path="Int"/>
			<meta/>
			<haxe_doc>The number of slots in the list.</haxe_doc>
		</length>
		<nonEmpty public="1">
			<e path="Bool"/>
			<meta/>
		</nonEmpty>
		<tail public="1">
			<c path="msignal.SlotList">
				<c path="msignal.SlotList.TSlot"/>
				<c path="msignal.SlotList.TListener"/>
			</c>
			<meta/>
		</tail>
		<head public="1">
			<c path="msignal.SlotList.TSlot"/>
			<meta/>
		</head>
		<new public="1" set="method" line="49">
			<f a="head:?tail">
				<c path="msignal.SlotList.TSlot"/>
				<c path="msignal.SlotList">
					<c path="msignal.SlotList.TSlot"/>
					<c path="msignal.SlotList.TListener"/>
				</c>
				<e path="Void"/>
			</f>
			<meta/>
			<haxe_doc><![CDATA[Creates and returns a new SlotList object.
	 *
	<p>A user never has to create a SlotList manually. 
	Use the <code>NIL</code> element to represent an empty list. 
	<code>NIL.prepend(value)</code> would create a list containing <code>value</code></p>.
	 *
	@param head The first slot in the list.
	@param tail A list containing all slots except head.]]></haxe_doc>
		</new>
		<meta/>
	</class>
	<class path="org.tbyrne.collections.UniqueList" params="T" file="../src/org/tbyrne/collections/UniqueList.hx">
		<clear public="1" set="method" line="50">
			<f a=""><e path="Void"/></f>
			<meta/>
		</clear>
		<remove public="1" set="method" line="42">
			<f a="value">
				<c path="org.tbyrne.collections.UniqueList.T"/>
				<e path="Bool"/>
			</f>
			<meta/>
		</remove>
		<containsItem public="1" set="method" line="39">
			<f a="value">
				<c path="org.tbyrne.collections.UniqueList.T"/>
				<e path="Bool"/>
			</f>
			<meta/>
		</containsItem>
		<add public="1" set="method" line="31">
			<f a="value">
				<c path="org.tbyrne.collections.UniqueList.T"/>
				<e path="Bool"/>
			</f>
			<meta/>
		</add>
		<first public="1" set="method" line="27">
			<f a=""><t path="Null"><c path="org.tbyrne.collections.UniqueList.T"/></t></f>
			<meta/>
		</first>
		<_length>
			<c path="Int"/>
			<meta/>
		</_length>
		<list>
			<c path="haxe.FastList"><c path="org.tbyrne.collections.UniqueList.T"/></c>
			<meta/>
		</list>
		<get_length set="method" line="18">
			<f a=""><c path="Int"/></f>
			<meta/>
		</get_length>
		<length public="1" get="get_length" set="null">
			<c path="Int"/>
			<meta/>
		</length>
		<iterator public="1" set="method" line="14">
			<f a=""><t path="Iterator"><c path="org.tbyrne.collections.UniqueList.T"/></t></f>
			<meta/>
		</iterator>
		<new public="1" set="method" line="6">
			<f a="?list">
				<t path="Iterable"><c path="org.tbyrne.collections.UniqueList.T"/></t>
				<e path="Void"/>
			</f>
			<meta/>
		</new>
		<meta/>
	</class>
	<class path="org.tbyrne.logging.LogMsg" params="" file="../src/org/tbyrne/logging/LogMsg.hx">
		<title public="1">
			<c path="String"/>
			<meta/>
		</title>
		<types public="1">
			<c path="Array"><c path="String"/></c>
			<meta/>
		</types>
		<message public="1">
			<c path="String"/>
			<meta/>
		</message>
		<id public="1">
			<c path="String"/>
			<meta/>
		</id>
		<new public="1" set="method" line="15">
			<f a="?message:?types:?title:?id">
				<c path="String"/>
				<c path="Array"><c path="String"/></c>
				<c path="String"/>
				<c path="String"/>
				<e path="Void"/>
			</f>
			<meta/>
		</new>
		<haxe_doc>* ...
 * @author Tom Byrne</haxe_doc>
		<meta/>
	</class>
	<class path="org.tbyrne.logging.LogType" params="" file="../src/org/tbyrne/logging/LogMsg.hx" module="org.tbyrne.logging.LogMsg">
		<devInfo public="1" static="1">
			<c path="String"/>
			<meta/>
		</devInfo>
		<devWarning public="1" static="1">
			<c path="String"/>
			<meta/>
		</devWarning>
		<devError public="1" static="1">
			<c path="String"/>
			<meta/>
		</devError>
		<userInfo public="1" static="1">
			<c path="String"/>
			<meta/>
		</userInfo>
		<userWarning public="1" static="1">
			<c path="String"/>
			<meta/>
		</userWarning>
		<userError public="1" static="1">
			<c path="String"/>
			<meta/>
		</userError>
		<performanceWarning public="1" static="1">
			<c path="String"/>
			<meta/>
		</performanceWarning>
		<deprecationWarning public="1" static="1">
			<c path="String"/>
			<meta/>
		</deprecationWarning>
		<externalError public="1" static="1">
			<c path="String"/>
			<meta/>
		</externalError>
		<meta/>
	</class>
</haxe>