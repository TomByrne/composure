<haxe>
	<class path="Array" params="T" file="C:\Motion-Twin\haxe\std/Array.hx" extern="1">
		<iterator public="1" set="method">
			<f a=""><t path="Iterator"><c path="Array.T"/></t></f>
			<haxe_doc>Returns an iterator of the Array values.</haxe_doc>
		</iterator>
		<copy public="1" set="method">
			<f a=""><c path="Array"><c path="Array.T"/></c></f>
			<haxe_doc>Returns a copy of the Array. The values are not
		copied, only the Array structure.</haxe_doc>
		</copy>
		<remove public="1" set="method">
			<f a="x">
				<c path="Array.T"/>
				<e path="Bool"/>
			</f>
			<haxe_doc>Removes the first occurence of [x].
		Returns false if [x] was not present.
		Elements are compared by using standard equality.</haxe_doc>
		</remove>
		<insert public="1" set="method">
			<f a="pos:x">
				<c path="Int"/>
				<c path="Array.T"/>
				<e path="Void"/>
			</f>
			<haxe_doc>Inserts the element [x] at the position [pos].
		All elements after [pos] are moved one index ahead.</haxe_doc>
		</insert>
		<unshift public="1" set="method">
			<f a="x">
				<c path="Array.T"/>
				<e path="Void"/>
			</f>
			<haxe_doc>Adds the element [x] at the start of the array.</haxe_doc>
		</unshift>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a displayable representation of the Array content.</haxe_doc>
		</toString>
		<splice public="1" set="method">
			<f a="pos:len">
				<c path="Int"/>
				<c path="Int"/>
				<c path="Array"><c path="Array.T"/></c>
			</f>
			<haxe_doc>Removes [len] elements starting from [pos] an returns them.</haxe_doc>
		</splice>
		<sort public="1" set="method">
			<f a="f">
				<f a=":">
					<c path="Array.T"/>
					<c path="Array.T"/>
					<c path="Int"/>
				</f>
				<e path="Void"/>
			</f>
			<haxe_doc><![CDATA[Sort the Array according to the comparison function [f].
		[f(x,y)] should return [0] if [x == y], [>0] if [x > y]
		and [<0] if [x < y].]]></haxe_doc>
		</sort>
		<slice public="1" set="method">
			<f a="pos:?end">
				<c path="Int"/>
				<c path="Int"/>
				<c path="Array"><c path="Array.T"/></c>
			</f>
			<haxe_doc>Copies the range of the array starting at [pos] up to,
		but not including, [end]. Both [pos] and [end] can be
		negative to count from the end: -1 is the last item in
		the array.</haxe_doc>
		</slice>
		<shift public="1" set="method">
			<f a=""><t path="Null"><c path="Array.T"/></t></f>
			<haxe_doc>Removes the first element and returns it.</haxe_doc>
		</shift>
		<reverse public="1" set="method">
			<f a=""><e path="Void"/></f>
			<haxe_doc>Reverse the order of elements of the Array.</haxe_doc>
		</reverse>
		<push public="1" set="method">
			<f a="x">
				<c path="Array.T"/>
				<c path="Int"/>
			</f>
			<haxe_doc>Adds the element [x] at the end of the array.</haxe_doc>
		</push>
		<pop public="1" set="method">
			<f a=""><t path="Null"><c path="Array.T"/></t></f>
			<haxe_doc>Removes the last element of the array and returns it.</haxe_doc>
		</pop>
		<join public="1" set="method">
			<f a="sep">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns a representation of an array with [sep] for separating each element.</haxe_doc>
		</join>
		<concat public="1" set="method">
			<f a="a">
				<c path="Array"><c path="Array.T"/></c>
				<c path="Array"><c path="Array.T"/></c>
			</f>
			<haxe_doc>Returns a new Array by appending [a] to [this].</haxe_doc>
		</concat>
		<length public="1" set="null">
			<c path="Int"/>
			<meta/>
			<haxe_doc>The length of the Array</haxe_doc>
		</length>
		<new public="1" set="method">
			<f a=""><e path="Void"/></f>
			<haxe_doc>Creates a new Array.</haxe_doc>
		</new>
		<haxe_doc>An Array is a storage for values. You can access it using indexes or
	with its API. On the server side, it's often better to use a [List] which
	is less memory and CPU consuming, unless you really need indexed access.</haxe_doc>
		<meta/>
	</class>
	<class path="Class" params="T" file="C:\Motion-Twin\haxe\std/Class.hx" extern="1">
		<haxe_doc>An abstract type that represents a Class.
	See [Type] for the haXe Reflection API.</haxe_doc>
		<meta/>
	</class>
	<class path="Enum" params="T" file="C:\Motion-Twin\haxe\std/Enum.hx" extern="1"><haxe_doc>An abstract type that represents an Enum.
	See [Type] for the haXe Reflection API.</haxe_doc></class>
	<class path="EnumValue" params="" file="C:\Motion-Twin\haxe\std/EnumValue.hx" extern="1"><haxe_doc>An abstract type that represents any enum value.
	See [Type] for the haXe Reflection API.</haxe_doc></class>
	<class path="Hash" params="T" file="C:\Motion-Twin\haxe\std/flash/_std/Hash.hx">
		<iterator public="1" set="method" line="57">
			<f a=""><t path="Iterator"><c path="Hash.T"/></t></f>
			<meta/>
		</iterator>
		<get public="1" set="method" line="38">
			<f a="key">
				<c path="String"/>
				<t path="Null"><c path="Hash.T"/></t>
			</f>
			<meta/>
		</get>
		<set public="1" set="method" line="34">
			<f a="key:value">
				<c path="String"/>
				<c path="Hash.T"/>
				<e path="Void"/>
			</f>
			<meta/>
		</set>
		<h>
			<c path="flash.utils.Dictionary"/>
			<meta/>
		</h>
		<new public="1" set="method" line="30">
			<f a=""><e path="Void"/></f>
			<meta/>
		</new>
		<meta><m n=":core_api"/></meta>
	</class>
	<class path="IntIter" params="" file="C:\Motion-Twin\haxe\std/IntIter.hx" extern="1">
		<haxe_doc>Integer iterator. Used for interval implementation.</haxe_doc>
		<meta><m n=":native"><e>Dynamic</e></m></meta>
	</class>
	<class path="Lambda" params="" file="C:\Motion-Twin\haxe\std/Lambda.hx">
		<exists public="1" params="A" set="method" line="97" static="1">
			<f a="it:f">
				<t path="Iterable"><c path="exists.A"/></t>
				<f a="">
					<c path="exists.A"/>
					<e path="Bool"/>
				</f>
				<e path="Bool"/>
			</f>
			<meta/>
			<haxe_doc>Tells if at least one element of the iterable is found by using the specific function.</haxe_doc>
		</exists>
		<filter public="1" params="A" set="method" line="125" static="1">
			<f a="it:f">
				<t path="Iterable"><c path="filter.A"/></t>
				<f a="">
					<c path="filter.A"/>
					<e path="Bool"/>
				</f>
				<c path="List"><c path="filter.A"/></c>
			</f>
			<meta/>
			<haxe_doc>Return the list of elements matching the function 'f'</haxe_doc>
		</filter>
		<haxe_doc>The [Lambda] class is a collection of functional methods in order to
	use functional-style programming with haXe.</haxe_doc>
		<meta/>
	</class>
	<class path="LazyInst" params="" file="../src/LazyInst.hx">
		<haxe_doc>* @author Tom Byrne</haxe_doc>
		<meta/>
	</class>
	<class path="List" params="T" file="C:\Motion-Twin\haxe\std/List.hx">
		<iterator public="1" set="method" line="152">
			<f a=""><t path="Iterator"><c path="List.T"/></t></f>
			<meta/>
			<haxe_doc>Returns an iterator on the elements of the list.</haxe_doc>
		</iterator>
		<add public="1" set="method" line="51">
			<f a="item">
				<c path="List.T"/>
				<e path="Void"/>
			</f>
			<meta/>
			<haxe_doc>Add an element at the end of the list.</haxe_doc>
		</add>
		<length public="1" set="null">
			<c path="Int"/>
			<meta/>
			<haxe_doc>The number of elements in this list.</haxe_doc>
		</length>
		<q>
			<c path="Array"><d/></c>
			<meta/>
		</q>
		<h>
			<c path="Array"><d/></c>
			<meta/>
		</h>
		<new public="1" set="method" line="44">
			<f a=""><e path="Void"/></f>
			<meta/>
			<haxe_doc>Creates a new empty list.</haxe_doc>
		</new>
		<haxe_doc>A linked-list of elements. The list is composed of two-elements arrays
	that are chained together. It's optimized so that adding or removing an
	element doesn't imply to copy the whole array content everytime.</haxe_doc>
		<meta/>
	</class>
	<class path="Reflect" params="" file="C:\Motion-Twin\haxe\std/flash/_std/Reflect.hx">
		<field public="1" set="method" line="32" static="1">
			<f a="o:field">
				<d/>
				<c path="String"/>
				<d/>
			</f>
			<meta/>
		</field>
		<compareMethods public="1" set="method" line="96" static="1">
			<f a="f1:f2">
				<d/>
				<d/>
				<e path="Bool"/>
			</f>
			<meta/>
		</compareMethods>
		<meta><m n=":core_api"/></meta>
	</class>
	<class path="Std" params="" file="C:\Motion-Twin\haxe\std/flash/_std/Std.hx">
		<is public="1" set="method" line="29" static="1">
			<f a="v:t">
				<d/>
				<d/>
				<e path="Bool"/>
			</f>
			<meta/>
		</is>
		<meta><m n=":core_api"/></meta>
	</class>
	<enum path="Void" params="" file="C:\Motion-Twin\haxe\std/StdTypes.hx" module="StdTypes"><haxe_doc>The standard Void type. Only [null] values can be of the type [Void].</haxe_doc></enum>
	<class path="Float" params="" file="C:\Motion-Twin\haxe\std/StdTypes.hx" module="StdTypes" extern="1"><haxe_doc>The standard Float type, this is a double-precision IEEE 64bit float.</haxe_doc></class>
	<class path="Int" params="" file="C:\Motion-Twin\haxe\std/StdTypes.hx" module="StdTypes" extern="1">
		<extends path="Float"/>
		<haxe_doc>The standard Int type. Its precision depends on the platform.</haxe_doc>
	</class>
	<typedef path="UInt" params="" file="C:\Motion-Twin\haxe\std/StdTypes.hx" module="StdTypes">
		<c path="Int"/>
		<haxe_doc>The unsigned Int type is only defined for Flash9. It's currently
	handled the same as a normal Int.</haxe_doc>
	</typedef>
	<typedef path="Null" params="T" file="C:\Motion-Twin\haxe\std/StdTypes.hx" module="StdTypes">
		<c path="Null.T"/>
		<haxe_doc>[Null] can be useful in two cases. In order to document some methods
	that accepts or can return a [null] value, or for the Flash9 compiler and AS3
	generator to distinguish between base values that can be null and others that
	can't.</haxe_doc>
	</typedef>
	<enum path="Bool" params="" file="C:\Motion-Twin\haxe\std/StdTypes.hx" module="StdTypes">
		<true/>
		<false/>
		<haxe_doc>The standard Boolean type is represented as an enum with two choices.</haxe_doc>
	</enum>
	<class path="Dynamic" params="T" file="C:\Motion-Twin\haxe\std/StdTypes.hx" module="StdTypes" extern="1">
		<haxe_doc>Dynamic is an internal compiler type which has special behavior.
	See the haXe language reference for more informations.</haxe_doc>
		<meta/>
	</class>
	<typedef path="Iterator" params="T" file="C:\Motion-Twin\haxe\std/StdTypes.hx" module="StdTypes">
		<a>
			<next set="method"><f a=""><c path="Iterator.T"/></f></next>
			<hasNext set="method"><f a=""><e path="Bool"/></f></hasNext>
		</a>
		<haxe_doc>An Iterator is a structure that permits to list a given container
	values. It can be used by your own data structures. See the haXe
	documentation for more informations.</haxe_doc>
	</typedef>
	<typedef path="Iterable" params="T" file="C:\Motion-Twin\haxe\std/StdTypes.hx" module="StdTypes">
		<a><iterator set="method"><f a=""><t path="Iterator"><c path="Iterable.T"/></t></f></iterator></a>
		<haxe_doc>An Iterable is a data structure which has an iterator() method.
	See [Lambda] for generic functions on iterable structures.</haxe_doc>
	</typedef>
	<class path="ArrayAccess" params="T" file="C:\Motion-Twin\haxe\std/StdTypes.hx" module="StdTypes" extern="1" interface="1"><haxe_doc>ArrayAccess is used to indicate a class that can be accessed using brackets.
	The type parameter represent the type of the elements stored.</haxe_doc></class>
	<class path="String" params="" file="C:\Motion-Twin\haxe\std/String.hx" extern="1">
		<fromCharCode public="1" set="method" static="1"><f a="code">
	<c path="Int"/>
	<c path="String"/>
</f></fromCharCode>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns the String itself.</haxe_doc>
		</toString>
		<substring public="1" set="method">
			<f a="startIndex:?endIndex">
				<c path="Int"/>
				<c path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc><![CDATA[Returns a part of the String, taking from [startIndex] to [endIndex] - 1.
		If [endIndex] is not specified, length is used.
		If [startIndex] or [endIndex] is smaller than 0, than 0 is used.
		If [startIndex] > [endIndex] then they are swaped.]]></haxe_doc>
		</substring>
		<substr public="1" set="method">
			<f a="pos:?len">
				<c path="Int"/>
				<c path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns a part of the String, taking [len] characters starting from [pos].
		If [len] is not specified, it takes all the remaining characters.</haxe_doc>
		</substr>
		<split public="1" set="method">
			<f a="delimiter">
				<c path="String"/>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>Split the string using the specified delimiter.</haxe_doc>
		</split>
		<lastIndexOf public="1" set="method">
			<f a="str:?startIndex">
				<c path="String"/>
				<c path="Int"/>
				<c path="Int"/>
			</f>
			<haxe_doc>Similar to [indexOf] but returns the latest index.</haxe_doc>
		</lastIndexOf>
		<indexOf public="1" set="method">
			<f a="str:?startIndex">
				<c path="String"/>
				<c path="Int"/>
				<c path="Int"/>
			</f>
			<haxe_doc>Returns the index of first occurence of [value]
		Returns [1-1] if [value] is not found.
		The optional [startIndex] parameter allows you to specify at which character to start searching.
		The position returned is still relative to the beginning of the string.</haxe_doc>
		</indexOf>
		<charCodeAt public="1" set="method">
			<f a="index">
				<c path="Int"/>
				<t path="Null"><c path="Int"/></t>
			</f>
			<haxe_doc>Returns the character code at the given position.
		Returns [null] if outside of String bounds.</haxe_doc>
		</charCodeAt>
		<charAt public="1" set="method">
			<f a="index">
				<c path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the character at the given position.
		Returns the empty String if outside of String bounds.</haxe_doc>
		</charAt>
		<toLowerCase public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns an String where all characters have been lowercased.</haxe_doc>
		</toLowerCase>
		<toUpperCase public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns an String where all characters have been uppercased.</haxe_doc>
		</toUpperCase>
		<length public="1" set="null">
			<c path="Int"/>
			<meta/>
			<haxe_doc>The number of characters in the String.</haxe_doc>
		</length>
		<new public="1" set="method">
			<f a="string">
				<c path="String"/>
				<e path="Void"/>
			</f>
			<meta/>
			<haxe_doc>Creates a copy from a given String.</haxe_doc>
		</new>
		<haxe_doc>The basic String class.</haxe_doc>
		<meta/>
	</class>
	<class path="StringBuf" params="" file="C:\Motion-Twin\haxe\std/StringBuf.hx" extern="1">
		<haxe_doc>A String buffer is an efficient way to build a big string by
	appending small elements together.</haxe_doc>
		<meta><m n=":native"><e>Dynamic</e></m></meta>
	</class>
	<enum path="ValueType" params="" file="C:\Motion-Twin\haxe\std/flash/_std/Type.hx" module="Type">
		<TUnknown/>
		<TObject/>
		<TNull/>
		<TInt/>
		<TFunction/>
		<TFloat/>
		<TEnum a="e"><c path="Enum"><d/></c></TEnum>
		<TClass a="c"><c path="Class"><d/></c></TClass>
		<TBool/>
	</enum>
	<class path="Type" params="" file="C:\Motion-Twin\haxe\std/flash/_std/Type.hx">
		<getEnum public="1" set="method" line="52" static="1">
			<f a="o">
				<c path="EnumValue"/>
				<c path="Enum"><d/></c>
			</f>
			<meta/>
		</getEnum>
		<getClassName public="1" set="method" line="73" static="1">
			<f a="c">
				<c path="Class"><d/></c>
				<c path="String"/>
			</f>
			<meta/>
		</getClassName>
		<createInstance public="1" params="T" set="method" line="134" static="1">
			<f a="cl:args">
				<c path="Class"><c path="createInstance.T"/></c>
				<c path="Array"><d/></c>
				<c path="createInstance.T"/>
			</f>
			<meta/>
		</createInstance>
		<enumEq public="1" params="T" set="method" line="251" static="1">
			<f a="a:b">
				<c path="enumEq.T"/>
				<c path="enumEq.T"/>
				<e path="Bool"/>
			</f>
			<meta/>
		</enumEq>
		<meta><m n=":core_api"/></meta>
	</class>
	<typedef path="cmtc.ds.hash.ObjectHash" params="Key:Val" file="../src/cmtc/ds/hash/ObjectHash.hx">
		<c path="flash.utils.TypedDictionary">
			<c path="cmtc.ds.hash.ObjectHash.Key"/>
			<c path="cmtc.ds.hash.ObjectHash.Val"/>
		</c>
		<haxe_doc>* ...
 * @author waneck</haxe_doc>
	</typedef>
	<class path="composure.core.ComposeItem" params="" file="../src/composure/core/ComposeItem.hx">
		<getRealTrait public="1" set="method" line="21" static="1">
			<f a="trait">
				<d/>
				<c path="composure.traits.ITrait"/>
			</f>
			<meta/>
		</getRealTrait>
		<removeParentInjector set="method" line="301">
			<f a="injector">
				<c path="composure.injectors.IInjector"/>
				<e path="Void"/>
			</f>
			<meta/>
		</removeParentInjector>
		<addParentInjector set="method" line="297">
			<f a="injector">
				<c path="composure.injectors.IInjector"/>
				<e path="Void"/>
			</f>
			<meta/>
		</addParentInjector>
		<onRootRemove set="method" line="288">
			<f a=""><e path="Void"/></f>
			<meta/>
		</onRootRemove>
		<onRootAdd set="method" line="281">
			<f a=""><e path="Void"/></f>
			<meta/>
		</onRootAdd>
		<onParentRemove set="method" line="271">
			<f a=""><e path="Void"/></f>
			<meta/>
		</onParentRemove>
		<onParentAdd set="method" line="261">
			<f a=""><e path="Void"/></f>
			<meta/>
		</onParentAdd>
		<removeTraitInjector set="method" line="246">
			<f a="injector">
				<c path="composure.injectors.IInjector"/>
				<e path="Void"/>
			</f>
			<meta/>
		</removeTraitInjector>
		<addTraitInjector set="method" line="231">
			<f a="injector">
				<c path="composure.injectors.IInjector"/>
				<e path="Void"/>
			</f>
			<meta/>
		</addTraitInjector>
		<_removeTrait set="method" line="202">
			<f a="trait">
				<d/>
				<e path="Void"/>
			</f>
			<meta/>
		</_removeTrait>
		<removeAllTraits public="1" set="method" line="197">
			<f a=""><e path="Void"/></f>
			<meta/>
			<haxe_doc>* Removes all traits from this item.</haxe_doc>
		</removeAllTraits>
		<removeTraits public="1" set="method" line="189">
			<f a="traits">
				<c path="Array"><d/></c>
				<e path="Void"/>
			</f>
			<meta/>
			<haxe_doc>* Removes a list of traits from this item.
	 * @see					addTrait
	 * @param	trait		The list of traits to remove from this item.</haxe_doc>
		</removeTraits>
		<removeTrait public="1" set="method" line="181">
			<f a="trait">
				<d/>
				<e path="Void"/>
			</f>
			<meta/>
			<haxe_doc>* Removes a trait from this item.
	 * @see					addTrait
	 * @param	trait		The trait to remove from this item.</haxe_doc>
		</removeTrait>
		<_addTrait set="method" line="148">
			<f a="trait">
				<d/>
				<e path="Void"/>
			</f>
			<meta/>
		</_addTrait>
		<addTraits public="1" set="method" line="143">
			<f a="traits">
				<c path="Array"><d/></c>
				<e path="Void"/>
			</f>
			<meta/>
			<haxe_doc>* Adds multiple traits to this item.
	 * @see					addTrait
	 * @param	traits		The traits to add to this item.</haxe_doc>
		</addTraits>
		<addTrait public="1" set="method" line="135">
			<f a="trait">
				<d/>
				<e path="Void"/>
			</f>
			<meta/>
			<haxe_doc>* Adds a trait to this item. Any type of object can be added, but if it implements ITrait
	 * it will have access to more information about the item and it's other traits. If, for structural reasons,
	 * it is inconvenient to implement ITrait, the object can expose a method called 'getProxiedTrait()' which should
	 * return an ITrait object to operate as it's proxy regarding other traits etc.
	 * @param	trait		The trait to add to this item.</haxe_doc>
		</addTrait>
		<getTrait public="1" params="TraitType" set="method" line="98">
			<f a="TraitType">
				<c path="Class"><c path="getTrait.TraitType"/></c>
				<c path="getTrait.TraitType"/>
			</f>
			<meta/>
			<haxe_doc>* Gets the first trait of a certain type.
	 * @param	TraitType		The type which the returned trait must implement.
	 * @return		A trait object, returns null if no matching trait is found.</haxe_doc>
		</getTrait>
		<setRoot set="method" line="84">
			<f a="root">
				<c path="composure.core.ComposeRoot"/>
				<e path="Void"/>
			</f>
			<meta/>
		</setRoot>
		<_traitToPair>
			<t path="cmtc.ds.hash.ObjectHash">
				<d/>
				<t path="composure.traits.TraitPair"><d/></t>
			</t>
			<meta/>
		</_traitToPair>
		<_traitToCast>
			<t path="cmtc.ds.hash.ObjectHash">
				<d/>
				<c path="composure.traits.ITrait"/>
			</t>
			<meta/>
		</_traitToCast>
		<_uniInjectors>
			<c path="org.tbyrne.collections.UniqueList"><c path="composure.injectors.IInjector"/></c>
			<meta/>
		</_uniInjectors>
		<_ascInjectors>
			<c path="org.tbyrne.collections.UniqueList"><c path="composure.injectors.IInjector"/></c>
			<meta/>
		</_ascInjectors>
		<_parentMarrier>
			<c path="composure.injectors.InjectorMarrier"/>
			<meta/>
		</_parentMarrier>
		<_siblingMarrier>
			<c path="composure.injectors.InjectorMarrier"/>
			<meta/>
		</_siblingMarrier>
		<_traitCollection>
			<c path="composure.traits.TraitCollection"/>
			<meta/>
		</_traitCollection>
		<_root>
			<c path="composure.core.ComposeRoot"/>
			<meta/>
		</_root>
		<_parentItem>
			<c path="composure.core.ComposeGroup"/>
			<meta/>
		</_parentItem>
		<getRoot set="method" line="59">
			<f a=""><c path="composure.core.ComposeRoot"/></f>
			<meta/>
		</getRoot>
		<root public="1" get="getRoot" set="null">
			<c path="composure.core.ComposeRoot"/>
			<meta/>
			<haxe_doc>* The ComposeRoot which is the top-level parent, if this is the root 'root' will be a self-reference.
	 * This value is set automatically and shouldn't be manually changed.</haxe_doc>
		</root>
		<setParentItem set="method" line="42">
			<f a="value">
				<c path="composure.core.ComposeGroup"/>
				<c path="composure.core.ComposeGroup"/>
			</f>
			<meta/>
		</setParentItem>
		<getParentItem set="method" line="39">
			<f a=""><c path="composure.core.ComposeGroup"/></f>
			<meta/>
		</getParentItem>
		<parentItem public="1" get="getParentItem" set="setParentItem">
			<c path="composure.core.ComposeGroup"/>
			<meta/>
			<haxe_doc>* The ComposeGroup to which this item is added, if this is the root 'parentItem' will be a self-reference.
	 * This value is set automatically and shouldn't be manually changed.</haxe_doc>
		</parentItem>
		<new public="1" set="method" line="76">
			<f a="?initTraits">
				<c path="Array"><d/></c>
				<e path="Void"/>
			</f>
			<meta/>
			<haxe_doc>* @param	initTraits		A list of traits to add to this ComposeItem initially.</haxe_doc>
		</new>
		<haxe_doc><![CDATA[* ComposeItem forms is the base class of all conceptual items in Composure.
 * It allows traits to be added and removed.<br/>
 * ComposeItem should only be used for performance critical items, it is recommended
 * that most items be represented by the subclass ComposeGroup, which adds the ability
 * to add/remove child items.
 * @author		Tom Byrne]]></haxe_doc>
		<meta/>
	</class>
	<class path="composure.core.ComposeGroup" params="" file="../src/composure/core/ComposeGroup.hx">
		<extends path="composure.core.ComposeItem"/>
		<removeDescParentInjector set="method" line="344">
			<f a="injector">
				<c path="composure.injectors.IInjector"/>
				<e path="Void"/>
			</f>
			<meta/>
		</removeDescParentInjector>
		<addDescParentInjector set="method" line="337">
			<f a="injector">
				<c path="composure.injectors.IInjector"/>
				<e path="Void"/>
			</f>
			<meta/>
		</addDescParentInjector>
		<checkForNewlyUnignoredInjectors set="method" line="319">
			<f a=""><e path="Void"/></f>
			<meta/>
		</checkForNewlyUnignoredInjectors>
		<checkForNewlyIgnoredInjectors set="method" line="300">
			<f a=""><e path="Void"/></f>
			<meta/>
		</checkForNewlyIgnoredInjectors>
		<removeParentInjector set="method" line="290" override="1">
			<f a="injector">
				<c path="composure.injectors.IInjector"/>
				<e path="Void"/>
			</f>
			<meta/>
		</removeParentInjector>
		<addParentInjector set="method" line="280" override="1">
			<f a="injector">
				<c path="composure.injectors.IInjector"/>
				<e path="Void"/>
			</f>
			<meta/>
		</addParentInjector>
		<_removeAscendingInjector set="method" line="275">
			<f a="injector">
				<c path="composure.injectors.IInjector"/>
				<e path="Void"/>
			</f>
			<meta/>
		</_removeAscendingInjector>
		<removeAscendingInjector public="1" set="method" line="267">
			<f a="injector">
				<c path="composure.injectors.IInjector"/>
				<e path="Void"/>
			</f>
			<meta/>
			<haxe_doc>* @private
	 * This is an interal function of Composure. Do not call this method.</haxe_doc>
		</removeAscendingInjector>
		<_addAscendingInjector set="method" line="258">
			<f a="injector">
				<c path="composure.injectors.IInjector"/>
				<e path="Void"/>
			</f>
			<meta/>
		</_addAscendingInjector>
		<addAscendingInjector public="1" set="method" line="249">
			<f a="injector">
				<c path="composure.injectors.IInjector"/>
				<e path="Void"/>
			</f>
			<meta/>
			<haxe_doc>* @private
	 * This is an interal function of Composure. Do not call this method.</haxe_doc>
		</addAscendingInjector>
		<onParentRemove set="method" line="234" override="1">
			<f a=""><e path="Void"/></f>
			<meta/>
		</onParentRemove>
		<onParentAdd set="method" line="223" override="1">
			<f a=""><e path="Void"/></f>
			<meta/>
		</onParentAdd>
		<removeTraitInjector set="method" line="184" override="1">
			<f a="injector">
				<c path="composure.injectors.IInjector"/>
				<e path="Void"/>
			</f>
			<meta/>
		</removeTraitInjector>
		<addTraitInjector set="method" line="175" override="1">
			<f a="injector">
				<c path="composure.injectors.IInjector"/>
				<e path="Void"/>
			</f>
			<meta/>
		</addTraitInjector>
		<removeAllTraits public="1" set="method" line="171" override="1">
			<f a=""><e path="Void"/></f>
			<meta/>
			<haxe_doc>* @inheritDoc</haxe_doc>
		</removeAllTraits>
		<removeTraits public="1" set="method" line="164" override="1">
			<f a="traits">
				<c path="Array"><d/></c>
				<e path="Void"/>
			</f>
			<meta/>
			<haxe_doc>* @inheritDoc</haxe_doc>
		</removeTraits>
		<removeTrait public="1" set="method" line="157" override="1">
			<f a="trait">
				<d/>
				<e path="Void"/>
			</f>
			<meta/>
			<haxe_doc>* @inheritDoc</haxe_doc>
		</removeTrait>
		<addTraits public="1" set="method" line="150" override="1">
			<f a="traits">
				<c path="Array"><d/></c>
				<e path="Void"/>
			</f>
			<meta/>
			<haxe_doc>* @inheritDoc</haxe_doc>
		</addTraits>
		<addTrait public="1" set="method" line="143" override="1">
			<f a="trait">
				<d/>
				<e path="Void"/>
			</f>
			<meta/>
			<haxe_doc>* @inheritDoc</haxe_doc>
		</addTrait>
		<removeChildTrait public="1" set="method" line="136">
			<f a="traitPair">
				<t path="composure.traits.TraitPair"><d/></t>
				<e path="Void"/>
			</f>
			<meta/>
			<haxe_doc>* @private
	 * This is an interal function of Composure. Do not call this method.</haxe_doc>
		</removeChildTrait>
		<addChildTrait public="1" set="method" line="128">
			<f a="traitPair">
				<t path="composure.traits.TraitPair"><d/></t>
				<e path="Void"/>
			</f>
			<meta/>
			<haxe_doc>* @private
	 * This is an interal function of Composure. Do not call this method.</haxe_doc>
		</addChildTrait>
		<removeChild public="1" set="method" line="90">
			<f a="item">
				<c path="composure.core.ComposeItem"/>
				<e path="Void"/>
			</f>
			<meta/>
			<haxe_doc>* Removes a child ComposeItem from this ComposeGroup.
	 * @param	item		A ComposeItem object to remove as a child from this group.</haxe_doc>
		</removeChild>
		<addChild public="1" set="method" line="60">
			<f a="item">
				<c path="composure.core.ComposeItem"/>
				<e path="Void"/>
			</f>
			<meta/>
			<haxe_doc>* Adds a child ComposeItem to this ComposeGroup.
	 * @param	item		A ComposeItem object to add as a child to this group.</haxe_doc>
		</addChild>
		<setRoot set="method" line="50" override="1">
			<f a="game">
				<c path="composure.core.ComposeRoot"/>
				<e path="Void"/>
			</f>
			<meta/>
		</setRoot>
		<_ignoredParentDescInjectors>
			<c path="org.tbyrne.collections.UniqueList"><c path="composure.injectors.IInjector"/></c>
			<meta/>
		</_ignoredParentDescInjectors>
		<_parentDescInjectors>
			<c path="org.tbyrne.collections.UniqueList"><c path="composure.injectors.IInjector"/></c>
			<meta/>
		</_parentDescInjectors>
		<_descInjectors>
			<c path="org.tbyrne.collections.UniqueList"><c path="composure.injectors.IInjector"/></c>
			<meta/>
		</_descInjectors>
		<_childAscendingMarrier>
			<c path="composure.injectors.InjectorMarrier"/>
			<meta/>
		</_childAscendingMarrier>
		<_ignoredChildAscInjectors>
			<c path="org.tbyrne.collections.UniqueList"><c path="composure.injectors.IInjector"/></c>
			<meta/>
		</_ignoredChildAscInjectors>
		<_childAscInjectors>
			<c path="org.tbyrne.collections.UniqueList"><c path="composure.injectors.IInjector"/></c>
			<meta/>
		</_childAscInjectors>
		<_children>
			<c path="org.tbyrne.collections.UniqueList"><c path="composure.core.ComposeItem"/></c>
			<meta/>
		</_children>
		<_descendantTraits>
			<c path="composure.traits.TraitCollection"/>
			<meta/>
		</_descendantTraits>
		<get_children set="method" line="24">
			<f a=""><t path="Iterable"><c path="composure.core.ComposeItem"/></t></f>
			<meta/>
		</get_children>
		<children public="1" get="get_children" set="null">
			<t path="Iterable"><c path="composure.core.ComposeItem"/></t>
			<meta/>
		</children>
		<new public="1" set="method" line="42">
			<f a="?initTraits">
				<c path="Array"><d/></c>
				<e path="Void"/>
			</f>
			<meta/>
			<haxe_doc>* @param	initTraits		A list of traits to add to this ComposeItem initially.</haxe_doc>
		</new>
		<haxe_doc><![CDATA[* ComposeGroup is the core item used in Composure. It represents one conceptual object.
 * It shouldn't be directly overriden, instead it should be instantiated and then
 * populated with traits, each adding one atomic piece of behaviour.<br/>
 * ComposeGroup adds to the functionality of ComposeItem by allowing child items. For
 * performance critical items that will never need to house children, ComposeItem can
 * be used instead.
 * @author		Tom Byrne]]></haxe_doc>
		<meta/>
	</class>
	<class path="composure.core.ComposeRoot" params="" file="../src/composure/core/ComposeRoot.hx">
		<extends path="composure.core.ComposeGroup"/>
		<removeUniversalInjector public="1" set="method" line="42">
			<f a="injector">
				<c path="composure.injectors.IInjector"/>
				<e path="Void"/>
			</f>
			<meta/>
			<haxe_doc>* @private</haxe_doc>
		</removeUniversalInjector>
		<addUniversalInjector public="1" set="method" line="35">
			<f a="injector">
				<c path="composure.injectors.IInjector"/>
				<e path="Void"/>
			</f>
			<meta/>
			<haxe_doc>* @private</haxe_doc>
		</addUniversalInjector>
		<_universalMarrier>
			<c path="composure.injectors.InjectorMarrier"/>
			<meta/>
		</_universalMarrier>
		<haxe_doc><![CDATA[* ComposeRoot is the root item for the Composure library.
 * When using Composure, one top-level ComposeRoot object should be
 * created. All other objects should then be added to this object or one
 * of it's descendants.<br/>
 * It is recommended that you do not add traits directly to the root object.
 * Adding them to some 'stage' or 'controller' item instead will allow your app
 * to coexist and interrelate with other Composure apps in future.<br/>
 * The only functional change ComposeRoot adds to ComposeGroup is that it's
 * 'root' property is a reference to itself.
 * @author		Tom Byrne]]></haxe_doc>
	</class>
	<class path="composure.injectors.IInjector" params="" file="../src/composure/injectors/IInjector.hx" interface="1">
		<isInterestedIn public="1" set="method"><f a="item:trait">
	<c path="composure.core.ComposeItem"/>
	<d/>
	<e path="Bool"/>
</f></isInterestedIn>
		<shouldAscend public="1" set="method"><f a="item">
	<c path="composure.core.ComposeItem"/>
	<e path="Bool"/>
</f></shouldAscend>
		<shouldDescend public="1" set="method"><f a="item">
	<c path="composure.core.ComposeItem"/>
	<e path="Bool"/>
</f></shouldDescend>
		<injectorRemoved public="1" set="method"><f a="traitPair">
	<t path="composure.traits.TraitPair"><d/></t>
	<e path="Void"/>
</f></injectorRemoved>
		<injectorAdded public="1" set="method"><f a="traitPair">
	<t path="composure.traits.TraitPair"><d/></t>
	<e path="Void"/>
</f></injectorAdded>
		<ownerTrait public="1">
			<d/>
			<meta/>
		</ownerTrait>
		<acceptOwnerTrait public="1" set="null">
			<e path="Bool"/>
			<meta/>
		</acceptOwnerTrait>
		<universal public="1" set="null">
			<e path="Bool"/>
			<meta/>
		</universal>
		<descendants public="1" set="null">
			<e path="Bool"/>
			<meta/>
		</descendants>
		<ascendants public="1" set="null">
			<e path="Bool"/>
			<meta/>
		</ascendants>
		<siblings public="1" set="null">
			<e path="Bool"/>
			<meta/>
		</siblings>
	</class>
	<class path="composure.injectors.AbstractInjector" params="" file="../src/composure/injectors/AbstractInjector.hx">
		<implements path="composure.injectors.IInjector"/>
		<isInterestedIn public="1" set="method" line="123">
			<f a="item:trait">
				<c path="composure.core.ComposeItem"/>
				<d/>
				<e path="Bool"/>
			</f>
			<meta/>
		</isInterestedIn>
		<shouldAscend public="1" set="method" line="119">
			<f a="item">
				<c path="composure.core.ComposeItem"/>
				<e path="Bool"/>
			</f>
			<meta/>
		</shouldAscend>
		<shouldDescend public="1" set="method" line="115">
			<f a="item">
				<c path="composure.core.ComposeItem"/>
				<e path="Bool"/>
			</f>
			<meta/>
		</shouldDescend>
		<injectorRemoved public="1" set="method" line="79">
			<f a="traitPair">
				<t path="composure.traits.TraitPair"><d/></t>
				<e path="Void"/>
			</f>
			<meta/>
		</injectorRemoved>
		<injectorAdded public="1" set="method" line="59">
			<f a="traitPair">
				<t path="composure.traits.TraitPair"><d/></t>
				<e path="Void"/>
			</f>
			<meta/>
		</injectorAdded>
		<_addedTraits>
			<c path="org.tbyrne.collections.UniqueList"><d/></c>
			<meta/>
		</_addedTraits>
		<passThroughItem public="1">
			<e path="Bool"/>
			<meta/>
		</passThroughItem>
		<passThroughInjector public="1">
			<e path="Bool"/>
			<meta/>
		</passThroughInjector>
		<ownerTrait public="1">
			<d/>
			<meta/>
		</ownerTrait>
		<_enumValMode>
			<e path="Bool"/>
			<meta/>
		</_enumValMode>
		<set_interestedTraitType set="method" line="22">
			<f a="value">
				<d/>
				<d/>
			</f>
			<meta/>
		</set_interestedTraitType>
		<interestedTraitType public="1" set="set_interestedTraitType">
			<d/>
			<meta/>
		</interestedTraitType>
		<acceptOwnerTrait public="1">
			<e path="Bool"/>
			<meta/>
		</acceptOwnerTrait>
		<universal public="1">
			<e path="Bool"/>
			<meta/>
		</universal>
		<ascendants public="1">
			<e path="Bool"/>
			<meta/>
		</ascendants>
		<descendants public="1">
			<e path="Bool"/>
			<meta/>
		</descendants>
		<siblings public="1">
			<e path="Bool"/>
			<meta/>
		</siblings>
		<removeHandler public="1">
			<d/>
			<meta/>
		</removeHandler>
		<addHandler public="1">
			<d/>
			<meta/>
		</addHandler>
		<new public="1" set="method" line="43">
			<f a="interestedTraitType:addHandler:removeHandler:?siblings:?descendants:?ascendants:?universal">
				<d/>
				<d/>
				<d/>
				<e path="Bool"/>
				<e path="Bool"/>
				<e path="Bool"/>
				<e path="Bool"/>
				<e path="Void"/>
			</f>
			<meta/>
		</new>
		<meta/>
	</class>
	<class path="composure.injectors.Injector" params="" file="../src/composure/injectors/Injector.hx">
		<extends path="composure.injectors.AbstractInjector"/>
		<isInterestedIn public="1" set="method" line="35" override="1">
			<f a="item:trait">
				<c path="composure.core.ComposeItem"/>
				<d/>
				<e path="Bool"/>
			</f>
			<meta/>
		</isInterestedIn>
		<shouldAscend public="1" set="method" line="28" override="1">
			<f a="item">
				<c path="composure.core.ComposeItem"/>
				<e path="Bool"/>
			</f>
			<meta/>
		</shouldAscend>
		<shouldDescend public="1" set="method" line="21" override="1">
			<f a="item">
				<c path="composure.core.ComposeItem"/>
				<e path="Bool"/>
			</f>
			<meta/>
		</shouldDescend>
		<maxMatches public="1">
			<c path="Int"/>
			<meta/>
		</maxMatches>
		<stopAscendingAt public="1">
			<f a="::">
				<c path="composure.core.ComposeItem"/>
				<d/>
				<c path="composure.injectors.Injector"/>
				<e path="Bool"/>
			</f>
			<meta/>
		</stopAscendingAt>
		<stopDescendingAt public="1">
			<f a="::">
				<c path="composure.core.ComposeItem"/>
				<d/>
				<c path="composure.injectors.Injector"/>
				<e path="Bool"/>
			</f>
			<meta/>
		</stopDescendingAt>
		<matchTrait public="1">
			<f a="::">
				<c path="composure.core.ComposeItem"/>
				<d/>
				<c path="composure.injectors.Injector"/>
				<e path="Bool"/>
			</f>
			<meta/>
		</matchTrait>
		<new public="1" set="method" line="14">
			<f a="traitType:addHandler:removeHandler:?siblings:?descendants:?ascendants:?universal">
				<d/>
				<d/>
				<d/>
				<e path="Bool"/>
				<e path="Bool"/>
				<e path="Bool"/>
				<e path="Bool"/>
				<e path="Void"/>
			</f>
			<meta/>
		</new>
		<meta/>
	</class>
	<class path="composure.injectors.InjectorMarrier" params="" file="../src/composure/injectors/InjectorMarrier.hx">
		<compareTrait set="method" line="122">
			<f a="traitPair:traitInjector">
				<t path="composure.traits.TraitPair"><d/></t>
				<c path="composure.injectors.IInjector"/>
				<e path="Void"/>
			</f>
			<meta/>
		</compareTrait>
		<onTraitRemoved set="method" line="107">
			<f a="traitPair">
				<t path="composure.traits.TraitPair"><d/></t>
				<e path="Void"/>
			</f>
			<meta/>
		</onTraitRemoved>
		<onTraitAdded set="method" line="101">
			<f a="traitPair">
				<t path="composure.traits.TraitPair"><d/></t>
				<e path="Void"/>
			</f>
			<meta/>
		</onTraitAdded>
		<removeInjector public="1" set="method" line="73">
			<f a="traitInjector">
				<c path="composure.injectors.IInjector"/>
				<e path="Void"/>
			</f>
			<meta/>
		</removeInjector>
		<addInjector public="1" set="method" line="55">
			<f a="traitInjector">
				<c path="composure.injectors.IInjector"/>
				<e path="Void"/>
			</f>
			<meta/>
		</addInjector>
		<_traitLookup>
			<t path="cmtc.ds.hash.ObjectHash">
				<d/>
				<c path="org.tbyrne.collections.UniqueList"><c path="composure.injectors.IInjector"/></c>
			</t>
			<meta/>
		</_traitLookup>
		<_injectorLookup>
			<t path="cmtc.ds.hash.ObjectHash">
				<c path="composure.injectors.IInjector"/>
				<c path="org.tbyrne.collections.UniqueList"><t path="composure.traits.TraitPair"><d/></t></c>
			</t>
			<meta/>
		</_injectorLookup>
		<_traitInjectors>
			<c path="org.tbyrne.collections.UniqueList"><c path="composure.injectors.IInjector"/></c>
			<meta/>
		</_traitInjectors>
		<_traits>
			<c path="composure.traits.TraitCollection"/>
			<meta/>
		</_traits>
		<getTraitInjectors set="method" line="34">
			<f a=""><c path="org.tbyrne.collections.UniqueList"><c path="composure.injectors.IInjector"/></c></f>
			<meta/>
		</getTraitInjectors>
		<set_traits set="method" line="19">
			<f a="value">
				<c path="composure.traits.TraitCollection"/>
				<c path="composure.traits.TraitCollection"/>
			</f>
			<meta/>
		</set_traits>
		<get_traits set="method" line="16">
			<f a=""><c path="composure.traits.TraitCollection"/></f>
			<meta/>
		</get_traits>
		<traits public="1" get="get_traits" set="set_traits">
			<c path="composure.traits.TraitCollection"/>
			<meta/>
		</traits>
		<new public="1" set="method" line="47">
			<f a="traits">
				<c path="composure.traits.TraitCollection"/>
				<e path="Void"/>
			</f>
			<meta/>
		</new>
		<meta/>
	</class>
	<class path="composure.injectors.PropInjector" params="" file="../src/composure/injectors/PropInjector.hx" extern="1">
		<extends path="composure.injectors.Injector"/>
		<haxe_doc>* ...
 * @author Tom Byrne</haxe_doc>
		<meta><m n=":native"><e>Dynamic</e></m></meta>
	</class>
	<class path="composure.macro.InjectorMacro" params="" file="../src/composure/macro/InjectorMacro.hx" extern="1">
		<haxe_doc><![CDATA[* The InjectorMacro is used to convert inject metadata into IInjector objects.
 * It gets run at compile-time using the build metadata:<br/>
 * '@build(composure.macro.InjectorMacro.inject())'<br/>
 * which should be added directly above your trait class definition.<br/>
 * <br/>
 * If your trait extends AbstractTrait, it needn't use the '@build' metadata
 * as all subclasses of AbstractTrait automatically get processed by the 
 * InjectorMacro.
 * 
 * @author Tom Byrne]]></haxe_doc>
		<meta><m n=":native"><e>Dynamic</e></m></meta>
	</class>
	<class path="composure.macro._InjectorMacro.InjectorAccess" params="" file="../src/composure/macro/InjectorMacro.hx" private="1" module="composure.macro.InjectorMacro" extern="1"><meta><m n=":native"><e>Dynamic</e></m></meta></class>
	<class path="composure.traitCheckers.GenerationChecker" params="" file="../src/composure/traitCheckers/GenerationChecker.hx">
		<create public="1" set="method" line="39" static="1">
			<f a="?maxGenerations:?descending:?relatedItem">
				<c path="Int"/>
				<e path="Bool"/>
				<e path="composure.traitCheckers.ItemType"/>
				<f a="::">
					<c path="composure.core.ComposeItem"/>
					<d/>
					<c path="composure.injectors.Injector"/>
					<e path="Bool"/>
				</f>
			</f>
			<meta/>
			<haxe_doc><![CDATA[* The create method can be used to limit the scope of a certain Injector
	 * to a certain amount of generations. It generates a function which can be assigned
	 * to either the stopDescendingAt or stopAscendingAt properties of the Injector class.<br/>
	 * <br/>
	 * For example, if you wanted to get all position traits from child items (but not
	 * grandchild items) you could do something like this:
	 * <pre><code>
	 * var injector:Injector = new Injector(IPositionTrait, childPosAdded, childPosRemoved, false, true, false);
	 * injector.stopDescendingAt = GenerationChecker.create(1,true,ItemType.injectorItem);
	 * addInjector(injector);
	 * </code></pre>
	 * 
	 * @param maxGenerations The maximum amount of generations that the injector should
	 * have scope over. Defaults to '1', meaning the parent or child generation (depending on
	 * descending).
	 * 
	 * @param descending Whether the check should go up the hierarchy or down.
	 * 
	 * @param relatedItem Which ComposeItem/ComposeGroup should the generations be relative to.
	 * Defaults to the item which the trait is added.]]></haxe_doc>
		</create>
		<searchForDesc set="method" line="64" static="1">
			<f a="remainingGenerations:startGroup:findItem">
				<c path="Int"/>
				<c path="composure.core.ComposeGroup"/>
				<c path="composure.core.ComposeItem"/>
				<e path="Bool"/>
			</f>
			<meta/>
		</searchForDesc>
		<haxe_doc>* @author Tom Byrne</haxe_doc>
		<meta><m n=":keep"/></meta>
	</class>
	<enum path="composure.traitCheckers.ItemType" params="" file="../src/composure/traitCheckers/GenerationChecker.hx" module="composure.traitCheckers.GenerationChecker">
		<specific a="ItemType"><c path="composure.core.ComposeItem"/></specific>
		<root/>
		<injectorItem/>
		<meta/>
	</enum>
	<class path="composure.traitCheckers.MatchProps" params="" file="../src/composure/traitCheckers/MatchProps.hx" extern="1">
		<haxe_doc>* ...
 * @author Tom Byrne</haxe_doc>
		<meta><m n=":native"><e>Dynamic</e></m></meta>
	</class>
	<class path="composure.traitCheckers.TraitTypeChecker" params="" file="../src/composure/traitCheckers/TraitTypeChecker.hx">
		<createMulti public="1" set="method" line="14" static="1">
			<f a="types:?useOrCheck:?invertResponse:?unlessIsTraits:?dontMatchFrom">
				<c path="Array"><c path="Class"><d/></c></c>
				<e path="Bool"/>
				<e path="Bool"/>
				<c path="Array"><d/></c>
				<e path="Bool"/>
				<f a="::">
					<c path="composure.core.ComposeItem"/>
					<d/>
					<c path="composure.injectors.Injector"/>
					<e path="Bool"/>
				</f>
			</f>
			<meta/>
		</createMulti>
		<create public="1" set="method" line="37" static="1">
			<f a="type:?invertResponse:?unlessIsTrait:?dontMatchFrom">
				<c path="Class"><d/></c>
				<e path="Bool"/>
				<d/>
				<e path="Bool"/>
				<f a="::">
					<c path="composure.core.ComposeItem"/>
					<d/>
					<c path="composure.injectors.Injector"/>
					<e path="Bool"/>
				</f>
			</f>
			<meta/>
		</create>
		<contains set="method" line="46" static="1">
			<f a="traits:trait">
				<c path="Array"><d/></c>
				<d/>
				<e path="Bool"/>
			</f>
			<meta/>
		</contains>
		<haxe_doc>* @author Tom Byrne</haxe_doc>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="composure.traits.ITrait" params="" file="../src/composure/traits/ITrait.hx" interface="1">
		<getInjectors public="1" set="method">
			<f a=""><t path="Iterable"><c path="composure.injectors.IInjector"/></t></f>
			<haxe_doc>* This provides a way for this trait to gain access to other traits in the
	 * application.
	 * @return A list of IInjectors, each one describing which traits it is concerned with.</haxe_doc>
		</getInjectors>
		<group public="1" set="null">
			<c path="composure.core.ComposeGroup"/>
			<meta/>
			<haxe_doc>* The group to which this item is added. This is a method of convenience,
	 * and should return the 'item' property cast as a ComposeGroup.</haxe_doc>
		</group>
		<item public="1" set="set_item">
			<c path="composure.core.ComposeItem"/>
			<meta/>
			<haxe_doc>* The item which this trait is added to. Do not set this manually,
	 * the ComposeItem class sets this property automatically when the 
	 * trait is added to it.</haxe_doc>
		</item>
		<haxe_doc>* ITrait can be implemented by traits to give them access to the item
 * to which they are added. It also allows traits to return a list of 
 * injectors, which describe other traits (sibling, ascendant or descendant)
 * which this trait should gain access to.
 * 
 * @author		Tom Byrne</haxe_doc>
		<meta/>
	</class>
	<class path="composure.traits.AbstractTrait" params="" file="../src/composure/traits/AbstractTrait.hx">
		<implements path="composure.traits.ITrait"/>
		<removeInjector public="1" set="method" line="195">
			<f a="injector">
				<c path="composure.injectors.IInjector"/>
				<e path="Void"/>
			</f>
			<meta/>
			<haxe_doc>* Removes an injector from this trait.
	 * @see addInjector
	 * @param injector The injector to remove from this trait.</haxe_doc>
		</removeInjector>
		<addInjector public="1" set="method" line="181">
			<f a="injector">
				<c path="composure.injectors.IInjector"/>
				<e path="Void"/>
			</f>
			<meta/>
			<haxe_doc>* Adds an injector to this trait, each injector is a description of a certain other trait
	 * that this trait would like access to.
	 * @param injector The injector to add to this trait.</haxe_doc>
		</addInjector>
		<getInjectors public="1" set="method" line="117">
			<f a=""><t path="Iterable"><c path="composure.injectors.IInjector"/></t></f>
			<meta/>
			<haxe_doc>* This provides a way for this trait to gain access to other traits in the
	 * application.
	 * @return A list of IInjectors, each one describing which traits it is concerned with.</haxe_doc>
		</getInjectors>
		<onItemAdd set="method" line="108">
			<f a=""><e path="Void"/></f>
			<meta/>
		</onItemAdd>
		<onItemRemove set="method" line="105">
			<f a=""><e path="Void"/></f>
			<meta/>
		</onItemRemove>
		<_ownerTrait>
			<d/>
			<meta/>
		</_ownerTrait>
		<_groupOnly>
			<e path="Bool"/>
			<meta/>
			<haxe_doc>* Set to true to force Trait to only be added for groups.</haxe_doc>
		</_groupOnly>
		<_childItems>
			<c path="org.tbyrne.collections.UniqueList"><c path="composure.core.ComposeItem"/></c>
			<meta/>
		</_childItems>
		<_siblingTraits>
			<c path="org.tbyrne.collections.UniqueList"><d/></c>
			<meta/>
		</_siblingTraits>
		<_injectors>
			<c path="org.tbyrne.collections.UniqueList"><c path="composure.injectors.IInjector"/></c>
			<meta/>
		</_injectors>
		<set_item set="method" line="40">
			<f a="value">
				<c path="composure.core.ComposeItem"/>
				<c path="composure.core.ComposeItem"/>
			</f>
			<meta/>
		</set_item>
		<item public="1" set="set_item">
			<c path="composure.core.ComposeItem"/>
			<meta/>
			<haxe_doc>* The item which this trait is added to. Do not set this manually,
	 * the ComposeItem class sets this property automatically when the 
	 * trait is added to it.</haxe_doc>
		</item>
		<group public="1" set="null">
			<c path="composure.core.ComposeGroup"/>
			<meta/>
			<haxe_doc>* The group to which this item is added. This is a method of convenience,
	 * and returns the 'item' property cast as a ComposeGroup.</haxe_doc>
		</group>
		<new public="1" set="method" line="97">
			<f a="?ownerTrait">
				<d/>
				<e path="Void"/>
			</f>
			<meta/>
			<haxe_doc>* @param ownerTrait When using this Class as a Proxied Trait, pass through the actual trait
	 * object as the first parameter.</haxe_doc>
		</new>
		<haxe_doc><![CDATA[* The AbstractTrait class can be extended by any trait to gain access
 * to the trait to which it is added. It also allows traits to access
 * other traits in the application either via the injection metadata
 * or via manually adding injectors via the addInjector method.<br/>
 * <br/>
 * If, for whatever reason, it is not possible or convenient to extend 
 * AbstractTrait, it is also possible to instantiate it within your trait
 * (passing <code>this</code> in as the constructor argument) and returning this
 * instance via a <code>getProxiedTrait</code> method. To use injection metadata in
 * this situation you must also add the <code>@build(composure.macro.InjectorMacro.inject())</code>
 * metadata to your class.
 * 
 * @author		Tom Byrne]]></haxe_doc>
		<meta>
			<m n=":autoBuild"><e>'???'</e></m>
			<m n=":autoBuild"><e>'???'</e></m>
		</meta>
	</class>
	<typedef path="composure.traits.TraitPair" params="TraitType" file="../src/composure/traits/ITrait.hx" module="composure.traits.ITrait"><a>
	<trait><c path="composure.traits.TraitPair.TraitType"/></trait>
	<item><c path="composure.core.ComposeItem"/></item>
</a></typedef>
	<class path="composure.traits.TraitCollection" params="" file="../src/composure/traits/TraitCollection.hx">
		<get_traitRemoved set="method" line="28">
			<f a=""><c path="msignal.Signal1"><t path="composure.traits.TraitPair"><d/></t></c></f>
			<meta/>
		</get_traitRemoved>
		<_traitRemoved>
			<c path="msignal.Signal1"><t path="composure.traits.TraitPair"><d/></t></c>
			<meta/>
		</_traitRemoved>
		<get_traitAdded set="method" line="25">
			<f a=""><c path="msignal.Signal1"><t path="composure.traits.TraitPair"><d/></t></c></f>
			<meta/>
		</get_traitAdded>
		<_traitAdded>
			<c path="msignal.Signal1"><t path="composure.traits.TraitPair"><d/></t></c>
			<meta/>
		</_traitAdded>
		<removeTrait public="1" set="method" line="173">
			<f a="traitPair">
				<t path="composure.traits.TraitPair"><d/></t>
				<e path="Void"/>
			</f>
			<meta/>
		</removeTrait>
		<addTrait public="1" set="method" line="165">
			<f a="traitPair">
				<t path="composure.traits.TraitPair"><d/></t>
				<e path="Void"/>
			</f>
			<meta/>
		</addTrait>
		<validateCache public="1" params="TraitType" set="method" line="70">
			<f a="matchType">
				<c path="Class"><c path="validateCache.TraitType"/></c>
				<c path="composure.traits._TraitCollection.TraitTypeCache"><c path="validateCache.TraitType"/></c>
			</f>
			<meta/>
		</validateCache>
		<getTrait public="1" params="TraitType" set="method" line="47">
			<f a="TraitType">
				<c path="Class"><c path="getTrait.TraitType"/></c>
				<c path="getTrait.TraitType"/>
			</f>
			<meta/>
		</getTrait>
		<traitPairs public="1" set="null">
			<c path="org.tbyrne.collections.UniqueList"><t path="composure.traits.TraitPair"><d/></t></c>
			<meta/>
		</traitPairs>
		<_traitTypeCache>
			<c path="Hash"><c path="composure.traits._TraitCollection.TraitTypeCache"><d/></c></c>
			<meta/>
		</_traitTypeCache>
		<_testSignal>
			<c path="msignal.Signal1"><d/></c>
			<meta/>
		</_testSignal>
		<get_testSignal set="method" line="31">
			<f a=""><c path="msignal.Signal1"><d/></c></f>
			<meta/>
		</get_testSignal>
		<testSignal public="1" get="get_testSignal" set="null">
			<c path="msignal.Signal1"><d/></c>
			<meta/>
		</testSignal>
		<traitRemoved public="1" get="get_traitRemoved" set="null">
			<c path="msignal.Signal1"><t path="composure.traits.TraitPair"><d/></t></c>
			<meta><m n="lazyInst"/></meta>
		</traitRemoved>
		<traitAdded public="1" get="get_traitAdded" set="null">
			<c path="msignal.Signal1"><t path="composure.traits.TraitPair"><d/></t></c>
			<meta><m n="lazyInst"/></meta>
		</traitAdded>
		<new public="1" set="method" line="41">
			<f a=""><e path="Void"/></f>
			<meta/>
		</new>
		<haxe_doc>* The TraitCollection holds a collection of traits and has the
 * ability to compare them to a collection of injectors. This is 
 * used internally in Composure.
 * 
 * @author Tom Byrne</haxe_doc>
		<meta><m n=":build"><e>'???'</e></m></meta>
	</class>
	<class path="composure.traits._TraitCollection.TraitTypeCache" params="TraitType" file="../src/composure/traits/TraitCollection.hx" private="1" module="composure.traits.TraitCollection">
		<invalid public="1">
			<c path="org.tbyrne.collections.UniqueList"><t path="composure.traits.TraitPair"><c path="composure.traits._TraitCollection.TraitTypeCache.TraitType"/></t></c>
			<meta/>
		</invalid>
		<matched public="1">
			<c path="org.tbyrne.collections.UniqueList"><t path="composure.traits.TraitPair"><c path="composure.traits._TraitCollection.TraitTypeCache.TraitType"/></t></c>
			<meta/>
		</matched>
		<getTraitsList public="1">
			<c path="org.tbyrne.collections.UniqueList"><c path="composure.traits._TraitCollection.TraitTypeCache.TraitType"/></c>
			<meta/>
		</getTraitsList>
		<getTraits public="1">
			<t path="Iterable"><c path="composure.traits._TraitCollection.TraitTypeCache.TraitType"/></t>
			<meta/>
		</getTraits>
		<getTrait public="1">
			<c path="composure.traits._TraitCollection.TraitTypeCache.TraitType"/>
			<meta/>
		</getTrait>
		<methodCachesSafe public="1">
			<e path="Bool"/>
			<meta/>
		</methodCachesSafe>
		<new public="1" set="method" line="195">
			<f a=""><e path="Void"/></f>
			<meta/>
		</new>
		<meta/>
	</class>
	<class path="composure.utilTraits.Furnisher" params="" file="../src/composure/utilTraits/Furnisher.hx">
		<extends path="composure.traits.AbstractTrait"/>
		<unregisterItem set="method" line="308">
			<f a="trait:currItem:origItem">
				<d/>
				<c path="composure.core.ComposeItem"/>
				<c path="composure.core.ComposeItem"/>
				<e path="Void"/>
			</f>
			<meta/>
		</unregisterItem>
		<registerItem set="method" line="241">
			<f a="trait:origItem">
				<d/>
				<c path="composure.core.ComposeItem"/>
				<c path="composure.core.ComposeItem"/>
			</f>
			<meta/>
		</registerItem>
		<getItem set="method" line="238">
			<f a="trait">
				<d/>
				<c path="composure.core.ComposeItem"/>
			</f>
			<meta/>
		</getItem>
		<testRules set="method" line="222">
			<f a="foundTrait:item:rules">
				<d/>
				<c path="composure.core.ComposeItem"/>
				<c path="Array"><e path="composure.utilTraits.AddRule"/></c>
				<e path="Bool"/>
			</f>
			<meta/>
		</testRules>
		<getTrait set="method" line="205">
			<f a="foundTrait:item:addTrait">
				<d/>
				<c path="composure.core.ComposeItem"/>
				<e path="composure.utilTraits.AddTrait"/>
				<d/>
			</f>
			<meta/>
		</getTrait>
		<addTrait public="1" set="method" line="189">
			<f a="addTrait">
				<e path="composure.utilTraits.AddTrait"/>
				<e path="Void"/>
			</f>
			<meta/>
		</addTrait>
		<onConcernedTraitRemoved set="method" line="168">
			<f a="trait:currItem">
				<d/>
				<c path="composure.core.ComposeItem"/>
				<e path="Void"/>
			</f>
			<meta/>
		</onConcernedTraitRemoved>
		<onConcernedTraitAdded set="method" line="143">
			<f a="trait:origItem">
				<d/>
				<c path="composure.core.ComposeItem"/>
				<e path="Void"/>
			</f>
			<meta/>
		</onConcernedTraitAdded>
		<_ignoreTraitChanges>
			<e path="Bool"/>
			<meta/>
		</_ignoreTraitChanges>
		<_originalParents>
			<t path="cmtc.ds.hash.ObjectHash">
				<d/>
				<c path="composure.core.ComposeGroup"/>
			</t>
			<meta/>
		</_originalParents>
		<_originalItems>
			<t path="cmtc.ds.hash.ObjectHash">
				<d/>
				<c path="composure.core.ComposeItem"/>
			</t>
			<meta/>
		</_originalItems>
		<_traitToItems>
			<t path="cmtc.ds.hash.ObjectHash">
				<d/>
				<c path="composure.core.ComposeItem"/>
			</t>
			<meta/>
		</_traitToItems>
		<_addedTraits>
			<t path="cmtc.ds.hash.ObjectHash">
				<d/>
				<c path="Array"><d/></c>
			</t>
			<meta/>
		</_addedTraits>
		<_foundTraits>
			<c path="org.tbyrne.collections.UniqueList"><d/></c>
			<meta/>
		</_foundTraits>
		<_addTraits>
			<c path="org.tbyrne.collections.UniqueList"><e path="composure.utilTraits.AddTrait"/></c>
			<meta/>
		</_addTraits>
		<_injector>
			<c path="composure.injectors.Injector"/>
			<meta/>
		</_injector>
		<_addType>
			<e path="composure.utilTraits.AddType"/>
			<meta/>
		</_addType>
		<set_searchAscendants set="method" line="104">
			<f a="value">
				<e path="Bool"/>
				<e path="Bool"/>
			</f>
			<meta/>
		</set_searchAscendants>
		<searchAscendants public="1" set="set_searchAscendants">
			<e path="Bool"/>
			<meta/>
		</searchAscendants>
		<set_searchDescendants set="method" line="94">
			<f a="value">
				<e path="Bool"/>
				<e path="Bool"/>
			</f>
			<meta/>
		</set_searchDescendants>
		<searchDescendants public="1" set="set_searchDescendants">
			<e path="Bool"/>
			<meta/>
		</searchDescendants>
		<set_searchSiblings set="method" line="84">
			<f a="value">
				<e path="Bool"/>
				<e path="Bool"/>
			</f>
			<meta/>
		</set_searchSiblings>
		<searchSiblings public="1" set="set_searchSiblings">
			<e path="Bool"/>
			<meta/>
		</searchSiblings>
		<set_concernedTraitType set="method" line="69">
			<f a="value">
				<d/>
				<d/>
			</f>
			<meta/>
		</set_concernedTraitType>
		<concernedTraitType public="1" set="set_concernedTraitType">
			<d/>
			<meta/>
		</concernedTraitType>
		<new public="1" set="method" line="125"><f a="?concernedTraitType:?addTraits:?addType:?searchSiblings:?searchDescendants:?searchAscendants">
	<d/>
	<c path="Array"><e path="composure.utilTraits.AddTrait"/></c>
	<e path="composure.utilTraits.AddType"/>
	<e path="Bool"/>
	<e path="Bool"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></new>
		<haxe_doc><![CDATA[* The Furnisher class is used to add traits to an item in response
 * to a certain type of trait being added to the item.<br/>
 * <br/>
 * This is very useful when creating interchangable libraries. For example,
 * when wanting to add a platform specific display trait to a items in the
 * presence of another trait:
 * <pre><code>
 * var furnisher:Furnisher = new Furnisher(RectangleInfo, [TType(HtmlRectangleDisplay)]);
 * stage.addTrait(furnisher);
 * </code></pre>
 * In this example, any item which has a RectangleInfo trait added to it (representing
 * a rectangle's position and size) will also get a HtmlRectangleDisplay trait added to
 * it. The HtmlRectangleDisplay object can then access the RectangleInfo's size and 
 * position properties using injection metadata. In this way, the display method for
 * all rectangles could be quickly and easily be swapped out for another display trait.
 * 
 * @author Tom Byrne]]></haxe_doc>
		<meta>
			<m n=":build"><e>'???'</e></m>
			<m n=":autoBuild"><e>'???'</e></m>
			<m n=":build"><e>'???'</e></m>
			<m n=":autoBuild"><e>'???'</e></m>
			<m n=":keep"/>
		</meta>
	</class>
	<enum path="composure.utilTraits.AddTrait" params="" file="../src/composure/utilTraits/Furnisher.hx" module="composure.utilTraits.Furnisher">
		<TType a="t:?rules">
			<c path="Class"><d/></c>
			<c path="Array"><e path="composure.utilTraits.AddRule"/></c>
		</TType>
		<TInst a="t:?rules">
			<d/>
			<c path="Array"><e path="composure.utilTraits.AddRule"/></c>
		</TInst>
		<TFact a="f:?rules">
			<f a=""><d/></f>
			<c path="Array"><e path="composure.utilTraits.AddRule"/></c>
		</TFact>
		<meta/>
	</enum>
	<enum path="composure.utilTraits.AddRule" params="" file="../src/composure/utilTraits/Furnisher.hx" module="composure.utilTraits.Furnisher">
		<UnlessHas a="t"><c path="Class"><d/></c></UnlessHas>
		<IfHas a="t"><c path="Class"><d/></c></IfHas>
		<meta/>
	</enum>
	<enum path="composure.utilTraits.AddType" params="" file="../src/composure/utilTraits/Furnisher.hx" module="composure.utilTraits.Furnisher">
		<traitSibling a="?adoptMatchedTrait"><e path="Bool"/></traitSibling>
		<traitItem/>
		<traitChild a="?adoptMatchedTrait"><e path="Bool"/></traitChild>
		<selfSibling a="?adoptMatchedTrait"><e path="Bool"/></selfSibling>
		<selfItem a="?adoptMatchedTrait"><e path="Bool"/></selfItem>
		<selfChild a="?adoptMatchedTrait"><e path="Bool"/></selfChild>
		<itemSibling a="item:?adoptMatchedTrait">
			<c path="composure.core.ComposeItem"/>
			<e path="Bool"/>
		</itemSibling>
		<itemChild a="group:?adoptMatchedTrait">
			<c path="composure.core.ComposeGroup"/>
			<e path="Bool"/>
		</itemChild>
		<item a="item:?adoptMatchedTrait">
			<c path="composure.core.ComposeItem"/>
			<e path="Bool"/>
		</item>
		<adoptItem a="newParent:?adoptMatchedTrait">
			<c path="composure.core.ComposeGroup"/>
			<e path="Bool"/>
		</adoptItem>
		<meta/>
	</enum>
	<class path="composure.utilTraits.TraitTypeLimiter" params="" file="../src/composure/utilTraits/TraitTypeLimiter.hx">
		<extends path="composure.traits.AbstractTrait"/>
		<attemptTransmit set="method" line="169">
			<f a="toTrait:fromTrait">
				<d/>
				<d/>
				<e path="Void"/>
			</f>
			<meta/>
		</attemptTransmit>
		<reAddTrait set="method" line="157">
			<f a="item:added:removed">
				<c path="composure.core.ComposeItem"/>
				<c path="Array"><d/></c>
				<c path="Array"><d/></c>
				<e path="Void"/>
			</f>
			<meta/>
		</reAddTrait>
		<onTraitRemoved set="method" line="143">
			<f a="trait:item">
				<d/>
				<c path="composure.core.ComposeItem"/>
				<e path="Void"/>
			</f>
			<meta/>
		</onTraitRemoved>
		<onTraitAdded set="method" line="110">
			<f a="trait:item">
				<d/>
				<c path="composure.core.ComposeItem"/>
				<e path="Void"/>
			</f>
			<meta/>
		</onTraitAdded>
		<checkTraits set="method" line="94">
			<f a=""><e path="Void"/></f>
			<meta/>
		</checkTraits>
		<reAddAll set="method" line="78">
			<f a=""><e path="Void"/></f>
			<meta/>
		</reAddAll>
		<setConcern public="1" set="method" line="62">
			<f a="traitType:?siblings:?descendants:?ascendants">
				<c path="Class"><d/></c>
				<e path="Bool"/>
				<e path="Bool"/>
				<e path="Bool"/>
				<e path="Void"/>
			</f>
			<meta/>
		</setConcern>
		<_ignoreChanges>
			<e path="Bool"/>
			<meta/>
		</_ignoreChanges>
		<_removed>
			<t path="cmtc.ds.hash.ObjectHash">
				<c path="composure.core.ComposeItem"/>
				<c path="Array"><d/></c>
			</t>
			<meta/>
		</_removed>
		<_added>
			<t path="cmtc.ds.hash.ObjectHash">
				<c path="composure.core.ComposeItem"/>
				<c path="Array"><d/></c>
			</t>
			<meta/>
		</_added>
		<added>
			<e path="Bool"/>
			<meta/>
		</added>
		<injector>
			<c path="composure.injectors.Injector"/>
			<meta/>
		</injector>
		<policy public="1">
			<e path="composure.utilTraits.LimitPolicy"/>
			<meta/>
		</policy>
		<set_maxCount set="method" line="26">
			<f a="value">
				<c path="Int"/>
				<c path="Int"/>
			</f>
			<meta/>
		</set_maxCount>
		<maxCount public="1" set="set_maxCount">
			<c path="Int"/>
			<meta/>
		</maxCount>
		<new public="1" set="method" line="44"><f a="?traitType:?policy:?maxCount:?siblings:?descendants:?ascendants">
	<c path="Class"><d/></c>
	<e path="composure.utilTraits.LimitPolicy"/>
	<c path="Int"/>
	<e path="Bool"/>
	<e path="Bool"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></new>
		<haxe_doc><![CDATA[* TraitTypeLimiter is used to restrict the amount of a certain type of trait
 * which can be added to a certain item. It could be used, for example, to limit the
 * amount of IMatrixTransform traits on a certain item to 1.<br/>
 * If the initially added trait (i.e. the last one added before maxCount was reached)
 * implements ITransmittableTrait, then the removed trait will be passed into this
 * trait using the transmitFrom method, this allows the existing trait to copy over
 * information from the new trait.<br/>
 * Typically this class is used when the end user has control over trait structures
 * to enforce certain rules.
 * @author Tom Byrne]]></haxe_doc>
		<meta>
			<m n=":build"><e>'???'</e></m>
			<m n=":autoBuild"><e>'???'</e></m>
			<m n=":build"><e>'???'</e></m>
			<m n=":autoBuild"><e>'???'</e></m>
			<m n=":keep"/>
		</meta>
	</class>
	<enum path="composure.utilTraits.LimitPolicy" params="" file="../src/composure/utilTraits/TraitTypeLimiter.hx" module="composure.utilTraits.TraitTypeLimiter">
		<FirstInLastOut/>
		<FirstInFirstOut/>
		<meta/>
	</enum>
	<class path="composure.utilTraits.ITransmittableTrait" params="" file="../src/composure/utilTraits/TraitTypeLimiter.hx" module="composure.utilTraits.TraitTypeLimiter" interface="1">
		<transmitFrom public="1" set="method"><f a="trait">
	<d/>
	<e path="Void"/>
</f></transmitFrom>
		<meta/>
	</class>
	<class path="composureTest.ClassIncluder" params="" file="../testSrc/composureTest/ClassIncluder.hx">
		<main set="method" line="13" static="1">
			<f a=""><e path="Void"/></f>
			<meta/>
		</main>
		<meta/>
	</class>
	<class path="flash.events.IEventDispatcher" params="" file="C:\Motion-Twin\haxe\std/flash/events/IEventDispatcher.hx" extern="1" interface="1">
		<willTrigger public="1" set="method"><f a="type">
	<c path="String"/>
	<e path="Bool"/>
</f></willTrigger>
		<removeEventListener public="1" set="method"><f a="type:listener:?useCapture">
	<c path="String"/>
	<f a="">
		<d/>
		<e path="Void"/>
	</f>
	<e path="Bool"/>
	<e path="Void"/>
</f></removeEventListener>
		<hasEventListener public="1" set="method"><f a="type">
	<c path="String"/>
	<e path="Bool"/>
</f></hasEventListener>
		<dispatchEvent public="1" set="method"><f a="event">
	<c path="flash.events.Event"/>
	<e path="Bool"/>
</f></dispatchEvent>
		<addEventListener public="1" set="method"><f a="type:listener:?useCapture:?priority:?useWeakReference">
	<c path="String"/>
	<f a="">
		<d/>
		<e path="Void"/>
	</f>
	<e path="Bool"/>
	<c path="Int"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></addEventListener>
	</class>
	<class path="flash.events.EventDispatcher" params="" file="C:\Motion-Twin\haxe\std/flash/events/EventDispatcher.hx" extern="1">
		<implements path="flash.events.IEventDispatcher"/>
		<willTrigger public="1" set="method">
			<f a="type">
				<c path="String"/>
				<e path="Bool"/>
			</f>
			<meta/>
		</willTrigger>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<removeEventListener public="1" set="method">
			<f a="type:listener:?useCapture">
				<c path="String"/>
				<f a="">
					<d/>
					<e path="Void"/>
				</f>
				<e path="Bool"/>
				<e path="Void"/>
			</f>
			<meta/>
		</removeEventListener>
		<hasEventListener public="1" set="method">
			<f a="type">
				<c path="String"/>
				<e path="Bool"/>
			</f>
			<meta/>
		</hasEventListener>
		<dispatchEvent public="1" set="method">
			<f a="event">
				<c path="flash.events.Event"/>
				<e path="Bool"/>
			</f>
			<meta/>
		</dispatchEvent>
		<addEventListener public="1" set="method">
			<f a="type:listener:?useCapture:?priority:?useWeakReference">
				<c path="String"/>
				<f a="">
					<d/>
					<e path="Void"/>
				</f>
				<e path="Bool"/>
				<c path="Int"/>
				<e path="Bool"/>
				<e path="Void"/>
			</f>
			<meta/>
		</addEventListener>
		<new public="1" set="method"><f a="?target">
	<c path="flash.events.IEventDispatcher"/>
	<e path="Void"/>
</f></new>
		<meta/>
	</class>
	<class path="flash.display.IBitmapDrawable" params="" file="C:\Motion-Twin\haxe\std/flash/display/IBitmapDrawable.hx" extern="1" interface="1"/>
	<class path="flash.display.DisplayObject" params="" file="C:\Motion-Twin\haxe\std/flash/display/DisplayObject.hx" extern="1">
		<extends path="flash.events.EventDispatcher"/>
		<implements path="flash.display.IBitmapDrawable"/>
		<localToGlobal public="1" set="method"><f a="point">
	<c path="flash.geom.Point"/>
	<c path="flash.geom.Point"/>
</f></localToGlobal>
		<local3DToGlobal public="1">
			<f a="point3d">
				<c path="flash.geom.Vector3D"/>
				<c path="flash.geom.Point"/>
			</f>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</local3DToGlobal>
		<hitTestPoint public="1" set="method"><f a="x:y:?shapeFlag">
	<c path="Float"/>
	<c path="Float"/>
	<e path="Bool"/>
	<e path="Bool"/>
</f></hitTestPoint>
		<hitTestObject public="1" set="method"><f a="obj">
	<c path="flash.display.DisplayObject"/>
	<e path="Bool"/>
</f></hitTestObject>
		<globalToLocal3D public="1">
			<f a="point">
				<c path="flash.geom.Point"/>
				<c path="flash.geom.Vector3D"/>
			</f>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</globalToLocal3D>
		<globalToLocal public="1" set="method"><f a="point">
	<c path="flash.geom.Point"/>
	<c path="flash.geom.Point"/>
</f></globalToLocal>
		<getRect public="1" set="method"><f a="targetCoordinateSpace">
	<c path="flash.display.DisplayObject"/>
	<c path="flash.geom.Rectangle"/>
</f></getRect>
		<getBounds public="1" set="method"><f a="targetCoordinateSpace">
	<c path="flash.display.DisplayObject"/>
	<c path="flash.geom.Rectangle"/>
</f></getBounds>
		<z public="1">
			<c path="Float"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</z>
		<y public="1">
			<c path="Float"/>
			<meta/>
		</y>
		<x public="1">
			<c path="Float"/>
			<meta/>
		</x>
		<width public="1">
			<c path="Float"/>
			<meta/>
		</width>
		<visible public="1">
			<e path="Bool"/>
			<meta/>
		</visible>
		<transform public="1">
			<c path="flash.geom.Transform"/>
			<meta/>
		</transform>
		<stage public="1" set="null">
			<c path="flash.display.Stage"/>
			<meta/>
		</stage>
		<scrollRect public="1">
			<c path="flash.geom.Rectangle"/>
			<meta/>
		</scrollRect>
		<scaleZ public="1">
			<c path="Float"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</scaleZ>
		<scaleY public="1">
			<c path="Float"/>
			<meta/>
		</scaleY>
		<scaleX public="1">
			<c path="Float"/>
			<meta/>
		</scaleX>
		<scale9Grid public="1">
			<c path="flash.geom.Rectangle"/>
			<meta/>
		</scale9Grid>
		<rotationZ public="1">
			<c path="Float"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</rotationZ>
		<rotationY public="1">
			<c path="Float"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</rotationY>
		<rotationX public="1">
			<c path="Float"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</rotationX>
		<rotation public="1">
			<c path="Float"/>
			<meta/>
		</rotation>
		<root public="1" set="null">
			<c path="flash.display.DisplayObject"/>
			<meta/>
		</root>
		<parent public="1" set="null">
			<c path="flash.display.DisplayObjectContainer"/>
			<meta/>
		</parent>
		<opaqueBackground public="1">
			<t path="Null"><t path="UInt"/></t>
			<meta/>
		</opaqueBackground>
		<name public="1">
			<c path="String"/>
			<meta/>
		</name>
		<mouseY public="1" set="null">
			<c path="Float"/>
			<meta/>
		</mouseY>
		<mouseX public="1" set="null">
			<c path="Float"/>
			<meta/>
		</mouseX>
		<mask public="1">
			<c path="flash.display.DisplayObject"/>
			<meta/>
		</mask>
		<loaderInfo public="1" set="null">
			<c path="flash.display.LoaderInfo"/>
			<meta/>
		</loaderInfo>
		<height public="1">
			<c path="Float"/>
			<meta/>
		</height>
		<filters public="1">
			<c path="Array"><c path="flash.filters.BitmapFilter"/></c>
			<meta/>
		</filters>
		<cacheAsBitmap public="1">
			<e path="Bool"/>
			<meta/>
		</cacheAsBitmap>
		<blendShader public="1">
			<c path="flash.display.Shader"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</blendShader>
		<blendMode public="1">
			<e path="flash.display.BlendMode"/>
			<meta/>
		</blendMode>
		<alpha public="1">
			<c path="Float"/>
			<meta/>
		</alpha>
		<accessibilityProperties public="1">
			<c path="flash.accessibility.AccessibilityProperties"/>
			<meta/>
		</accessibilityProperties>
		<meta/>
	</class>
	<class path="flash.display.InteractiveObject" params="" file="C:\Motion-Twin\haxe\std/flash/display/InteractiveObject.hx" extern="1">
		<extends path="flash.display.DisplayObject"/>
		<requestSoftKeyboard public="1">
			<f a=""><e path="Bool"/></f>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</requestSoftKeyboard>
		<tabIndex public="1">
			<c path="Int"/>
			<meta/>
		</tabIndex>
		<tabEnabled public="1">
			<e path="Bool"/>
			<meta/>
		</tabEnabled>
		<softKeyboardInputAreaOfInterest public="1">
			<c path="flash.geom.Rectangle"/>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</softKeyboardInputAreaOfInterest>
		<needsSoftKeyboard public="1">
			<e path="Bool"/>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</needsSoftKeyboard>
		<mouseEnabled public="1">
			<e path="Bool"/>
			<meta/>
		</mouseEnabled>
		<focusRect public="1">
			<d/>
			<meta/>
		</focusRect>
		<doubleClickEnabled public="1">
			<e path="Bool"/>
			<meta/>
		</doubleClickEnabled>
		<contextMenu public="1">
			<c path="flash.ui.ContextMenu"/>
			<meta/>
		</contextMenu>
		<accessibilityImplementation public="1">
			<c path="flash.accessibility.AccessibilityImplementation"/>
			<meta/>
		</accessibilityImplementation>
		<new public="1" set="method"><f a=""><e path="Void"/></f></new>
		<meta/>
	</class>
	<class path="flash.display.DisplayObjectContainer" params="" file="C:\Motion-Twin\haxe\std/flash/display/DisplayObjectContainer.hx" extern="1">
		<extends path="flash.display.InteractiveObject"/>
		<swapChildrenAt public="1" set="method"><f a="index1:index2">
	<c path="Int"/>
	<c path="Int"/>
	<e path="Void"/>
</f></swapChildrenAt>
		<swapChildren public="1" set="method"><f a="child1:child2">
	<c path="flash.display.DisplayObject"/>
	<c path="flash.display.DisplayObject"/>
	<e path="Void"/>
</f></swapChildren>
		<setChildIndex public="1" set="method"><f a="child:index">
	<c path="flash.display.DisplayObject"/>
	<c path="Int"/>
	<e path="Void"/>
</f></setChildIndex>
		<removeChildren public="1">
			<f a="?beginIndex:?endIndex">
				<c path="Int"/>
				<c path="Int"/>
				<e path="Void"/>
			</f>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</removeChildren>
		<removeChildAt public="1" set="method"><f a="index">
	<c path="Int"/>
	<c path="flash.display.DisplayObject"/>
</f></removeChildAt>
		<removeChild public="1" set="method"><f a="child">
	<c path="flash.display.DisplayObject"/>
	<c path="flash.display.DisplayObject"/>
</f></removeChild>
		<getObjectsUnderPoint public="1" set="method"><f a="point">
	<c path="flash.geom.Point"/>
	<c path="Array"><c path="flash.display.DisplayObject"/></c>
</f></getObjectsUnderPoint>
		<getChildIndex public="1" set="method"><f a="child">
	<c path="flash.display.DisplayObject"/>
	<c path="Int"/>
</f></getChildIndex>
		<getChildByName public="1" set="method"><f a="name">
	<c path="String"/>
	<c path="flash.display.DisplayObject"/>
</f></getChildByName>
		<getChildAt public="1" set="method"><f a="index">
	<c path="Int"/>
	<c path="flash.display.DisplayObject"/>
</f></getChildAt>
		<contains public="1" set="method"><f a="child">
	<c path="flash.display.DisplayObject"/>
	<e path="Bool"/>
</f></contains>
		<areInaccessibleObjectsUnderPoint public="1" set="method"><f a="point">
	<c path="flash.geom.Point"/>
	<e path="Bool"/>
</f></areInaccessibleObjectsUnderPoint>
		<addChildAt public="1" set="method"><f a="child:index">
	<c path="flash.display.DisplayObject"/>
	<c path="Int"/>
	<c path="flash.display.DisplayObject"/>
</f></addChildAt>
		<addChild public="1" set="method"><f a="child">
	<c path="flash.display.DisplayObject"/>
	<c path="flash.display.DisplayObject"/>
</f></addChild>
		<textSnapshot public="1" set="null">
			<c path="flash.text.TextSnapshot"/>
			<meta/>
		</textSnapshot>
		<tabChildren public="1">
			<e path="Bool"/>
			<meta/>
		</tabChildren>
		<numChildren public="1" set="null">
			<c path="Int"/>
			<meta/>
		</numChildren>
		<mouseChildren public="1">
			<e path="Bool"/>
			<meta/>
		</mouseChildren>
		<new public="1" set="method"><f a=""><e path="Void"/></f></new>
		<meta/>
	</class>
	<class path="flash.display.Sprite" params="" file="C:\Motion-Twin\haxe\std/flash/display/Sprite.hx" extern="1">
		<extends path="flash.display.DisplayObjectContainer"/>
		<stopTouchDrag public="1">
			<f a="touchPointID">
				<c path="Int"/>
				<e path="Void"/>
			</f>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</stopTouchDrag>
		<stopDrag public="1" set="method"><f a=""><e path="Void"/></f></stopDrag>
		<startTouchDrag public="1">
			<f a="touchPointID:?lockCenter:?bounds">
				<c path="Int"/>
				<e path="Bool"/>
				<c path="flash.geom.Rectangle"/>
				<e path="Void"/>
			</f>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</startTouchDrag>
		<startDrag public="1" set="method"><f a="?lockCenter:?bounds">
	<e path="Bool"/>
	<c path="flash.geom.Rectangle"/>
	<e path="Void"/>
</f></startDrag>
		<useHandCursor public="1">
			<e path="Bool"/>
			<meta/>
		</useHandCursor>
		<soundTransform public="1">
			<c path="flash.media.SoundTransform"/>
			<meta/>
		</soundTransform>
		<hitArea public="1">
			<c path="flash.display.Sprite"/>
			<meta/>
		</hitArea>
		<graphics public="1" set="null">
			<c path="flash.display.Graphics"/>
			<meta/>
		</graphics>
		<dropTarget public="1" set="null">
			<c path="flash.display.DisplayObject"/>
			<meta/>
		</dropTarget>
		<buttonMode public="1">
			<e path="Bool"/>
			<meta/>
		</buttonMode>
		<new public="1" set="method"><f a=""><e path="Void"/></f></new>
		<meta/>
	</class>
	<class path="flash.display.MovieClip" params="" file="C:\Motion-Twin\haxe\std/flash/display/MovieClip.hx" extern="1">
		<extends path="flash.display.Sprite"/>
		<stop public="1" set="method"><f a=""><e path="Void"/></f></stop>
		<prevScene public="1" set="method"><f a=""><e path="Void"/></f></prevScene>
		<prevFrame public="1" set="method"><f a=""><e path="Void"/></f></prevFrame>
		<play public="1" set="method"><f a=""><e path="Void"/></f></play>
		<nextScene public="1" set="method"><f a=""><e path="Void"/></f></nextScene>
		<nextFrame public="1" set="method"><f a=""><e path="Void"/></f></nextFrame>
		<gotoAndStop public="1" set="method"><f a="frame:?scene">
	<d/>
	<c path="String"/>
	<e path="Void"/>
</f></gotoAndStop>
		<gotoAndPlay public="1" set="method"><f a="frame:?scene">
	<d/>
	<c path="String"/>
	<e path="Void"/>
</f></gotoAndPlay>
		<addFrameScript public="1" set="method"><f a="?p1:?p2:?p3:?p4:?p5">
	<d/>
	<d/>
	<d/>
	<d/>
	<d/>
	<e path="Void"/>
</f></addFrameScript>
		<trackAsMenu public="1">
			<e path="Bool"/>
			<meta/>
		</trackAsMenu>
		<totalFrames public="1" set="null">
			<c path="Int"/>
			<meta/>
		</totalFrames>
		<scenes public="1" set="null">
			<c path="Array"><c path="flash.display.Scene"/></c>
			<meta/>
		</scenes>
		<isPlaying public="1">
			<e path="Bool"/>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</isPlaying>
		<framesLoaded public="1" set="null">
			<c path="Int"/>
			<meta/>
		</framesLoaded>
		<enabled public="1">
			<e path="Bool"/>
			<meta/>
		</enabled>
		<currentScene public="1" set="null">
			<c path="flash.display.Scene"/>
			<meta/>
		</currentScene>
		<currentLabels public="1" set="null">
			<c path="Array"><c path="flash.display.FrameLabel"/></c>
			<meta/>
		</currentLabels>
		<currentLabel public="1" set="null">
			<c path="String"/>
			<meta/>
		</currentLabel>
		<currentFrameLabel public="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</currentFrameLabel>
		<currentFrame public="1" set="null">
			<c path="Int"/>
			<meta/>
		</currentFrame>
		<new public="1" set="method"><f a=""><e path="Void"/></f></new>
		<meta/>
		<haxe_dynamic><d/></haxe_dynamic>
	</class>
	<class path="flash.Boot" params="" file="C:\Motion-Twin\haxe\std/flash/Boot.hx">
		<extends path="flash.display.MovieClip"/>
		<tf static="1">
			<c path="flash.text.TextField"/>
			<meta/>
		</tf>
		<lines static="1">
			<c path="Array"><c path="String"/></c>
			<meta/>
		</lines>
		<lastError static="1">
			<c path="flash.errors.Error"/>
			<meta/>
		</lastError>
		<skip_constructor public="1" line="54" static="1">
			<e path="Bool"/>
			<meta/>
		</skip_constructor>
		<enum_to_string public="1" set="method" line="86" static="1">
			<f a="e">
				<a>
					<tag><c path="String"/></tag>
					<params><c path="Array"><d/></c></params>
				</a>
				<c path="String"/>
			</f>
			<meta/>
		</enum_to_string>
		<__instanceof public="1" set="method" line="95" static="1">
			<f a="v:t">
				<d/>
				<d/>
				<e path="Bool"/>
			</f>
			<meta/>
		</__instanceof>
		<__clear_trace public="1" set="method" line="105" static="1">
			<f a=""><e path="Void"/></f>
			<meta/>
		</__clear_trace>
		<__set_trace_color public="1" set="method" line="113" static="1">
			<f a="rgb">
				<t path="UInt"/>
				<e path="Void"/>
			</f>
			<meta/>
		</__set_trace_color>
		<getTrace public="1" set="method" line="119" static="1">
			<f a=""><c path="flash.text.TextField"/></f>
			<meta/>
		</getTrace>
		<__trace public="1" set="method" line="147" static="1">
			<f a="v:pos">
				<d/>
				<t path="haxe.PosInfos"/>
				<e path="Void"/>
			</f>
			<meta/>
		</__trace>
		<__string_rec public="1" set="method" line="162" static="1">
			<f a="v:str">
				<d/>
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta/>
		</__string_rec>
		<__unprotect__ set="method" line="206" static="1">
			<f a="s">
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta/>
		</__unprotect__>
		<init set="method" line="82">
			<f a=""><e path="Void"/></f>
			<meta/>
		</init>
		<doInitDelay set="method" line="77">
			<f a="_">
				<unknown/>
				<e path="Void"/>
			</f>
			<meta/>
		</doInitDelay>
		<start set="method" line="56">
			<f a=""><e path="Void"/></f>
			<meta/>
		</start>
		<new public="1" set="method" line="48">
			<f a=""><e path="Void"/></f>
			<meta/>
		</new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="flash._Boot.RealBoot" params="" file="C:\Motion-Twin\haxe\std/flash/Boot.hx" private="1" module="flash.Boot">
		<extends path="flash.Boot"/>
		<init public="1" set="method" line="33" static="1">
			<f a="mc">
				<c path="flash.display.MovieClip"/>
				<e path="Void"/>
			</f>
			<meta/>
		</init>
		<new public="1" set="method" line="30">
			<f a=""><e path="Void"/></f>
			<meta/>
		</new>
		<meta><m n=":keep"/></meta>
		<haxe_dynamic><d/></haxe_dynamic>
	</class>
	<class path="flash.Lib" params="" file="C:\Motion-Twin\haxe\std/flash/Lib.hx">
		<current public="1" static="1">
			<c path="flash.display.MovieClip"/>
			<meta/>
		</current>
		<meta/>
	</class>
	<class path="flash.Vector" params="T" file="C:\Motion-Twin\haxe\std/flash/Vector.hx" extern="1">
		<ofArray public="1" params="T" line="26" static="1"><f a="v">
	<c path="Array"><c path="ofArray.T"/></c>
	<c path="flash.Vector"><c path="ofArray.T"/></c>
</f></ofArray>
		<convert public="1" params="T:U" line="30" static="1"><f a="v">
	<c path="flash.Vector"><c path="convert.T"/></c>
	<c path="flash.Vector"><c path="convert.U"/></c>
</f></convert>
		<lastIndexOf public="1" set="method"><f a="x:?from">
	<c path="flash.Vector.T"/>
	<c path="Int"/>
	<c path="Int"/>
</f></lastIndexOf>
		<indexOf public="1" set="method"><f a="x:?from">
	<c path="flash.Vector.T"/>
	<c path="Int"/>
	<c path="Int"/>
</f></indexOf>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<splice public="1" set="method"><f a="pos:len">
	<c path="Int"/>
	<c path="Int"/>
	<c path="flash.Vector"><c path="flash.Vector.T"/></c>
</f></splice>
		<sort public="1" set="method"><f a="f">
	<f a=":">
		<c path="flash.Vector.T"/>
		<c path="flash.Vector.T"/>
		<c path="Int"/>
	</f>
	<e path="Void"/>
</f></sort>
		<slice public="1" set="method"><f a="pos:?end">
	<c path="Int"/>
	<c path="Int"/>
	<c path="flash.Vector"><c path="flash.Vector.T"/></c>
</f></slice>
		<unshift public="1" set="method"><f a="x">
	<c path="flash.Vector.T"/>
	<e path="Void"/>
</f></unshift>
		<shift public="1" set="method"><f a=""><t path="Null"><c path="flash.Vector.T"/></t></f></shift>
		<reverse public="1" set="method"><f a=""><e path="Void"/></f></reverse>
		<push public="1" set="method"><f a="x">
	<c path="flash.Vector.T"/>
	<c path="Int"/>
</f></push>
		<pop public="1" set="method"><f a=""><t path="Null"><c path="flash.Vector.T"/></t></f></pop>
		<join public="1" set="method"><f a="sep">
	<c path="String"/>
	<c path="String"/>
</f></join>
		<concat public="1" set="method"><f a="?a">
	<c path="flash.Vector"><c path="flash.Vector.T"/></c>
	<c path="flash.Vector"><c path="flash.Vector.T"/></c>
</f></concat>
		<fixed public="1">
			<e path="Bool"/>
			<meta/>
		</fixed>
		<length public="1">
			<t path="UInt"/>
			<meta/>
		</length>
		<new public="1"><f a="?length:?fixed">
	<t path="UInt"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></new>
		<haxe_doc>The Vector class is very similar to Array but is only supported by the Flash Player 10+</haxe_doc>
		<meta><m n=":require"><e>flash10</e></m></meta>
	</class>
	<class path="flash.accessibility.AccessibilityImplementation" params="" file="C:\Motion-Twin\haxe\std/flash/accessibility/AccessibilityImplementation.hx" extern="1">
		<isLabeledBy public="1" set="method"><f a="labelBounds">
	<c path="flash.geom.Rectangle"/>
	<e path="Bool"/>
</f></isLabeledBy>
		<get_selectionAnchorIndex public="1" set="method"><f a=""><d/></f></get_selectionAnchorIndex>
		<get_selectionActiveIndex public="1" set="method"><f a=""><d/></f></get_selectionActiveIndex>
		<get_accValue public="1" set="method"><f a="childID">
	<t path="UInt"/>
	<c path="String"/>
</f></get_accValue>
		<get_accState public="1" set="method"><f a="childID">
	<t path="UInt"/>
	<t path="UInt"/>
</f></get_accState>
		<get_accSelection public="1" set="method"><f a=""><c path="Array"><d/></c></f></get_accSelection>
		<get_accRole public="1" set="method"><f a="childID">
	<t path="UInt"/>
	<t path="UInt"/>
</f></get_accRole>
		<get_accName public="1" set="method"><f a="childID">
	<t path="UInt"/>
	<c path="String"/>
</f></get_accName>
		<get_accFocus public="1" set="method"><f a=""><t path="UInt"/></f></get_accFocus>
		<get_accDefaultAction public="1" set="method"><f a="childID">
	<t path="UInt"/>
	<c path="String"/>
</f></get_accDefaultAction>
		<getChildIDArray public="1" set="method"><f a=""><c path="Array"><d/></c></f></getChildIDArray>
		<accSelect public="1" set="method"><f a="operation:childID">
	<t path="UInt"/>
	<t path="UInt"/>
	<e path="Void"/>
</f></accSelect>
		<accLocation public="1" set="method"><f a="childID">
	<t path="UInt"/>
	<d/>
</f></accLocation>
		<accDoDefaultAction public="1" set="method"><f a="childID">
	<t path="UInt"/>
	<e path="Void"/>
</f></accDoDefaultAction>
		<stub public="1">
			<e path="Bool"/>
			<meta/>
		</stub>
		<errno public="1">
			<t path="UInt"/>
			<meta/>
		</errno>
		<new public="1" set="method"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="flash.accessibility.AccessibilityProperties" params="" file="C:\Motion-Twin\haxe\std/flash/accessibility/AccessibilityProperties.hx" extern="1">
		<silent public="1">
			<e path="Bool"/>
			<meta/>
		</silent>
		<shortcut public="1">
			<c path="String"/>
			<meta/>
		</shortcut>
		<noAutoLabeling public="1">
			<e path="Bool"/>
			<meta/>
		</noAutoLabeling>
		<name public="1">
			<c path="String"/>
			<meta/>
		</name>
		<forceSimple public="1">
			<e path="Bool"/>
			<meta/>
		</forceSimple>
		<description public="1">
			<c path="String"/>
			<meta/>
		</description>
		<new public="1" set="method"><f a=""><e path="Void"/></f></new>
	</class>
	<enum path="flash.display.ActionScriptVersion" params="" file="C:\Motion-Twin\haxe\std/flash/display/ActionScriptVersion.hx">
		<ACTIONSCRIPT3/>
		<ACTIONSCRIPT2/>
		<meta><m n=":fakeEnum"><e>UInt</e></m></meta>
	</enum>
	<class path="flash.display.BitmapData" params="" file="C:\Motion-Twin\haxe\std/flash/display/BitmapData.hx" extern="1">
		<implements path="flash.display.IBitmapDrawable"/>
		<unlock public="1" set="method"><f a="?changeRect">
	<c path="flash.geom.Rectangle"/>
	<e path="Void"/>
</f></unlock>
		<threshold public="1" set="method"><f a="sourceBitmapData:sourceRect:destPoint:operation:threshold:?color:?mask:?copySource">
	<c path="flash.display.BitmapData"/>
	<c path="flash.geom.Rectangle"/>
	<c path="flash.geom.Point"/>
	<c path="String"/>
	<t path="UInt"/>
	<t path="UInt"/>
	<t path="UInt"/>
	<e path="Bool"/>
	<t path="UInt"/>
</f></threshold>
		<setVector public="1">
			<f a="rect:inputVector">
				<c path="flash.geom.Rectangle"/>
				<c path="flash.Vector"><t path="UInt"/></c>
				<e path="Void"/>
			</f>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</setVector>
		<setPixels public="1" set="method"><f a="rect:inputByteArray">
	<c path="flash.geom.Rectangle"/>
	<c path="flash.utils.ByteArray"/>
	<e path="Void"/>
</f></setPixels>
		<setPixel32 public="1" set="method"><f a="x:y:color">
	<c path="Int"/>
	<c path="Int"/>
	<t path="UInt"/>
	<e path="Void"/>
</f></setPixel32>
		<setPixel public="1" set="method"><f a="x:y:color">
	<c path="Int"/>
	<c path="Int"/>
	<t path="UInt"/>
	<e path="Void"/>
</f></setPixel>
		<scroll public="1" set="method"><f a="x:y">
	<c path="Int"/>
	<c path="Int"/>
	<e path="Void"/>
</f></scroll>
		<pixelDissolve public="1" set="method"><f a="sourceBitmapData:sourceRect:destPoint:?randomSeed:?numPixels:?fillColor">
	<c path="flash.display.BitmapData"/>
	<c path="flash.geom.Rectangle"/>
	<c path="flash.geom.Point"/>
	<c path="Int"/>
	<c path="Int"/>
	<t path="UInt"/>
	<c path="Int"/>
</f></pixelDissolve>
		<perlinNoise public="1" set="method"><f a="baseX:baseY:numOctaves:randomSeed:stitch:fractalNoise:?channelOptions:?grayScale:?offsets">
	<c path="Float"/>
	<c path="Float"/>
	<t path="UInt"/>
	<c path="Int"/>
	<e path="Bool"/>
	<e path="Bool"/>
	<t path="UInt"/>
	<e path="Bool"/>
	<c path="Array"><c path="flash.geom.Point"/></c>
	<e path="Void"/>
</f></perlinNoise>
		<paletteMap public="1" set="method"><f a="sourceBitmapData:sourceRect:destPoint:?redArray:?greenArray:?blueArray:?alphaArray">
	<c path="flash.display.BitmapData"/>
	<c path="flash.geom.Rectangle"/>
	<c path="flash.geom.Point"/>
	<c path="Array"><c path="Int"/></c>
	<c path="Array"><c path="Int"/></c>
	<c path="Array"><c path="Int"/></c>
	<c path="Array"><c path="Int"/></c>
	<e path="Void"/>
</f></paletteMap>
		<noise public="1" set="method"><f a="randomSeed:?low:?high:?channelOptions:?grayScale">
	<c path="Int"/>
	<t path="UInt"/>
	<t path="UInt"/>
	<t path="UInt"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></noise>
		<merge public="1" set="method"><f a="sourceBitmapData:sourceRect:destPoint:redMultiplier:greenMultiplier:blueMultiplier:alphaMultiplier">
	<c path="flash.display.BitmapData"/>
	<c path="flash.geom.Rectangle"/>
	<c path="flash.geom.Point"/>
	<t path="UInt"/>
	<t path="UInt"/>
	<t path="UInt"/>
	<t path="UInt"/>
	<e path="Void"/>
</f></merge>
		<lock public="1" set="method"><f a=""><e path="Void"/></f></lock>
		<hitTest public="1" set="method"><f a="firstPoint:firstAlphaThreshold:secondObject:?secondBitmapDataPoint:?secondAlphaThreshold">
	<c path="flash.geom.Point"/>
	<t path="UInt"/>
	<d/>
	<c path="flash.geom.Point"/>
	<t path="UInt"/>
	<e path="Bool"/>
</f></hitTest>
		<histogram public="1">
			<f a="?hRect">
				<c path="flash.geom.Rectangle"/>
				<c path="flash.Vector"><c path="flash.Vector"><c path="Float"/></c></c>
			</f>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</histogram>
		<getVector public="1">
			<f a="rect">
				<c path="flash.geom.Rectangle"/>
				<c path="flash.Vector"><t path="UInt"/></c>
			</f>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</getVector>
		<getPixels public="1" set="method"><f a="rect">
	<c path="flash.geom.Rectangle"/>
	<c path="flash.utils.ByteArray"/>
</f></getPixels>
		<getPixel32 public="1" set="method"><f a="x:y">
	<c path="Int"/>
	<c path="Int"/>
	<t path="UInt"/>
</f></getPixel32>
		<getPixel public="1" set="method"><f a="x:y">
	<c path="Int"/>
	<c path="Int"/>
	<t path="UInt"/>
</f></getPixel>
		<getColorBoundsRect public="1" set="method"><f a="mask:color:?findColor">
	<t path="UInt"/>
	<t path="UInt"/>
	<e path="Bool"/>
	<c path="flash.geom.Rectangle"/>
</f></getColorBoundsRect>
		<generateFilterRect public="1" set="method"><f a="sourceRect:filter">
	<c path="flash.geom.Rectangle"/>
	<c path="flash.filters.BitmapFilter"/>
	<c path="flash.geom.Rectangle"/>
</f></generateFilterRect>
		<floodFill public="1" set="method"><f a="x:y:color">
	<c path="Int"/>
	<c path="Int"/>
	<t path="UInt"/>
	<e path="Void"/>
</f></floodFill>
		<fillRect public="1" set="method"><f a="rect:color">
	<c path="flash.geom.Rectangle"/>
	<t path="UInt"/>
	<e path="Void"/>
</f></fillRect>
		<encode public="1">
			<f a="rect:compressor:?byteArray">
				<c path="flash.geom.Rectangle"/>
				<d/>
				<c path="flash.utils.ByteArray"/>
				<c path="flash.utils.ByteArray"/>
			</f>
			<meta><m n=":require"><e>flash11_3</e></m></meta>
		</encode>
		<drawWithQuality public="1">
			<f a="source:?matrix:?colorTransform:?blendMode:?clipRect:?smoothing:?quality">
				<c path="flash.display.IBitmapDrawable"/>
				<c path="flash.geom.Matrix"/>
				<c path="flash.geom.ColorTransform"/>
				<e path="flash.display.BlendMode"/>
				<c path="flash.geom.Rectangle"/>
				<e path="Bool"/>
				<e path="flash.display.StageQuality"/>
				<e path="Void"/>
			</f>
			<meta><m n=":require"><e>flash11_3</e></m></meta>
		</drawWithQuality>
		<draw public="1" set="method"><f a="source:?matrix:?colorTransform:?blendMode:?clipRect:?smoothing">
	<c path="flash.display.IBitmapDrawable"/>
	<c path="flash.geom.Matrix"/>
	<c path="flash.geom.ColorTransform"/>
	<e path="flash.display.BlendMode"/>
	<c path="flash.geom.Rectangle"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></draw>
		<dispose public="1" set="method"><f a=""><e path="Void"/></f></dispose>
		<copyPixels public="1" set="method"><f a="sourceBitmapData:sourceRect:destPoint:?alphaBitmapData:?alphaPoint:?mergeAlpha">
	<c path="flash.display.BitmapData"/>
	<c path="flash.geom.Rectangle"/>
	<c path="flash.geom.Point"/>
	<c path="flash.display.BitmapData"/>
	<c path="flash.geom.Point"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></copyPixels>
		<copyChannel public="1" set="method"><f a="sourceBitmapData:sourceRect:destPoint:sourceChannel:destChannel">
	<c path="flash.display.BitmapData"/>
	<c path="flash.geom.Rectangle"/>
	<c path="flash.geom.Point"/>
	<t path="UInt"/>
	<t path="UInt"/>
	<e path="Void"/>
</f></copyChannel>
		<compare public="1" set="method"><f a="otherBitmapData">
	<c path="flash.display.BitmapData"/>
	<d/>
</f></compare>
		<colorTransform public="1" set="method"><f a="rect:colorTransform">
	<c path="flash.geom.Rectangle"/>
	<c path="flash.geom.ColorTransform"/>
	<e path="Void"/>
</f></colorTransform>
		<clone public="1" set="method"><f a=""><c path="flash.display.BitmapData"/></f></clone>
		<applyFilter public="1" set="method"><f a="sourceBitmapData:sourceRect:destPoint:filter">
	<c path="flash.display.BitmapData"/>
	<c path="flash.geom.Rectangle"/>
	<c path="flash.geom.Point"/>
	<c path="flash.filters.BitmapFilter"/>
	<e path="Void"/>
</f></applyFilter>
		<width public="1" set="null">
			<c path="Int"/>
			<meta/>
		</width>
		<transparent public="1" set="null">
			<e path="Bool"/>
			<meta/>
		</transparent>
		<rect public="1" set="null">
			<c path="flash.geom.Rectangle"/>
			<meta/>
		</rect>
		<height public="1" set="null">
			<c path="Int"/>
			<meta/>
		</height>
		<new public="1" set="method"><f a="width:height:?transparent:?fillColor">
	<c path="Int"/>
	<c path="Int"/>
	<e path="Bool"/>
	<t path="UInt"/>
	<e path="Void"/>
</f></new>
	</class>
	<enum path="flash.display.BlendMode" params="" file="C:\Motion-Twin\haxe\std/flash/display/BlendMode.hx">
		<SUBTRACT/>
		<SHADER/>
		<SCREEN/>
		<OVERLAY/>
		<NORMAL/>
		<MULTIPLY/>
		<LIGHTEN/>
		<LAYER/>
		<INVERT/>
		<HARDLIGHT/>
		<ERASE/>
		<DIFFERENCE/>
		<DARKEN/>
		<ALPHA/>
		<ADD/>
		<meta><m n=":fakeEnum"><e>String</e></m></meta>
	</enum>
	<enum path="flash.display.CapsStyle" params="" file="C:\Motion-Twin\haxe\std/flash/display/CapsStyle.hx">
		<SQUARE/>
		<ROUND/>
		<NONE/>
		<meta><m n=":fakeEnum"><e>String</e></m></meta>
	</enum>
	<enum path="flash.display.ColorCorrection" params="" file="C:\Motion-Twin\haxe\std/flash/display/ColorCorrection.hx">
		<ON/>
		<OFF/>
		<DEFAULT/>
		<meta>
			<m n=":fakeEnum"><e>String</e></m>
			<m n=":require"><e>flash10_1</e></m>
		</meta>
	</enum>
	<enum path="flash.display.ColorCorrectionSupport" params="" file="C:\Motion-Twin\haxe\std/flash/display/ColorCorrectionSupport.hx">
		<UNSUPPORTED/>
		<DEFAULT_ON/>
		<DEFAULT_OFF/>
		<meta>
			<m n=":fakeEnum"><e>String</e></m>
			<m n=":require"><e>flash10_1</e></m>
		</meta>
	</enum>
	<class path="flash.display.FrameLabel" params="" file="C:\Motion-Twin\haxe\std/flash/display/FrameLabel.hx" extern="1">
		<extends path="flash.events.EventDispatcher"/>
		<name public="1" set="null">
			<c path="String"/>
			<meta/>
		</name>
		<frame public="1" set="null">
			<c path="Int"/>
			<meta/>
		</frame>
		<new public="1" set="method"><f a="name:frame">
	<c path="String"/>
	<c path="Int"/>
	<e path="Void"/>
</f></new>
		<meta><m n=":final"/></meta>
	</class>
	<enum path="flash.display.GradientType" params="" file="C:\Motion-Twin\haxe\std/flash/display/GradientType.hx">
		<RADIAL/>
		<LINEAR/>
		<meta><m n=":fakeEnum"><e>String</e></m></meta>
	</enum>
	<class path="flash.display.Graphics" params="" file="C:\Motion-Twin\haxe\std/flash/display/Graphics.hx" extern="1">
		<moveTo public="1" set="method"><f a="x:y">
	<c path="Float"/>
	<c path="Float"/>
	<e path="Void"/>
</f></moveTo>
		<lineTo public="1" set="method"><f a="x:y">
	<c path="Float"/>
	<c path="Float"/>
	<e path="Void"/>
</f></lineTo>
		<lineStyle public="1" set="method"><f a="?thickness:?color:?alpha:?pixelHinting:?scaleMode:?caps:?joints:?miterLimit">
	<c path="Float"/>
	<t path="UInt"/>
	<c path="Float"/>
	<e path="Bool"/>
	<e path="flash.display.LineScaleMode"/>
	<e path="flash.display.CapsStyle"/>
	<e path="flash.display.JointStyle"/>
	<c path="Float"/>
	<e path="Void"/>
</f></lineStyle>
		<lineShaderStyle public="1">
			<f a="shader:?matrix">
				<c path="flash.display.Shader"/>
				<c path="flash.geom.Matrix"/>
				<e path="Void"/>
			</f>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</lineShaderStyle>
		<lineGradientStyle public="1" set="method"><f a="type:colors:alphas:ratios:?matrix:?spreadMethod:?interpolationMethod:?focalPointRatio">
	<e path="flash.display.GradientType"/>
	<c path="Array"><t path="UInt"/></c>
	<c path="Array"><d/></c>
	<c path="Array"><d/></c>
	<c path="flash.geom.Matrix"/>
	<e path="flash.display.SpreadMethod"/>
	<e path="flash.display.InterpolationMethod"/>
	<c path="Float"/>
	<e path="Void"/>
</f></lineGradientStyle>
		<lineBitmapStyle public="1">
			<f a="bitmap:?matrix:?repeat:?smooth">
				<c path="flash.display.BitmapData"/>
				<c path="flash.geom.Matrix"/>
				<e path="Bool"/>
				<e path="Bool"/>
				<e path="Void"/>
			</f>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</lineBitmapStyle>
		<endFill public="1" set="method"><f a=""><e path="Void"/></f></endFill>
		<drawTriangles public="1">
			<f a="vertices:?indices:?uvtData:?culling">
				<c path="flash.Vector"><c path="Float"/></c>
				<c path="flash.Vector"><c path="Int"/></c>
				<c path="flash.Vector"><c path="Float"/></c>
				<e path="flash.display.TriangleCulling"/>
				<e path="Void"/>
			</f>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</drawTriangles>
		<drawRoundRectComplex public="1" set="method"><f a="x:y:width:height:topLeftRadius:topRightRadius:bottomLeftRadius:bottomRightRadius">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<e path="Void"/>
</f></drawRoundRectComplex>
		<drawRoundRect public="1" set="method"><f a="x:y:width:height:ellipseWidth:?ellipseHeight">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<e path="Void"/>
</f></drawRoundRect>
		<drawRect public="1" set="method"><f a="x:y:width:height">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<e path="Void"/>
</f></drawRect>
		<drawPath public="1">
			<f a="commands:data:?winding">
				<c path="flash.Vector"><c path="Int"/></c>
				<c path="flash.Vector"><c path="Float"/></c>
				<e path="flash.display.GraphicsPathWinding"/>
				<e path="Void"/>
			</f>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</drawPath>
		<drawGraphicsData public="1">
			<f a="graphicsData">
				<c path="flash.Vector"><c path="flash.display.IGraphicsData"/></c>
				<e path="Void"/>
			</f>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</drawGraphicsData>
		<drawEllipse public="1" set="method"><f a="x:y:width:height">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<e path="Void"/>
</f></drawEllipse>
		<drawCircle public="1" set="method"><f a="x:y:radius">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<e path="Void"/>
</f></drawCircle>
		<curveTo public="1" set="method"><f a="controlX:controlY:anchorX:anchorY">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<e path="Void"/>
</f></curveTo>
		<cubicCurveTo public="1">
			<f a="controlX1:controlY1:controlX2:controlY2:anchorX:anchorY">
				<c path="Float"/>
				<c path="Float"/>
				<c path="Float"/>
				<c path="Float"/>
				<c path="Float"/>
				<c path="Float"/>
				<e path="Void"/>
			</f>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</cubicCurveTo>
		<copyFrom public="1">
			<f a="sourceGraphics">
				<c path="flash.display.Graphics"/>
				<e path="Void"/>
			</f>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</copyFrom>
		<clear public="1" set="method"><f a=""><e path="Void"/></f></clear>
		<beginShaderFill public="1">
			<f a="shader:?matrix">
				<c path="flash.display.Shader"/>
				<c path="flash.geom.Matrix"/>
				<e path="Void"/>
			</f>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</beginShaderFill>
		<beginGradientFill public="1" set="method"><f a="type:colors:alphas:ratios:?matrix:?spreadMethod:?interpolationMethod:?focalPointRatio">
	<e path="flash.display.GradientType"/>
	<c path="Array"><t path="UInt"/></c>
	<c path="Array"><d/></c>
	<c path="Array"><d/></c>
	<c path="flash.geom.Matrix"/>
	<e path="flash.display.SpreadMethod"/>
	<e path="flash.display.InterpolationMethod"/>
	<c path="Float"/>
	<e path="Void"/>
</f></beginGradientFill>
		<beginFill public="1" set="method"><f a="color:?alpha">
	<t path="UInt"/>
	<c path="Float"/>
	<e path="Void"/>
</f></beginFill>
		<beginBitmapFill public="1" set="method"><f a="bitmap:?matrix:?repeat:?smooth">
	<c path="flash.display.BitmapData"/>
	<c path="flash.geom.Matrix"/>
	<e path="Bool"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></beginBitmapFill>
		<new public="1" set="method"><f a=""><e path="Void"/></f></new>
		<meta><m n=":final"/></meta>
	</class>
	<enum path="flash.display.GraphicsPathWinding" params="" file="C:\Motion-Twin\haxe\std/flash/display/GraphicsPathWinding.hx">
		<NON_ZERO/>
		<EVEN_ODD/>
		<meta><m n=":fakeEnum"><e>String</e></m></meta>
	</enum>
	<class path="flash.display.IGraphicsData" params="" file="C:\Motion-Twin\haxe\std/flash/display/IGraphicsData.hx" extern="1" interface="1"/>
	<enum path="flash.display.InterpolationMethod" params="" file="C:\Motion-Twin\haxe\std/flash/display/InterpolationMethod.hx">
		<RGB/>
		<LINEAR_RGB/>
		<meta><m n=":fakeEnum"><e>String</e></m></meta>
	</enum>
	<enum path="flash.display.JointStyle" params="" file="C:\Motion-Twin\haxe\std/flash/display/JointStyle.hx">
		<ROUND/>
		<MITER/>
		<BEVEL/>
		<meta><m n=":fakeEnum"><e>String</e></m></meta>
	</enum>
	<enum path="flash.display.LineScaleMode" params="" file="C:\Motion-Twin\haxe\std/flash/display/LineScaleMode.hx">
		<VERTICAL/>
		<NORMAL/>
		<NONE/>
		<HORIZONTAL/>
		<meta><m n=":fakeEnum"><e>String</e></m></meta>
	</enum>
	<class path="flash.display.Loader" params="" file="C:\Motion-Twin\haxe\std/flash/display/Loader.hx" extern="1">
		<extends path="flash.display.DisplayObjectContainer"/>
		<unloadAndStop public="1">
			<f a="?gc">
				<e path="Bool"/>
				<e path="Void"/>
			</f>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</unloadAndStop>
		<unload public="1" set="method"><f a=""><e path="Void"/></f></unload>
		<loadBytes public="1" set="method"><f a="bytes:?context">
	<c path="flash.utils.ByteArray"/>
	<c path="flash.system.LoaderContext"/>
	<e path="Void"/>
</f></loadBytes>
		<load public="1" set="method"><f a="request:?context">
	<c path="flash.net.URLRequest"/>
	<c path="flash.system.LoaderContext"/>
	<e path="Void"/>
</f></load>
		<close public="1" set="method"><f a=""><e path="Void"/></f></close>
		<uncaughtErrorEvents public="1">
			<c path="flash.events.UncaughtErrorEvents"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</uncaughtErrorEvents>
		<contentLoaderInfo public="1" set="null">
			<c path="flash.display.LoaderInfo"/>
			<meta/>
		</contentLoaderInfo>
		<content public="1" set="null">
			<c path="flash.display.DisplayObject"/>
			<meta/>
		</content>
		<new public="1" set="method"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="flash.display.LoaderInfo" params="" file="C:\Motion-Twin\haxe\std/flash/display/LoaderInfo.hx" extern="1">
		<extends path="flash.events.EventDispatcher"/>
		<getLoaderInfoByDefinition public="1" set="method" static="1"><f a="object">
	<d/>
	<c path="flash.display.LoaderInfo"/>
</f></getLoaderInfoByDefinition>
		<width public="1" set="null">
			<c path="Int"/>
			<meta/>
		</width>
		<url public="1" set="null">
			<c path="String"/>
			<meta/>
		</url>
		<uncaughtErrorEvents public="1">
			<c path="flash.events.UncaughtErrorEvents"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</uncaughtErrorEvents>
		<swfVersion public="1" set="null">
			<t path="UInt"/>
			<meta/>
		</swfVersion>
		<sharedEvents public="1" set="null">
			<c path="flash.events.EventDispatcher"/>
			<meta/>
		</sharedEvents>
		<sameDomain public="1" set="null">
			<e path="Bool"/>
			<meta/>
		</sameDomain>
		<parentAllowsChild public="1" set="null">
			<e path="Bool"/>
			<meta/>
		</parentAllowsChild>
		<parameters public="1" set="null">
			<d><c path="String"/></d>
			<meta/>
		</parameters>
		<loaderURL public="1" set="null">
			<c path="String"/>
			<meta/>
		</loaderURL>
		<loader public="1" set="null">
			<c path="flash.display.Loader"/>
			<meta/>
		</loader>
		<isURLInaccessible public="1">
			<e path="Bool"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</isURLInaccessible>
		<height public="1" set="null">
			<c path="Int"/>
			<meta/>
		</height>
		<frameRate public="1" set="null">
			<c path="Float"/>
			<meta/>
		</frameRate>
		<contentType public="1" set="null">
			<c path="String"/>
			<meta/>
		</contentType>
		<content public="1" set="null">
			<c path="flash.display.DisplayObject"/>
			<meta/>
		</content>
		<childAllowsParent public="1" set="null">
			<e path="Bool"/>
			<meta/>
		</childAllowsParent>
		<bytesTotal public="1" set="null">
			<t path="UInt"/>
			<meta/>
		</bytesTotal>
		<bytesLoaded public="1" set="null">
			<t path="UInt"/>
			<meta/>
		</bytesLoaded>
		<bytes public="1" set="null">
			<c path="flash.utils.ByteArray"/>
			<meta/>
		</bytes>
		<applicationDomain public="1" set="null">
			<c path="flash.system.ApplicationDomain"/>
			<meta/>
		</applicationDomain>
		<actionScriptVersion public="1" set="null">
			<e path="flash.display.ActionScriptVersion"/>
			<meta/>
		</actionScriptVersion>
	</class>
	<class path="flash.display.NativeMenu" params="" file="C:\Motion-Twin\haxe\std/flash/display/NativeMenu.hx" extern="1">
		<extends path="flash.events.EventDispatcher"/>
		<new public="1"><f a=""><e path="Void"/></f></new>
		<meta><m n=":require"><e>flash10_1</e></m></meta>
	</class>
	<class path="flash.display.Scene" params="" file="C:\Motion-Twin\haxe\std/flash/display/Scene.hx" extern="1">
		<numFrames public="1" set="null">
			<c path="Int"/>
			<meta/>
		</numFrames>
		<name public="1" set="null">
			<c path="String"/>
			<meta/>
		</name>
		<labels public="1" set="null">
			<c path="Array"><c path="flash.display.FrameLabel"/></c>
			<meta/>
		</labels>
		<new public="1" set="method"><f a="name:labels:numFrames">
	<c path="String"/>
	<c path="Array"><c path="flash.display.FrameLabel"/></c>
	<c path="Int"/>
	<e path="Void"/>
</f></new>
		<meta><m n=":final"/></meta>
	</class>
	<class path="flash.display.Shader" params="" file="C:\Motion-Twin\haxe\std/flash/display/Shader.hx" extern="1">
		<precisionHint public="1">
			<e path="flash.display.ShaderPrecision"/>
			<meta/>
		</precisionHint>
		<data public="1">
			<c path="flash.display.ShaderData"/>
			<meta/>
		</data>
		<byteCode public="1" get="null">
			<c path="flash.utils.ByteArray"/>
			<meta/>
		</byteCode>
		<new public="1"><f a="?code">
	<c path="flash.utils.ByteArray"/>
	<e path="Void"/>
</f></new>
		<meta><m n=":require"><e>flash10</e></m></meta>
	</class>
	<class path="flash.display.ShaderData" params="" file="C:\Motion-Twin\haxe\std/flash/display/ShaderData.hx" extern="1">
		<new public="1" set="method"><f a="byteCode">
	<c path="flash.utils.ByteArray"/>
	<e path="Void"/>
</f></new>
		<haxe_dynamic><d/></haxe_dynamic>
	</class>
	<enum path="flash.display.ShaderPrecision" params="" file="C:\Motion-Twin\haxe\std/flash/display/ShaderPrecision.hx">
		<FULL/>
		<FAST/>
		<meta><m n=":fakeEnum"><e>String</e></m></meta>
	</enum>
	<enum path="flash.display.SpreadMethod" params="" file="C:\Motion-Twin\haxe\std/flash/display/SpreadMethod.hx">
		<REPEAT/>
		<REFLECT/>
		<PAD/>
		<meta><m n=":fakeEnum"><e>String</e></m></meta>
	</enum>
	<class path="flash.display.Stage" params="" file="C:\Motion-Twin\haxe\std/flash/display/Stage.hx" extern="1">
		<extends path="flash.display.DisplayObjectContainer"/>
		<isFocusInaccessible public="1" set="method"><f a=""><e path="Bool"/></f></isFocusInaccessible>
		<invalidate public="1" set="method"><f a=""><e path="Void"/></f></invalidate>
		<wmodeGPU public="1">
			<e path="Bool"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</wmodeGPU>
		<stageWidth public="1">
			<c path="Int"/>
			<meta/>
		</stageWidth>
		<stageVideos public="1">
			<c path="flash.Vector"><c path="flash.media.StageVideo"/></c>
			<meta><m n=":require"><e>flash10_2</e></m></meta>
		</stageVideos>
		<stageHeight public="1">
			<c path="Int"/>
			<meta/>
		</stageHeight>
		<stageFocusRect public="1">
			<e path="Bool"/>
			<meta/>
		</stageFocusRect>
		<stage3Ds public="1">
			<c path="flash.Vector"><c path="flash.display.Stage3D"/></c>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</stage3Ds>
		<softKeyboardRect public="1">
			<c path="flash.geom.Rectangle"/>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</softKeyboardRect>
		<showDefaultContextMenu public="1">
			<e path="Bool"/>
			<meta/>
		</showDefaultContextMenu>
		<scaleMode public="1">
			<e path="flash.display.StageScaleMode"/>
			<meta/>
		</scaleMode>
		<quality public="1">
			<e path="flash.display.StageQuality"/>
			<meta/>
		</quality>
		<mouseLock public="1">
			<e path="Bool"/>
			<meta><m n=":require"><e>flash11_2</e></m></meta>
		</mouseLock>
		<fullScreenWidth public="1" set="null">
			<t path="UInt"/>
			<meta/>
		</fullScreenWidth>
		<fullScreenSourceRect public="1">
			<c path="flash.geom.Rectangle"/>
			<meta/>
		</fullScreenSourceRect>
		<fullScreenHeight public="1" set="null">
			<t path="UInt"/>
			<meta/>
		</fullScreenHeight>
		<frameRate public="1">
			<c path="Float"/>
			<meta/>
		</frameRate>
		<focus public="1">
			<c path="flash.display.InteractiveObject"/>
			<meta/>
		</focus>
		<displayState public="1">
			<e path="flash.display.StageDisplayState"/>
			<meta/>
		</displayState>
		<displayContextInfo public="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</displayContextInfo>
		<colorCorrectionSupport public="1">
			<e path="flash.display.ColorCorrectionSupport"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</colorCorrectionSupport>
		<colorCorrection public="1">
			<e path="flash.display.ColorCorrection"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</colorCorrection>
		<color public="1">
			<t path="UInt"/>
			<meta><m n=":require"><e>flash10_2</e></m></meta>
		</color>
		<allowsFullScreenInteractive public="1">
			<e path="Bool"/>
			<meta><m n=":require"><e>flash11_3</e></m></meta>
		</allowsFullScreenInteractive>
		<allowsFullScreen public="1">
			<e path="Bool"/>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</allowsFullScreen>
		<align public="1">
			<e path="flash.display.StageAlign"/>
			<meta/>
		</align>
	</class>
	<class path="flash.display.Stage3D" params="" file="C:\Motion-Twin\haxe\std/flash/display/Stage3D.hx" extern="1">
		<extends path="flash.events.EventDispatcher"/>
		<requestContext3D public="1" set="method"><f a="?context3DRenderMode">
	<c path="String"/>
	<e path="Void"/>
</f></requestContext3D>
		<y public="1">
			<c path="Float"/>
			<meta/>
		</y>
		<x public="1">
			<c path="Float"/>
			<meta/>
		</x>
		<visible public="1">
			<e path="Bool"/>
			<meta/>
		</visible>
		<context3D public="1" set="null">
			<c path="flash.display3D.Context3D"/>
			<meta/>
		</context3D>
		<meta><m n=":require"><e>flash11</e></m></meta>
	</class>
	<enum path="flash.display.StageAlign" params="" file="C:\Motion-Twin\haxe\std/flash/display/StageAlign.hx">
		<TOP_RIGHT/>
		<TOP_LEFT/>
		<TOP/>
		<RIGHT/>
		<LEFT/>
		<BOTTOM_RIGHT/>
		<BOTTOM_LEFT/>
		<BOTTOM/>
		<meta><m n=":fakeEnum"><e>String</e></m></meta>
	</enum>
	<enum path="flash.display.StageDisplayState" params="" file="C:\Motion-Twin\haxe\std/flash/display/StageDisplayState.hx">
		<NORMAL/>
		<FULL_SCREEN_INTERACTIVE/>
		<FULL_SCREEN/>
		<meta><m n=":fakeEnum"><e>String</e></m></meta>
	</enum>
	<enum path="flash.display.StageQuality" params="" file="C:\Motion-Twin\haxe\std/flash/display/StageQuality.hx">
		<MEDIUM/>
		<LOW/>
		<HIGH_8X8_LINEAR/>
		<HIGH_8X8/>
		<HIGH_16X16_LINEAR/>
		<HIGH_16X16/>
		<HIGH/>
		<BEST/>
		<meta><m n=":fakeEnum"><e>String</e></m></meta>
	</enum>
	<enum path="flash.display.StageScaleMode" params="" file="C:\Motion-Twin\haxe\std/flash/display/StageScaleMode.hx">
		<SHOW_ALL/>
		<NO_SCALE/>
		<NO_BORDER/>
		<EXACT_FIT/>
		<meta><m n=":fakeEnum"><e>String</e></m></meta>
	</enum>
	<enum path="flash.display.TriangleCulling" params="" file="C:\Motion-Twin\haxe\std/flash/display/TriangleCulling.hx">
		<POSITIVE/>
		<NONE/>
		<NEGATIVE/>
		<meta><m n=":fakeEnum"><e>String</e></m></meta>
	</enum>
	<class path="flash.display3D.Context3D" params="" file="C:\Motion-Twin\haxe\std/flash/display3D/Context3D.hx" extern="1">
		<extends path="flash.events.EventDispatcher"/>
		<setVertexBufferAt public="1" set="method"><f a="index:buffer:?bufferOffset:?format">
	<c path="Int"/>
	<c path="flash.display3D.VertexBuffer3D"/>
	<c path="Int"/>
	<e path="flash.display3D.Context3DVertexBufferFormat"/>
	<e path="Void"/>
</f></setVertexBufferAt>
		<setTextureAt public="1" set="method"><f a="sampler:texture">
	<c path="Int"/>
	<c path="flash.display3D.textures.TextureBase"/>
	<e path="Void"/>
</f></setTextureAt>
		<setStencilReferenceValue public="1" set="method"><f a="referenceValue:?readMask:?writeMask">
	<t path="UInt"/>
	<t path="UInt"/>
	<t path="UInt"/>
	<e path="Void"/>
</f></setStencilReferenceValue>
		<setStencilActions public="1" set="method"><f a="?triangleFace:?compareMode:?actionOnBothPass:?actionOnDepthFail:?actionOnDepthPassStencilFail">
	<e path="flash.display3D.Context3DTriangleFace"/>
	<e path="flash.display3D.Context3DCompareMode"/>
	<e path="flash.display3D.Context3DStencilAction"/>
	<e path="flash.display3D.Context3DStencilAction"/>
	<e path="flash.display3D.Context3DStencilAction"/>
	<e path="Void"/>
</f></setStencilActions>
		<setScissorRectangle public="1" set="method"><f a="rectangle">
	<c path="flash.geom.Rectangle"/>
	<e path="Void"/>
</f></setScissorRectangle>
		<setRenderToTexture public="1" set="method"><f a="texture:?enableDepthAndStencil:?antiAlias:?surfaceSelector">
	<c path="flash.display3D.textures.TextureBase"/>
	<e path="Bool"/>
	<c path="Int"/>
	<c path="Int"/>
	<e path="Void"/>
</f></setRenderToTexture>
		<setRenderToBackBuffer public="1" set="method"><f a=""><e path="Void"/></f></setRenderToBackBuffer>
		<setProgramConstantsFromVector public="1" set="method"><f a="programType:firstRegister:data:?numRegisters">
	<e path="flash.display3D.Context3DProgramType"/>
	<c path="Int"/>
	<c path="flash.Vector"><c path="Float"/></c>
	<c path="Int"/>
	<e path="Void"/>
</f></setProgramConstantsFromVector>
		<setProgramConstantsFromMatrix public="1" set="method"><f a="programType:firstRegister:matrix:?transposedMatrix">
	<e path="flash.display3D.Context3DProgramType"/>
	<c path="Int"/>
	<c path="flash.geom.Matrix3D"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></setProgramConstantsFromMatrix>
		<setProgramConstantsFromByteArray public="1">
			<f a="programType:firstRegister:numRegisters:data:byteArrayOffset">
				<e path="flash.display3D.Context3DProgramType"/>
				<c path="Int"/>
				<c path="Int"/>
				<c path="flash.utils.ByteArray"/>
				<t path="UInt"/>
				<e path="Void"/>
			</f>
			<meta><m n=":require"><e>flash11_2</e></m></meta>
		</setProgramConstantsFromByteArray>
		<setProgram public="1" set="method"><f a="program">
	<c path="flash.display3D.Program3D"/>
	<e path="Void"/>
</f></setProgram>
		<setDepthTest public="1" set="method"><f a="depthMask:passCompareMode">
	<e path="Bool"/>
	<e path="flash.display3D.Context3DCompareMode"/>
	<e path="Void"/>
</f></setDepthTest>
		<setCulling public="1" set="method"><f a="triangleFaceToCull">
	<e path="flash.display3D.Context3DTriangleFace"/>
	<e path="Void"/>
</f></setCulling>
		<setColorMask public="1" set="method"><f a="red:green:blue:alpha">
	<e path="Bool"/>
	<e path="Bool"/>
	<e path="Bool"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></setColorMask>
		<setBlendFactors public="1" set="method"><f a="sourceFactor:destinationFactor">
	<e path="flash.display3D.Context3DBlendFactor"/>
	<e path="flash.display3D.Context3DBlendFactor"/>
	<e path="Void"/>
</f></setBlendFactors>
		<present public="1" set="method"><f a=""><e path="Void"/></f></present>
		<drawTriangles public="1" set="method"><f a="indexBuffer:?firstIndex:?numTriangles">
	<c path="flash.display3D.IndexBuffer3D"/>
	<c path="Int"/>
	<c path="Int"/>
	<e path="Void"/>
</f></drawTriangles>
		<drawToBitmapData public="1" set="method"><f a="destination">
	<c path="flash.display.BitmapData"/>
	<e path="Void"/>
</f></drawToBitmapData>
		<dispose public="1" set="method"><f a=""><e path="Void"/></f></dispose>
		<createVertexBuffer public="1" set="method"><f a="numVertices:data32PerVertex">
	<c path="Int"/>
	<c path="Int"/>
	<c path="flash.display3D.VertexBuffer3D"/>
</f></createVertexBuffer>
		<createTexture public="1" set="method"><f a="width:height:format:optimizeForRenderToTexture:?streamingLevels">
	<c path="Int"/>
	<c path="Int"/>
	<e path="flash.display3D.Context3DTextureFormat"/>
	<e path="Bool"/>
	<c path="Int"/>
	<c path="flash.display3D.textures.Texture"/>
</f></createTexture>
		<createProgram public="1" set="method"><f a=""><c path="flash.display3D.Program3D"/></f></createProgram>
		<createIndexBuffer public="1" set="method"><f a="numIndices">
	<c path="Int"/>
	<c path="flash.display3D.IndexBuffer3D"/>
</f></createIndexBuffer>
		<createCubeTexture public="1" set="method"><f a="size:format:optimizeForRenderToTexture:?streamingLevels">
	<c path="Int"/>
	<e path="flash.display3D.Context3DTextureFormat"/>
	<e path="Bool"/>
	<c path="Int"/>
	<c path="flash.display3D.textures.CubeTexture"/>
</f></createCubeTexture>
		<configureBackBuffer public="1" set="method"><f a="width:height:antiAlias:?enableDepthAndStencil">
	<c path="Int"/>
	<c path="Int"/>
	<c path="Int"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></configureBackBuffer>
		<clear public="1" set="method"><f a="?red:?green:?blue:?alpha:?depth:?stencil:?mask">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<t path="UInt"/>
	<t path="UInt"/>
	<e path="Void"/>
</f></clear>
		<enableErrorChecking public="1">
			<e path="Bool"/>
			<meta/>
		</enableErrorChecking>
		<driverInfo public="1" set="null">
			<c path="String"/>
			<meta/>
		</driverInfo>
		<meta><m n=":final"/></meta>
	</class>
	<enum path="flash.display3D.Context3DBlendFactor" params="" file="C:\Motion-Twin\haxe\std/flash/display3D/Context3DBlendFactor.hx">
		<ZERO/>
		<SOURCE_COLOR/>
		<SOURCE_ALPHA/>
		<ONE_MINUS_SOURCE_COLOR/>
		<ONE_MINUS_SOURCE_ALPHA/>
		<ONE_MINUS_DESTINATION_COLOR/>
		<ONE_MINUS_DESTINATION_ALPHA/>
		<ONE/>
		<DESTINATION_COLOR/>
		<DESTINATION_ALPHA/>
		<meta><m n=":fakeEnum"><e>String</e></m></meta>
	</enum>
	<enum path="flash.display3D.Context3DCompareMode" params="" file="C:\Motion-Twin\haxe\std/flash/display3D/Context3DCompareMode.hx">
		<NOT_EQUAL/>
		<NEVER/>
		<LESS_EQUAL/>
		<LESS/>
		<GREATER_EQUAL/>
		<GREATER/>
		<EQUAL/>
		<ALWAYS/>
		<meta><m n=":fakeEnum"><e>String</e></m></meta>
	</enum>
	<enum path="flash.display3D.Context3DProgramType" params="" file="C:\Motion-Twin\haxe\std/flash/display3D/Context3DProgramType.hx">
		<VERTEX/>
		<FRAGMENT/>
		<meta><m n=":fakeEnum"><e>String</e></m></meta>
	</enum>
	<enum path="flash.display3D.Context3DStencilAction" params="" file="C:\Motion-Twin\haxe\std/flash/display3D/Context3DStencilAction.hx">
		<ZERO/>
		<SET/>
		<KEEP/>
		<INVERT/>
		<INCREMENT_WRAP/>
		<INCREMENT_SATURATE/>
		<DECREMENT_WRAP/>
		<DECREMENT_SATURATE/>
		<meta><m n=":fakeEnum"><e>String</e></m></meta>
	</enum>
	<enum path="flash.display3D.Context3DTextureFormat" params="" file="C:\Motion-Twin\haxe\std/flash/display3D/Context3DTextureFormat.hx">
		<COMPRESSED/>
		<BGRA/>
		<meta><m n=":fakeEnum"><e>String</e></m></meta>
	</enum>
	<enum path="flash.display3D.Context3DTriangleFace" params="" file="C:\Motion-Twin\haxe\std/flash/display3D/Context3DTriangleFace.hx">
		<NONE/>
		<FRONT_AND_BACK/>
		<FRONT/>
		<BACK/>
		<meta><m n=":fakeEnum"><e>String</e></m></meta>
	</enum>
	<enum path="flash.display3D.Context3DVertexBufferFormat" params="" file="C:\Motion-Twin\haxe\std/flash/display3D/Context3DVertexBufferFormat.hx">
		<FLOAT_4/>
		<FLOAT_3/>
		<FLOAT_2/>
		<FLOAT_1/>
		<BYTES_4/>
		<meta><m n=":fakeEnum"><e>String</e></m></meta>
	</enum>
	<class path="flash.display3D.IndexBuffer3D" params="" file="C:\Motion-Twin\haxe\std/flash/display3D/IndexBuffer3D.hx" extern="1">
		<uploadFromVector public="1" set="method"><f a="data:startOffset:count">
	<c path="flash.Vector"><t path="UInt"/></c>
	<c path="Int"/>
	<c path="Int"/>
	<e path="Void"/>
</f></uploadFromVector>
		<uploadFromByteArray public="1" set="method"><f a="data:byteArrayOffset:startOffset:count">
	<c path="flash.utils.ByteArray"/>
	<c path="Int"/>
	<c path="Int"/>
	<c path="Int"/>
	<e path="Void"/>
</f></uploadFromByteArray>
		<dispose public="1" set="method"><f a=""><e path="Void"/></f></dispose>
		<meta><m n=":final"/></meta>
	</class>
	<class path="flash.display3D.Program3D" params="" file="C:\Motion-Twin\haxe\std/flash/display3D/Program3D.hx" extern="1">
		<upload public="1" set="method"><f a="vertexProgram:fragmentProgram">
	<c path="flash.utils.ByteArray"/>
	<c path="flash.utils.ByteArray"/>
	<e path="Void"/>
</f></upload>
		<dispose public="1" set="method"><f a=""><e path="Void"/></f></dispose>
		<meta><m n=":final"/></meta>
	</class>
	<class path="flash.display3D.VertexBuffer3D" params="" file="C:\Motion-Twin\haxe\std/flash/display3D/VertexBuffer3D.hx" extern="1">
		<uploadFromVector public="1" set="method"><f a="data:startVertex:numVertices">
	<c path="flash.Vector"><c path="Float"/></c>
	<c path="Int"/>
	<c path="Int"/>
	<e path="Void"/>
</f></uploadFromVector>
		<uploadFromByteArray public="1" set="method"><f a="data:byteArrayOffset:startVertex:numVertices">
	<c path="flash.utils.ByteArray"/>
	<c path="Int"/>
	<c path="Int"/>
	<c path="Int"/>
	<e path="Void"/>
</f></uploadFromByteArray>
		<dispose public="1" set="method"><f a=""><e path="Void"/></f></dispose>
	</class>
	<class path="flash.display3D.textures.TextureBase" params="" file="C:\Motion-Twin\haxe\std/flash/display3D/textures/TextureBase.hx" extern="1">
		<extends path="flash.events.EventDispatcher"/>
		<dispose public="1" set="method"><f a=""><e path="Void"/></f></dispose>
	</class>
	<class path="flash.display3D.textures.CubeTexture" params="" file="C:\Motion-Twin\haxe\std/flash/display3D/textures/CubeTexture.hx" extern="1">
		<extends path="flash.display3D.textures.TextureBase"/>
		<uploadFromByteArray public="1" set="method"><f a="data:byteArrayOffset:side:?miplevel">
	<c path="flash.utils.ByteArray"/>
	<t path="UInt"/>
	<t path="UInt"/>
	<t path="UInt"/>
	<e path="Void"/>
</f></uploadFromByteArray>
		<uploadFromBitmapData public="1" set="method"><f a="source:side:?miplevel">
	<c path="flash.display.BitmapData"/>
	<t path="UInt"/>
	<t path="UInt"/>
	<e path="Void"/>
</f></uploadFromBitmapData>
		<uploadCompressedTextureFromByteArray public="1" set="method"><f a="data:byteArrayOffset:?async">
	<c path="flash.utils.ByteArray"/>
	<t path="UInt"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></uploadCompressedTextureFromByteArray>
		<meta><m n=":final"/></meta>
	</class>
	<class path="flash.display3D.textures.Texture" params="" file="C:\Motion-Twin\haxe\std/flash/display3D/textures/Texture.hx" extern="1">
		<extends path="flash.display3D.textures.TextureBase"/>
		<uploadFromByteArray public="1" set="method"><f a="data:byteArrayOffset:?miplevel">
	<c path="flash.utils.ByteArray"/>
	<t path="UInt"/>
	<t path="UInt"/>
	<e path="Void"/>
</f></uploadFromByteArray>
		<uploadFromBitmapData public="1" set="method"><f a="source:?miplevel">
	<c path="flash.display.BitmapData"/>
	<t path="UInt"/>
	<e path="Void"/>
</f></uploadFromBitmapData>
		<uploadCompressedTextureFromByteArray public="1" set="method"><f a="data:byteArrayOffset:?async">
	<c path="flash.utils.ByteArray"/>
	<t path="UInt"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></uploadCompressedTextureFromByteArray>
		<meta><m n=":final"/></meta>
	</class>
	<class path="flash.errors.Error" params="" file="C:\Motion-Twin\haxe\std/flash/errors/Error.hx" extern="1">
		<length public="1" static="1">
			<c path="Int"/>
			<meta/>
		</length>
		<getErrorMessage public="1" set="method" static="1"><f a="index">
	<c path="Int"/>
	<c path="String"/>
</f></getErrorMessage>
		<throwError public="1" set="method" static="1"><f a="type:index:?p1:?p2:?p3:?p4:?p5">
	<c path="Class"><d/></c>
	<t path="UInt"/>
	<d/>
	<d/>
	<d/>
	<d/>
	<d/>
	<d/>
</f></throwError>
		<getStackTrace public="1" set="method"><f a=""><c path="String"/></f></getStackTrace>
		<name public="1">
			<d/>
			<meta/>
		</name>
		<message public="1">
			<d/>
			<meta/>
		</message>
		<errorID public="1" set="null">
			<c path="Int"/>
			<meta/>
		</errorID>
		<new public="1" set="method"><f a="?message:?id">
	<d/>
	<d/>
	<e path="Void"/>
</f></new>
		<haxe_dynamic><d/></haxe_dynamic>
	</class>
	<class path="flash.events.Event" params="" file="C:\Motion-Twin\haxe\std/flash/events/Event.hx" extern="1">
		<ACTIVATE public="1" static="1">
			<c path="String"/>
			<meta/>
		</ACTIVATE>
		<ADDED public="1" static="1">
			<c path="String"/>
			<meta/>
		</ADDED>
		<ADDED_TO_STAGE public="1" static="1">
			<c path="String"/>
			<meta/>
		</ADDED_TO_STAGE>
		<CANCEL public="1" static="1">
			<c path="String"/>
			<meta/>
		</CANCEL>
		<CHANGE public="1" static="1">
			<c path="String"/>
			<meta/>
		</CHANGE>
		<CLEAR public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</CLEAR>
		<CLOSE public="1" static="1">
			<c path="String"/>
			<meta/>
		</CLOSE>
		<COMPLETE public="1" static="1">
			<c path="String"/>
			<meta/>
		</COMPLETE>
		<CONNECT public="1" static="1">
			<c path="String"/>
			<meta/>
		</CONNECT>
		<CONTEXT3D_CREATE public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</CONTEXT3D_CREATE>
		<COPY public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</COPY>
		<CUT public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</CUT>
		<DEACTIVATE public="1" static="1">
			<c path="String"/>
			<meta/>
		</DEACTIVATE>
		<ENTER_FRAME public="1" static="1">
			<c path="String"/>
			<meta/>
		</ENTER_FRAME>
		<EXIT_FRAME public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</EXIT_FRAME>
		<FRAME_CONSTRUCTED public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</FRAME_CONSTRUCTED>
		<FRAME_LABEL public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash11_3</e></m></meta>
		</FRAME_LABEL>
		<FULLSCREEN public="1" static="1">
			<c path="String"/>
			<meta/>
		</FULLSCREEN>
		<ID3 public="1" static="1">
			<c path="String"/>
			<meta/>
		</ID3>
		<INIT public="1" static="1">
			<c path="String"/>
			<meta/>
		</INIT>
		<MOUSE_LEAVE public="1" static="1">
			<c path="String"/>
			<meta/>
		</MOUSE_LEAVE>
		<OPEN public="1" static="1">
			<c path="String"/>
			<meta/>
		</OPEN>
		<PASTE public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</PASTE>
		<REMOVED public="1" static="1">
			<c path="String"/>
			<meta/>
		</REMOVED>
		<REMOVED_FROM_STAGE public="1" static="1">
			<c path="String"/>
			<meta/>
		</REMOVED_FROM_STAGE>
		<RENDER public="1" static="1">
			<c path="String"/>
			<meta/>
		</RENDER>
		<RESIZE public="1" static="1">
			<c path="String"/>
			<meta/>
		</RESIZE>
		<SCROLL public="1" static="1">
			<c path="String"/>
			<meta/>
		</SCROLL>
		<SELECT public="1" static="1">
			<c path="String"/>
			<meta/>
		</SELECT>
		<SELECT_ALL public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</SELECT_ALL>
		<SOUND_COMPLETE public="1" static="1">
			<c path="String"/>
			<meta/>
		</SOUND_COMPLETE>
		<SUSPEND public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash11_3</e></m></meta>
		</SUSPEND>
		<TAB_CHILDREN_CHANGE public="1" static="1">
			<c path="String"/>
			<meta/>
		</TAB_CHILDREN_CHANGE>
		<TAB_ENABLED_CHANGE public="1" static="1">
			<c path="String"/>
			<meta/>
		</TAB_ENABLED_CHANGE>
		<TAB_INDEX_CHANGE public="1" static="1">
			<c path="String"/>
			<meta/>
		</TAB_INDEX_CHANGE>
		<TEXTURE_READY public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash11_3</e></m></meta>
		</TEXTURE_READY>
		<TEXT_INTERACTION_MODE_CHANGE public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</TEXT_INTERACTION_MODE_CHANGE>
		<UNLOAD public="1" static="1">
			<c path="String"/>
			<meta/>
		</UNLOAD>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<stopPropagation public="1" set="method"><f a=""><e path="Void"/></f></stopPropagation>
		<stopImmediatePropagation public="1" set="method"><f a=""><e path="Void"/></f></stopImmediatePropagation>
		<preventDefault public="1" set="method"><f a=""><e path="Void"/></f></preventDefault>
		<isDefaultPrevented public="1" set="method"><f a=""><e path="Bool"/></f></isDefaultPrevented>
		<formatToString public="1" set="method"><f a="className:?p1:?p2:?p3:?p4:?p5">
	<c path="String"/>
	<d/>
	<d/>
	<d/>
	<d/>
	<d/>
	<c path="String"/>
</f></formatToString>
		<clone public="1" set="method"><f a=""><c path="flash.events.Event"/></f></clone>
		<type public="1" set="null">
			<c path="String"/>
			<meta/>
		</type>
		<target public="1" set="null">
			<d/>
			<meta/>
		</target>
		<eventPhase public="1" set="null">
			<e path="flash.events.EventPhase"/>
			<meta/>
		</eventPhase>
		<currentTarget public="1" set="null">
			<d/>
			<meta/>
		</currentTarget>
		<cancelable public="1" set="null">
			<e path="Bool"/>
			<meta/>
		</cancelable>
		<bubbles public="1" set="null">
			<e path="Bool"/>
			<meta/>
		</bubbles>
		<new public="1" set="method"><f a="type:?bubbles:?cancelable">
	<c path="String"/>
	<e path="Bool"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></new>
		<meta/>
	</class>
	<enum path="flash.events.EventPhase" params="" file="C:\Motion-Twin\haxe\std/flash/events/EventPhase.hx">
		<CAPTURING_PHASE/>
		<BUBBLING_PHASE/>
		<AT_TARGET/>
		<meta><m n=":fakeEnum"><e>UInt</e></m></meta>
	</enum>
	<class path="flash.events.UncaughtErrorEvents" params="" file="C:\Motion-Twin\haxe\std/flash/events/UncaughtErrorEvents.hx" extern="1">
		<extends path="flash.events.EventDispatcher"/>
		<new public="1"><f a=""><e path="Void"/></f></new>
		<meta><m n=":require"><e>flash10_1</e></m></meta>
	</class>
	<class path="flash.filters.BitmapFilter" params="" file="C:\Motion-Twin\haxe\std/flash/filters/BitmapFilter.hx" extern="1">
		<clone public="1" set="method"><f a=""><c path="flash.filters.BitmapFilter"/></f></clone>
		<new public="1" set="method"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="flash.geom.ColorTransform" params="" file="C:\Motion-Twin\haxe\std/flash/geom/ColorTransform.hx" extern="1">
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<concat public="1" set="method"><f a="second">
	<c path="flash.geom.ColorTransform"/>
	<e path="Void"/>
</f></concat>
		<redOffset public="1">
			<c path="Float"/>
			<meta/>
		</redOffset>
		<redMultiplier public="1">
			<c path="Float"/>
			<meta/>
		</redMultiplier>
		<greenOffset public="1">
			<c path="Float"/>
			<meta/>
		</greenOffset>
		<greenMultiplier public="1">
			<c path="Float"/>
			<meta/>
		</greenMultiplier>
		<color public="1">
			<t path="UInt"/>
			<meta/>
		</color>
		<blueOffset public="1">
			<c path="Float"/>
			<meta/>
		</blueOffset>
		<blueMultiplier public="1">
			<c path="Float"/>
			<meta/>
		</blueMultiplier>
		<alphaOffset public="1">
			<c path="Float"/>
			<meta/>
		</alphaOffset>
		<alphaMultiplier public="1">
			<c path="Float"/>
			<meta/>
		</alphaMultiplier>
		<new public="1" set="method"><f a="?redMultiplier:?greenMultiplier:?blueMultiplier:?alphaMultiplier:?redOffset:?greenOffset:?blueOffset:?alphaOffset">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="flash.geom.Matrix" params="" file="C:\Motion-Twin\haxe\std/flash/geom/Matrix.hx" extern="1">
		<translate public="1" set="method"><f a="dx:dy">
	<c path="Float"/>
	<c path="Float"/>
	<e path="Void"/>
</f></translate>
		<transformPoint public="1" set="method"><f a="point">
	<c path="flash.geom.Point"/>
	<c path="flash.geom.Point"/>
</f></transformPoint>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<setTo public="1">
			<f a="aa:ba:ca:da:txa:tya">
				<c path="Float"/>
				<c path="Float"/>
				<c path="Float"/>
				<c path="Float"/>
				<c path="Float"/>
				<c path="Float"/>
				<e path="Void"/>
			</f>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</setTo>
		<scale public="1" set="method"><f a="sx:sy">
	<c path="Float"/>
	<c path="Float"/>
	<e path="Void"/>
</f></scale>
		<rotate public="1" set="method"><f a="angle">
	<c path="Float"/>
	<e path="Void"/>
</f></rotate>
		<invert public="1" set="method"><f a=""><e path="Void"/></f></invert>
		<identity public="1" set="method"><f a=""><e path="Void"/></f></identity>
		<deltaTransformPoint public="1" set="method"><f a="point">
	<c path="flash.geom.Point"/>
	<c path="flash.geom.Point"/>
</f></deltaTransformPoint>
		<createGradientBox public="1" set="method"><f a="width:height:?rotation:?tx:?ty">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<e path="Void"/>
</f></createGradientBox>
		<createBox public="1" set="method"><f a="scaleX:scaleY:?rotation:?tx:?ty">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<e path="Void"/>
</f></createBox>
		<copyRowTo public="1">
			<f a="row:vector3D">
				<t path="UInt"/>
				<c path="flash.geom.Vector3D"/>
				<e path="Void"/>
			</f>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</copyRowTo>
		<copyRowFrom public="1">
			<f a="row:vector3D">
				<t path="UInt"/>
				<c path="flash.geom.Vector3D"/>
				<e path="Void"/>
			</f>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</copyRowFrom>
		<copyFrom public="1">
			<f a="sourceMatrix">
				<c path="flash.geom.Matrix"/>
				<e path="Void"/>
			</f>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</copyFrom>
		<copyColumnTo public="1">
			<f a="column:vector3D">
				<t path="UInt"/>
				<c path="flash.geom.Vector3D"/>
				<e path="Void"/>
			</f>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</copyColumnTo>
		<copyColumnFrom public="1">
			<f a="column:vector3D">
				<t path="UInt"/>
				<c path="flash.geom.Vector3D"/>
				<e path="Void"/>
			</f>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</copyColumnFrom>
		<concat public="1" set="method"><f a="m">
	<c path="flash.geom.Matrix"/>
	<e path="Void"/>
</f></concat>
		<clone public="1" set="method"><f a=""><c path="flash.geom.Matrix"/></f></clone>
		<ty public="1">
			<c path="Float"/>
			<meta/>
		</ty>
		<tx public="1">
			<c path="Float"/>
			<meta/>
		</tx>
		<d public="1">
			<c path="Float"/>
			<meta/>
		</d>
		<c public="1">
			<c path="Float"/>
			<meta/>
		</c>
		<b public="1">
			<c path="Float"/>
			<meta/>
		</b>
		<a public="1">
			<c path="Float"/>
			<meta/>
		</a>
		<new public="1" set="method"><f a="?a:?b:?c:?d:?tx:?ty">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="flash.geom.Matrix3D" params="" file="C:\Motion-Twin\haxe\std/flash/geom/Matrix3D.hx" extern="1">
		<interpolate public="1" static="1"><f a="thisMat:toMat:percent">
	<c path="flash.geom.Matrix3D"/>
	<c path="flash.geom.Matrix3D"/>
	<c path="Float"/>
	<c path="flash.geom.Matrix3D"/>
</f></interpolate>
		<transpose public="1" set="method"><f a=""><e path="Void"/></f></transpose>
		<transformVectors public="1" set="method"><f a="vin:vout">
	<c path="flash.Vector"><c path="Float"/></c>
	<c path="flash.Vector"><c path="Float"/></c>
	<e path="Void"/>
</f></transformVectors>
		<transformVector public="1" set="method"><f a="v">
	<c path="flash.geom.Vector3D"/>
	<c path="flash.geom.Vector3D"/>
</f></transformVector>
		<recompose public="1" set="method"><f a="components:?orientationStyle">
	<c path="flash.Vector"><c path="flash.geom.Vector3D"/></c>
	<e path="flash.geom.Orientation3D"/>
	<e path="Bool"/>
</f></recompose>
		<prependTranslation public="1" set="method"><f a="x:y:z">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<e path="Void"/>
</f></prependTranslation>
		<prependScale public="1" set="method"><f a="xScale:yScale:zScale">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<e path="Void"/>
</f></prependScale>
		<prependRotation public="1" set="method"><f a="degrees:axis:?pivotPoint">
	<c path="Float"/>
	<c path="flash.geom.Vector3D"/>
	<c path="flash.geom.Vector3D"/>
	<e path="Void"/>
</f></prependRotation>
		<prepend public="1" set="method"><f a="rhs">
	<c path="flash.geom.Matrix3D"/>
	<e path="Void"/>
</f></prepend>
		<pointAt public="1" set="method"><f a="pos:?at:?up">
	<c path="flash.geom.Vector3D"/>
	<c path="flash.geom.Vector3D"/>
	<c path="flash.geom.Vector3D"/>
	<e path="Void"/>
</f></pointAt>
		<invert public="1" set="method"><f a=""><e path="Bool"/></f></invert>
		<interpolateTo public="1" set="method"><f a="toMat:percent">
	<c path="flash.geom.Matrix3D"/>
	<c path="Float"/>
	<e path="Void"/>
</f></interpolateTo>
		<identity public="1" set="method"><f a=""><e path="Void"/></f></identity>
		<deltaTransformVector public="1" set="method"><f a="v">
	<c path="flash.geom.Vector3D"/>
	<c path="flash.geom.Vector3D"/>
</f></deltaTransformVector>
		<decompose public="1" set="method"><f a="?orientationStyle">
	<e path="flash.geom.Orientation3D"/>
	<c path="flash.Vector"><c path="flash.geom.Vector3D"/></c>
</f></decompose>
		<copyToMatrix3D public="1">
			<f a="dest">
				<c path="flash.geom.Matrix3D"/>
				<e path="Void"/>
			</f>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</copyToMatrix3D>
		<copyRowTo public="1">
			<f a="row:vector3D">
				<t path="UInt"/>
				<c path="flash.geom.Vector3D"/>
				<e path="Void"/>
			</f>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</copyRowTo>
		<copyRowFrom public="1">
			<f a="row:vector3D">
				<t path="UInt"/>
				<c path="flash.geom.Vector3D"/>
				<e path="Void"/>
			</f>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</copyRowFrom>
		<copyRawDataTo public="1">
			<f a="vector:?index:?transpose">
				<c path="flash.Vector"><c path="Float"/></c>
				<t path="UInt"/>
				<e path="Bool"/>
				<e path="Void"/>
			</f>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</copyRawDataTo>
		<copyRawDataFrom public="1">
			<f a="vector:?index:?transpose">
				<c path="flash.Vector"><c path="Float"/></c>
				<t path="UInt"/>
				<e path="Bool"/>
				<e path="Void"/>
			</f>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</copyRawDataFrom>
		<copyFrom public="1">
			<f a="sourceMatrix3D">
				<c path="flash.geom.Matrix3D"/>
				<e path="Void"/>
			</f>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</copyFrom>
		<copyColumnTo public="1">
			<f a="column:vector3D">
				<t path="UInt"/>
				<c path="flash.geom.Vector3D"/>
				<e path="Void"/>
			</f>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</copyColumnTo>
		<copyColumnFrom public="1">
			<f a="column:vector3D">
				<t path="UInt"/>
				<c path="flash.geom.Vector3D"/>
				<e path="Void"/>
			</f>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</copyColumnFrom>
		<clone public="1" set="method"><f a=""><c path="flash.geom.Matrix3D"/></f></clone>
		<appendTranslation public="1" set="method"><f a="x:y:z">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<e path="Void"/>
</f></appendTranslation>
		<appendScale public="1" set="method"><f a="xScale:yScale:zScale">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<e path="Void"/>
</f></appendScale>
		<appendRotation public="1" set="method"><f a="degrees:axis:?pivotPoint">
	<c path="Float"/>
	<c path="flash.geom.Vector3D"/>
	<c path="flash.geom.Vector3D"/>
	<e path="Void"/>
</f></appendRotation>
		<append public="1" set="method"><f a="lhs">
	<c path="flash.geom.Matrix3D"/>
	<e path="Void"/>
</f></append>
		<rawData public="1">
			<c path="flash.Vector"><c path="Float"/></c>
			<meta/>
		</rawData>
		<position public="1">
			<c path="flash.geom.Vector3D"/>
			<meta/>
		</position>
		<determinant public="1" set="null">
			<c path="Float"/>
			<meta/>
		</determinant>
		<new public="1"><f a="?v">
	<c path="flash.Vector"><c path="Float"/></c>
	<e path="Void"/>
</f></new>
		<meta><m n=":require"><e>flash10</e></m></meta>
	</class>
	<enum path="flash.geom.Orientation3D" params="" file="C:\Motion-Twin\haxe\std/flash/geom/Orientation3D.hx">
		<QUATERNION/>
		<EULER_ANGLES/>
		<AXIS_ANGLE/>
		<meta><m n=":fakeEnum"><e>String</e></m></meta>
	</enum>
	<class path="flash.geom.PerspectiveProjection" params="" file="C:\Motion-Twin\haxe\std/flash/geom/PerspectiveProjection.hx" extern="1">
		<toMatrix3D public="1" set="method"><f a=""><c path="flash.geom.Matrix3D"/></f></toMatrix3D>
		<projectionCenter public="1">
			<c path="flash.geom.Point"/>
			<meta/>
		</projectionCenter>
		<focalLength public="1">
			<c path="Float"/>
			<meta/>
		</focalLength>
		<fieldOfView public="1">
			<c path="Float"/>
			<meta/>
		</fieldOfView>
		<new public="1"><f a=""><e path="Void"/></f></new>
		<meta><m n=":require"><e>flash10</e></m></meta>
	</class>
	<class path="flash.geom.Point" params="" file="C:\Motion-Twin\haxe\std/flash/geom/Point.hx" extern="1">
		<distance public="1" set="method" static="1"><f a="pt1:pt2">
	<c path="flash.geom.Point"/>
	<c path="flash.geom.Point"/>
	<c path="Float"/>
</f></distance>
		<interpolate public="1" set="method" static="1"><f a="pt1:pt2:f">
	<c path="flash.geom.Point"/>
	<c path="flash.geom.Point"/>
	<c path="Float"/>
	<c path="flash.geom.Point"/>
</f></interpolate>
		<polar public="1" set="method" static="1"><f a="len:angle">
	<c path="Float"/>
	<c path="Float"/>
	<c path="flash.geom.Point"/>
</f></polar>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<subtract public="1" set="method"><f a="v">
	<c path="flash.geom.Point"/>
	<c path="flash.geom.Point"/>
</f></subtract>
		<setTo public="1">
			<f a="xa:ya">
				<c path="Float"/>
				<c path="Float"/>
				<e path="Void"/>
			</f>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</setTo>
		<offset public="1" set="method"><f a="dx:dy">
	<c path="Float"/>
	<c path="Float"/>
	<e path="Void"/>
</f></offset>
		<normalize public="1" set="method"><f a="thickness">
	<c path="Float"/>
	<e path="Void"/>
</f></normalize>
		<equals public="1" set="method"><f a="toCompare">
	<c path="flash.geom.Point"/>
	<e path="Bool"/>
</f></equals>
		<copyFrom public="1">
			<f a="sourcePoint">
				<c path="flash.geom.Point"/>
				<e path="Void"/>
			</f>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</copyFrom>
		<clone public="1" set="method"><f a=""><c path="flash.geom.Point"/></f></clone>
		<add public="1" set="method"><f a="v">
	<c path="flash.geom.Point"/>
	<c path="flash.geom.Point"/>
</f></add>
		<y public="1">
			<c path="Float"/>
			<meta/>
		</y>
		<x public="1">
			<c path="Float"/>
			<meta/>
		</x>
		<length public="1" set="null">
			<c path="Float"/>
			<meta/>
		</length>
		<new public="1" set="method"><f a="?x:?y">
	<c path="Float"/>
	<c path="Float"/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="flash.geom.Rectangle" params="" file="C:\Motion-Twin\haxe\std/flash/geom/Rectangle.hx" extern="1">
		<union public="1" set="method"><f a="toUnion">
	<c path="flash.geom.Rectangle"/>
	<c path="flash.geom.Rectangle"/>
</f></union>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<setTo public="1">
			<f a="xa:ya:widtha:heighta">
				<c path="Float"/>
				<c path="Float"/>
				<c path="Float"/>
				<c path="Float"/>
				<e path="Void"/>
			</f>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</setTo>
		<setEmpty public="1" set="method"><f a=""><e path="Void"/></f></setEmpty>
		<offsetPoint public="1" set="method"><f a="point">
	<c path="flash.geom.Point"/>
	<e path="Void"/>
</f></offsetPoint>
		<offset public="1" set="method"><f a="dx:dy">
	<c path="Float"/>
	<c path="Float"/>
	<e path="Void"/>
</f></offset>
		<isEmpty public="1" set="method"><f a=""><e path="Bool"/></f></isEmpty>
		<intersects public="1" set="method"><f a="toIntersect">
	<c path="flash.geom.Rectangle"/>
	<e path="Bool"/>
</f></intersects>
		<intersection public="1" set="method"><f a="toIntersect">
	<c path="flash.geom.Rectangle"/>
	<c path="flash.geom.Rectangle"/>
</f></intersection>
		<inflatePoint public="1" set="method"><f a="point">
	<c path="flash.geom.Point"/>
	<e path="Void"/>
</f></inflatePoint>
		<inflate public="1" set="method"><f a="dx:dy">
	<c path="Float"/>
	<c path="Float"/>
	<e path="Void"/>
</f></inflate>
		<equals public="1" set="method"><f a="toCompare">
	<c path="flash.geom.Rectangle"/>
	<e path="Bool"/>
</f></equals>
		<copyFrom public="1">
			<f a="sourceRect">
				<c path="flash.geom.Rectangle"/>
				<e path="Void"/>
			</f>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</copyFrom>
		<containsRect public="1" set="method"><f a="rect">
	<c path="flash.geom.Rectangle"/>
	<e path="Bool"/>
</f></containsRect>
		<containsPoint public="1" set="method"><f a="point">
	<c path="flash.geom.Point"/>
	<e path="Bool"/>
</f></containsPoint>
		<contains public="1" set="method"><f a="x:y">
	<c path="Float"/>
	<c path="Float"/>
	<e path="Bool"/>
</f></contains>
		<clone public="1" set="method"><f a=""><c path="flash.geom.Rectangle"/></f></clone>
		<y public="1">
			<c path="Float"/>
			<meta/>
		</y>
		<x public="1">
			<c path="Float"/>
			<meta/>
		</x>
		<width public="1">
			<c path="Float"/>
			<meta/>
		</width>
		<topLeft public="1">
			<c path="flash.geom.Point"/>
			<meta/>
		</topLeft>
		<top public="1">
			<c path="Float"/>
			<meta/>
		</top>
		<size public="1">
			<c path="flash.geom.Point"/>
			<meta/>
		</size>
		<right public="1">
			<c path="Float"/>
			<meta/>
		</right>
		<left public="1">
			<c path="Float"/>
			<meta/>
		</left>
		<height public="1">
			<c path="Float"/>
			<meta/>
		</height>
		<bottomRight public="1">
			<c path="flash.geom.Point"/>
			<meta/>
		</bottomRight>
		<bottom public="1">
			<c path="Float"/>
			<meta/>
		</bottom>
		<new public="1" set="method"><f a="?x:?y:?width:?height">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="flash.geom.Transform" params="" file="C:\Motion-Twin\haxe\std/flash/geom/Transform.hx" extern="1">
		<getRelativeMatrix3D public="1">
			<f a="relativeTo">
				<c path="flash.display.DisplayObject"/>
				<c path="flash.geom.Matrix3D"/>
			</f>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</getRelativeMatrix3D>
		<pixelBounds public="1" set="null">
			<c path="flash.geom.Rectangle"/>
			<meta/>
		</pixelBounds>
		<perspectiveProjection public="1">
			<c path="flash.geom.PerspectiveProjection"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</perspectiveProjection>
		<matrix3D public="1">
			<c path="flash.geom.Matrix3D"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</matrix3D>
		<matrix public="1">
			<c path="flash.geom.Matrix"/>
			<meta/>
		</matrix>
		<concatenatedMatrix public="1" set="null">
			<c path="flash.geom.Matrix"/>
			<meta/>
		</concatenatedMatrix>
		<concatenatedColorTransform public="1" set="null">
			<c path="flash.geom.ColorTransform"/>
			<meta/>
		</concatenatedColorTransform>
		<colorTransform public="1">
			<c path="flash.geom.ColorTransform"/>
			<meta/>
		</colorTransform>
		<new public="1" set="method"><f a="displayObject">
	<c path="flash.display.DisplayObject"/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="flash.geom.Vector3D" params="" file="C:\Motion-Twin\haxe\std/flash/geom/Vector3D.hx" extern="1">
		<X_AXIS public="1" static="1">
			<c path="flash.geom.Vector3D"/>
			<meta/>
		</X_AXIS>
		<Y_AXIS public="1" static="1">
			<c path="flash.geom.Vector3D"/>
			<meta/>
		</Y_AXIS>
		<Z_AXIS public="1" static="1">
			<c path="flash.geom.Vector3D"/>
			<meta/>
		</Z_AXIS>
		<angleBetween public="1" static="1"><f a="a:b">
	<c path="flash.geom.Vector3D"/>
	<c path="flash.geom.Vector3D"/>
	<c path="Float"/>
</f></angleBetween>
		<distance public="1" static="1"><f a="pt1:pt2">
	<c path="flash.geom.Vector3D"/>
	<c path="flash.geom.Vector3D"/>
	<c path="Float"/>
</f></distance>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<subtract public="1" set="method"><f a="a">
	<c path="flash.geom.Vector3D"/>
	<c path="flash.geom.Vector3D"/>
</f></subtract>
		<setTo public="1">
			<f a="xa:ya:za">
				<c path="Float"/>
				<c path="Float"/>
				<c path="Float"/>
				<e path="Void"/>
			</f>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</setTo>
		<scaleBy public="1" set="method"><f a="s">
	<c path="Float"/>
	<e path="Void"/>
</f></scaleBy>
		<project public="1" set="method"><f a=""><e path="Void"/></f></project>
		<normalize public="1" set="method"><f a=""><c path="Float"/></f></normalize>
		<negate public="1" set="method"><f a=""><e path="Void"/></f></negate>
		<nearEquals public="1" set="method"><f a="toCompare:tolerance:?allFour">
	<c path="flash.geom.Vector3D"/>
	<c path="Float"/>
	<e path="Bool"/>
	<e path="Bool"/>
</f></nearEquals>
		<incrementBy public="1" set="method"><f a="a">
	<c path="flash.geom.Vector3D"/>
	<e path="Void"/>
</f></incrementBy>
		<equals public="1" set="method"><f a="toCompare:?allFour">
	<c path="flash.geom.Vector3D"/>
	<e path="Bool"/>
	<e path="Bool"/>
</f></equals>
		<dotProduct public="1" set="method"><f a="a">
	<c path="flash.geom.Vector3D"/>
	<c path="Float"/>
</f></dotProduct>
		<decrementBy public="1" set="method"><f a="a">
	<c path="flash.geom.Vector3D"/>
	<e path="Void"/>
</f></decrementBy>
		<crossProduct public="1" set="method"><f a="a">
	<c path="flash.geom.Vector3D"/>
	<c path="flash.geom.Vector3D"/>
</f></crossProduct>
		<copyFrom public="1">
			<f a="sourceVector3D">
				<c path="flash.geom.Vector3D"/>
				<e path="Void"/>
			</f>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</copyFrom>
		<clone public="1" set="method"><f a=""><c path="flash.geom.Vector3D"/></f></clone>
		<add public="1" set="method"><f a="a">
	<c path="flash.geom.Vector3D"/>
	<c path="flash.geom.Vector3D"/>
</f></add>
		<z public="1">
			<c path="Float"/>
			<meta/>
		</z>
		<y public="1">
			<c path="Float"/>
			<meta/>
		</y>
		<x public="1">
			<c path="Float"/>
			<meta/>
		</x>
		<w public="1">
			<c path="Float"/>
			<meta/>
		</w>
		<lengthSquared public="1" set="null">
			<c path="Float"/>
			<meta/>
		</lengthSquared>
		<length public="1" set="null">
			<c path="Float"/>
			<meta/>
		</length>
		<new public="1"><f a="?x:?y:?z:?w">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<e path="Void"/>
</f></new>
		<meta><m n=":require"><e>flash10</e></m></meta>
	</class>
	<class path="flash.media.Camera" params="" file="C:\Motion-Twin\haxe\std/flash/media/Camera.hx" extern="1">
		<extends path="flash.events.EventDispatcher"/>
		<isSupported public="1" static="1">
			<e path="Bool"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</isSupported>
		<names public="1" set="null" static="1">
			<c path="Array"><d/></c>
			<meta/>
		</names>
		<_scanHardware public="1" static="1">
			<f a=""><e path="Void"/></f>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</_scanHardware>
		<getCamera public="1" set="method" static="1"><f a="?name">
	<c path="String"/>
	<c path="flash.media.Camera"/>
</f></getCamera>
		<setQuality public="1" set="method"><f a="bandwidth:quality">
	<c path="Int"/>
	<c path="Int"/>
	<e path="Void"/>
</f></setQuality>
		<setMotionLevel public="1" set="method"><f a="motionLevel:?timeout">
	<c path="Int"/>
	<c path="Int"/>
	<e path="Void"/>
</f></setMotionLevel>
		<setMode public="1" set="method"><f a="width:height:fps:?favorArea">
	<c path="Int"/>
	<c path="Int"/>
	<c path="Float"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></setMode>
		<setLoopback public="1" set="method"><f a="?compress">
	<e path="Bool"/>
	<e path="Void"/>
</f></setLoopback>
		<setKeyFrameInterval public="1" set="method"><f a="keyFrameInterval">
	<c path="Int"/>
	<e path="Void"/>
</f></setKeyFrameInterval>
		<setCursor public="1" set="method"><f a="value">
	<e path="Bool"/>
	<e path="Void"/>
</f></setCursor>
		<width public="1" set="null">
			<c path="Int"/>
			<meta/>
		</width>
		<quality public="1" set="null">
			<c path="Int"/>
			<meta/>
		</quality>
		<position public="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash11_2</e></m></meta>
		</position>
		<name public="1" set="null">
			<c path="String"/>
			<meta/>
		</name>
		<muted public="1" set="null">
			<e path="Bool"/>
			<meta/>
		</muted>
		<motionTimeout public="1" set="null">
			<c path="Int"/>
			<meta/>
		</motionTimeout>
		<motionLevel public="1" set="null">
			<c path="Int"/>
			<meta/>
		</motionLevel>
		<loopback public="1" set="null">
			<e path="Bool"/>
			<meta/>
		</loopback>
		<keyFrameInterval public="1" set="null">
			<c path="Int"/>
			<meta/>
		</keyFrameInterval>
		<index public="1" set="null">
			<c path="Int"/>
			<meta/>
		</index>
		<height public="1" set="null">
			<c path="Int"/>
			<meta/>
		</height>
		<fps public="1" set="null">
			<c path="Float"/>
			<meta/>
		</fps>
		<currentFPS public="1" set="null">
			<c path="Float"/>
			<meta/>
		</currentFPS>
		<bandwidth public="1" set="null">
			<c path="Int"/>
			<meta/>
		</bandwidth>
		<activityLevel public="1" set="null">
			<c path="Float"/>
			<meta/>
		</activityLevel>
		<new public="1" set="method"><f a=""><e path="Void"/></f></new>
		<meta><m n=":final"/></meta>
	</class>
	<class path="flash.media.Microphone" params="" file="C:\Motion-Twin\haxe\std/flash/media/Microphone.hx" extern="1">
		<extends path="flash.events.EventDispatcher"/>
		<isSupported public="1" static="1">
			<e path="Bool"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</isSupported>
		<names public="1" set="null" static="1">
			<c path="Array"><d/></c>
			<meta/>
		</names>
		<getEnhancedMicrophone public="1" static="1">
			<f a="?index">
				<c path="Int"/>
				<c path="flash.media.Microphone"/>
			</f>
			<meta><m n=":require"><e>flash10_2</e></m></meta>
		</getEnhancedMicrophone>
		<getMicrophone public="1" set="method" static="1"><f a="?index">
	<c path="Int"/>
	<c path="flash.media.Microphone"/>
</f></getMicrophone>
		<setUseEchoSuppression public="1" set="method"><f a="useEchoSuppression">
	<e path="Bool"/>
	<e path="Void"/>
</f></setUseEchoSuppression>
		<setSilenceLevel public="1" set="method"><f a="silenceLevel:?timeout">
	<c path="Float"/>
	<c path="Int"/>
	<e path="Void"/>
</f></setSilenceLevel>
		<setLoopBack public="1" set="method"><f a="?state">
	<e path="Bool"/>
	<e path="Void"/>
</f></setLoopBack>
		<useEchoSuppression public="1" set="null">
			<e path="Bool"/>
			<meta/>
		</useEchoSuppression>
		<soundTransform public="1">
			<c path="flash.media.SoundTransform"/>
			<meta/>
		</soundTransform>
		<silenceTimeout public="1" set="null">
			<c path="Int"/>
			<meta/>
		</silenceTimeout>
		<silenceLevel public="1" set="null">
			<c path="Float"/>
			<meta/>
		</silenceLevel>
		<rate public="1">
			<c path="Int"/>
			<meta/>
		</rate>
		<noiseSuppressionLevel public="1">
			<c path="Int"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</noiseSuppressionLevel>
		<name public="1" set="null">
			<c path="String"/>
			<meta/>
		</name>
		<muted public="1" set="null">
			<e path="Bool"/>
			<meta/>
		</muted>
		<index public="1" set="null">
			<c path="Int"/>
			<meta/>
		</index>
		<gain public="1">
			<c path="Float"/>
			<meta/>
		</gain>
		<framesPerPacket public="1">
			<c path="Int"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</framesPerPacket>
		<enhancedOptions public="1">
			<c path="flash.media.MicrophoneEnhancedOptions"/>
			<meta><m n=":require"><e>flash10_2</e></m></meta>
		</enhancedOptions>
		<encodeQuality public="1">
			<c path="Int"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</encodeQuality>
		<enableVAD public="1">
			<e path="Bool"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</enableVAD>
		<codec public="1">
			<e path="flash.media.SoundCodec"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</codec>
		<activityLevel public="1" set="null">
			<c path="Float"/>
			<meta/>
		</activityLevel>
		<new public="1" set="method"><f a=""><e path="Void"/></f></new>
		<meta><m n=":final"/></meta>
	</class>
	<enum path="flash.media.MicrophoneEnhancedMode" params="" file="C:\Motion-Twin\haxe\std/flash/media/MicrophoneEnhancedMode.hx">
		<SPEAKER_MUTE/>
		<OFF/>
		<HEADSET/>
		<HALF_DUPLEX/>
		<FULL_DUPLEX/>
		<meta>
			<m n=":fakeEnum"><e>String</e></m>
			<m n=":require"><e>flash10_2</e></m>
		</meta>
	</enum>
	<class path="flash.media.MicrophoneEnhancedOptions" params="" file="C:\Motion-Twin\haxe\std/flash/media/MicrophoneEnhancedOptions.hx" extern="1">
		<nonLinearProcessing public="1">
			<e path="Bool"/>
			<meta/>
		</nonLinearProcessing>
		<mode public="1">
			<e path="flash.media.MicrophoneEnhancedMode"/>
			<meta/>
		</mode>
		<isVoiceDetected public="1">
			<c path="Int"/>
			<meta/>
		</isVoiceDetected>
		<echoPath public="1">
			<c path="Int"/>
			<meta/>
		</echoPath>
		<autoGain public="1">
			<e path="Bool"/>
			<meta/>
		</autoGain>
		<new public="1"><f a=""><e path="Void"/></f></new>
		<meta>
			<m n=":final"/>
			<m n=":require"><e>flash10_2</e></m>
		</meta>
	</class>
	<enum path="flash.media.SoundCodec" params="" file="C:\Motion-Twin\haxe\std/flash/media/SoundCodec.hx">
		<SPEEX/>
		<PCMU/>
		<PCMA/>
		<NELLYMOSER/>
		<meta><m n=":fakeEnum"><e>String</e></m></meta>
	</enum>
	<class path="flash.media.SoundTransform" params="" file="C:\Motion-Twin\haxe\std/flash/media/SoundTransform.hx" extern="1">
		<volume public="1">
			<c path="Float"/>
			<meta/>
		</volume>
		<rightToRight public="1">
			<c path="Float"/>
			<meta/>
		</rightToRight>
		<rightToLeft public="1">
			<c path="Float"/>
			<meta/>
		</rightToLeft>
		<pan public="1">
			<c path="Float"/>
			<meta/>
		</pan>
		<leftToRight public="1">
			<c path="Float"/>
			<meta/>
		</leftToRight>
		<leftToLeft public="1">
			<c path="Float"/>
			<meta/>
		</leftToLeft>
		<new public="1" set="method"><f a="?vol:?panning">
	<c path="Float"/>
	<c path="Float"/>
	<e path="Void"/>
</f></new>
		<meta><m n=":final"/></meta>
	</class>
	<class path="flash.media.StageVideo" params="" file="C:\Motion-Twin\haxe\std/flash/media/StageVideo.hx" extern="1">
		<extends path="flash.events.EventDispatcher"/>
		<attachNetStream public="1" set="method"><f a="netStream">
	<c path="flash.net.NetStream"/>
	<e path="Void"/>
</f></attachNetStream>
		<zoom public="1">
			<c path="flash.geom.Point"/>
			<meta/>
		</zoom>
		<viewPort public="1">
			<c path="flash.geom.Rectangle"/>
			<meta/>
		</viewPort>
		<videoWidth public="1" set="null">
			<c path="Int"/>
			<meta/>
		</videoWidth>
		<videoHeight public="1" set="null">
			<c path="Int"/>
			<meta/>
		</videoHeight>
		<pan public="1">
			<c path="flash.geom.Point"/>
			<meta/>
		</pan>
		<depth public="1">
			<c path="Int"/>
			<meta/>
		</depth>
		<colorSpaces public="1" set="null">
			<c path="flash.Vector"><c path="String"/></c>
			<meta/>
		</colorSpaces>
		<new public="1"><f a=""><e path="Void"/></f></new>
		<meta><m n=":require"><e>flash10_2</e></m></meta>
	</class>
	<class path="flash.media.VideoStreamSettings" params="" file="C:\Motion-Twin\haxe\std/flash/media/VideoStreamSettings.hx" extern="1">
		<setQuality public="1" set="method"><f a="bandwidth:quality">
	<c path="Int"/>
	<c path="Int"/>
	<e path="Void"/>
</f></setQuality>
		<setMode public="1" set="method"><f a="width:height:fps">
	<c path="Int"/>
	<c path="Int"/>
	<c path="Float"/>
	<e path="Void"/>
</f></setMode>
		<setKeyFrameInterval public="1" set="method"><f a="keyFrameInterval">
	<c path="Int"/>
	<e path="Void"/>
</f></setKeyFrameInterval>
		<width public="1" set="null">
			<c path="Int"/>
			<meta/>
		</width>
		<quality public="1" set="null">
			<c path="Int"/>
			<meta/>
		</quality>
		<keyFrameInterval public="1" set="null">
			<c path="Int"/>
			<meta/>
		</keyFrameInterval>
		<height public="1" set="null">
			<c path="Int"/>
			<meta/>
		</height>
		<fps public="1" set="null">
			<c path="Float"/>
			<meta/>
		</fps>
		<codec public="1" set="null">
			<c path="String"/>
			<meta/>
		</codec>
		<bandwidth public="1" set="null">
			<c path="Int"/>
			<meta/>
		</bandwidth>
		<new public="1" set="method"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="flash.net.NetConnection" params="" file="C:\Motion-Twin\haxe\std/flash/net/NetConnection.hx" extern="1">
		<extends path="flash.events.EventDispatcher"/>
		<defaultObjectEncoding public="1" static="1">
			<t path="UInt"/>
			<meta/>
		</defaultObjectEncoding>
		<connect public="1" set="method"><f a="command:?p1:?p2:?p3:?p4:?p5">
	<c path="String"/>
	<d/>
	<d/>
	<d/>
	<d/>
	<d/>
	<e path="Void"/>
</f></connect>
		<close public="1" set="method"><f a=""><e path="Void"/></f></close>
		<call public="1" set="method"><f a="command:responder:?p1:?p2:?p3:?p4:?p5">
	<c path="String"/>
	<c path="flash.net.Responder"/>
	<d/>
	<d/>
	<d/>
	<d/>
	<d/>
	<e path="Void"/>
</f></call>
		<addHeader public="1" set="method"><f a="operation:?mustUnderstand:?param">
	<c path="String"/>
	<e path="Bool"/>
	<d/>
	<e path="Void"/>
</f></addHeader>
		<usingTLS public="1" set="null">
			<e path="Bool"/>
			<meta/>
		</usingTLS>
		<uri public="1" set="null">
			<c path="String"/>
			<meta/>
		</uri>
		<unconnectedPeerStreams public="1">
			<c path="Array"><d/></c>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</unconnectedPeerStreams>
		<proxyType public="1">
			<c path="String"/>
			<meta/>
		</proxyType>
		<protocol public="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</protocol>
		<objectEncoding public="1">
			<t path="UInt"/>
			<meta/>
		</objectEncoding>
		<nearNonce public="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</nearNonce>
		<nearID public="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</nearID>
		<maxPeerConnections public="1">
			<t path="UInt"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</maxPeerConnections>
		<farNonce public="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</farNonce>
		<farID public="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</farID>
		<connectedProxyType public="1" set="null">
			<c path="String"/>
			<meta/>
		</connectedProxyType>
		<connected public="1" set="null">
			<e path="Bool"/>
			<meta/>
		</connected>
		<client public="1">
			<d/>
			<meta/>
		</client>
		<new public="1" set="method"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="flash.net.NetStream" params="" file="C:\Motion-Twin\haxe\std/flash/net/NetStream.hx" extern="1">
		<extends path="flash.events.EventDispatcher"/>
		<CONNECT_TO_FMS public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</CONNECT_TO_FMS>
		<DIRECT_CONNECTIONS public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</DIRECT_CONNECTIONS>
		<togglePause public="1" set="method"><f a=""><e path="Void"/></f></togglePause>
		<step public="1">
			<f a="frames">
				<c path="Int"/>
				<e path="Void"/>
			</f>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</step>
		<send public="1" set="method"><f a="handlerName:?p1:?p2:?p3:?p4:?p5">
	<c path="String"/>
	<d/>
	<d/>
	<d/>
	<d/>
	<d/>
	<e path="Void"/>
</f></send>
		<seek public="1" set="method"><f a="offset">
	<c path="Float"/>
	<e path="Void"/>
</f></seek>
		<resume public="1" set="method"><f a=""><e path="Void"/></f></resume>
		<receiveVideoFPS public="1" set="method"><f a="FPS">
	<c path="Float"/>
	<e path="Void"/>
</f></receiveVideoFPS>
		<receiveVideo public="1" set="method"><f a="flag">
	<e path="Bool"/>
	<e path="Void"/>
</f></receiveVideo>
		<receiveAudio public="1" set="method"><f a="flag">
	<e path="Bool"/>
	<e path="Void"/>
</f></receiveAudio>
		<publish public="1" set="method"><f a="?name:?type">
	<c path="String"/>
	<c path="String"/>
	<e path="Void"/>
</f></publish>
		<play2 public="1">
			<f a="param">
				<c path="flash.net.NetStreamPlayOptions"/>
				<e path="Void"/>
			</f>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</play2>
		<play public="1" set="method"><f a="?p1:?p2:?p3:?p4:?p5">
	<d/>
	<d/>
	<d/>
	<d/>
	<d/>
	<e path="Void"/>
</f></play>
		<pause public="1" set="method"><f a=""><e path="Void"/></f></pause>
		<onPeerConnect public="1">
			<f a="subscriber">
				<c path="flash.net.NetStream"/>
				<e path="Bool"/>
			</f>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</onPeerConnect>
		<dispose public="1">
			<f a=""><e path="Void"/></f>
			<meta><m n=":require"><e>flash11_2</e></m></meta>
		</dispose>
		<close public="1" set="method"><f a=""><e path="Void"/></f></close>
		<attachCamera public="1" set="method"><f a="theCamera:?snapshotMilliseconds">
	<c path="flash.media.Camera"/>
	<c path="Int"/>
	<e path="Void"/>
</f></attachCamera>
		<attachAudio public="1" set="method"><f a="microphone">
	<c path="flash.media.Microphone"/>
	<e path="Void"/>
</f></attachAudio>
		<attach public="1">
			<f a="connection">
				<c path="flash.net.NetConnection"/>
				<e path="Void"/>
			</f>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</attach>
		<appendBytesAction public="1">
			<f a="netStreamAppendBytesAction">
				<c path="String"/>
				<e path="Void"/>
			</f>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</appendBytesAction>
		<appendBytes public="1">
			<f a="bytes">
				<c path="flash.utils.ByteArray"/>
				<e path="Void"/>
			</f>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</appendBytes>
		<videoStreamSettings public="1">
			<c path="flash.media.VideoStreamSettings"/>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</videoStreamSettings>
		<videoSampleAccess public="1">
			<e path="Bool"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</videoSampleAccess>
		<videoReliable public="1">
			<e path="Bool"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</videoReliable>
		<videoCodec public="1" set="null">
			<t path="UInt"/>
			<meta/>
		</videoCodec>
		<useJitterBuffer public="1">
			<e path="Bool"/>
			<meta><m n=":require"><e>flash11_3</e></m></meta>
		</useJitterBuffer>
		<useHardwareDecoder public="1">
			<e path="Bool"/>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</useHardwareDecoder>
		<time public="1" set="null">
			<c path="Float"/>
			<meta/>
		</time>
		<soundTransform public="1">
			<c path="flash.media.SoundTransform"/>
			<meta/>
		</soundTransform>
		<peerStreams public="1">
			<c path="Array"><d/></c>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</peerStreams>
		<objectEncoding public="1" set="null">
			<t path="UInt"/>
			<meta/>
		</objectEncoding>
		<nearNonce public="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</nearNonce>
		<multicastWindowDuration public="1">
			<c path="Float"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</multicastWindowDuration>
		<multicastRelayMarginDuration public="1">
			<c path="Float"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</multicastRelayMarginDuration>
		<multicastPushNeighborLimit public="1">
			<c path="Float"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</multicastPushNeighborLimit>
		<multicastInfo public="1">
			<c path="flash.net.NetStreamMulticastInfo"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</multicastInfo>
		<multicastFetchPeriod public="1">
			<c path="Float"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</multicastFetchPeriod>
		<multicastAvailabilityUpdatePeriod public="1">
			<c path="Float"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</multicastAvailabilityUpdatePeriod>
		<multicastAvailabilitySendToAll public="1">
			<e path="Bool"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</multicastAvailabilitySendToAll>
		<maxPauseBufferTime public="1">
			<c path="Float"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</maxPauseBufferTime>
		<liveDelay public="1" set="null">
			<c path="Float"/>
			<meta/>
		</liveDelay>
		<info public="1">
			<c path="flash.net.NetStreamInfo"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</info>
		<inBufferSeek public="1">
			<e path="Bool"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</inBufferSeek>
		<farNonce public="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</farNonce>
		<farID public="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</farID>
		<decodedFrames public="1" set="null">
			<t path="UInt"/>
			<meta/>
		</decodedFrames>
		<dataReliable public="1">
			<e path="Bool"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</dataReliable>
		<currentFPS public="1" set="null">
			<c path="Float"/>
			<meta/>
		</currentFPS>
		<client public="1">
			<d/>
			<meta/>
		</client>
		<checkPolicyFile public="1">
			<e path="Bool"/>
			<meta/>
		</checkPolicyFile>
		<bytesTotal public="1" set="null">
			<t path="UInt"/>
			<meta/>
		</bytesTotal>
		<bytesLoaded public="1" set="null">
			<t path="UInt"/>
			<meta/>
		</bytesLoaded>
		<bufferTimeMax public="1">
			<c path="Float"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</bufferTimeMax>
		<bufferTime public="1">
			<c path="Float"/>
			<meta/>
		</bufferTime>
		<bufferLength public="1" set="null">
			<c path="Float"/>
			<meta/>
		</bufferLength>
		<backBufferTime public="1">
			<c path="Float"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</backBufferTime>
		<backBufferLength public="1">
			<c path="Float"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</backBufferLength>
		<audioSampleAccess public="1">
			<e path="Bool"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</audioSampleAccess>
		<audioReliable public="1">
			<e path="Bool"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</audioReliable>
		<audioCodec public="1" set="null">
			<t path="UInt"/>
			<meta/>
		</audioCodec>
		<new public="1" set="method"><f a="connection:?peerID">
	<c path="flash.net.NetConnection"/>
	<c path="String"/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="flash.net.NetStreamInfo" params="" file="C:\Motion-Twin\haxe\std/flash/net/NetStreamInfo.hx" extern="1">
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<xmpData public="1" set="null">
			<d/>
			<meta/>
		</xmpData>
		<videoLossRate public="1">
			<c path="Float"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</videoLossRate>
		<videoBytesPerSecond public="1" set="null">
			<c path="Float"/>
			<meta/>
		</videoBytesPerSecond>
		<videoByteCount public="1" set="null">
			<c path="Float"/>
			<meta/>
		</videoByteCount>
		<videoBufferLength public="1" set="null">
			<c path="Float"/>
			<meta/>
		</videoBufferLength>
		<videoBufferByteLength public="1" set="null">
			<c path="Float"/>
			<meta/>
		</videoBufferByteLength>
		<uri public="1" set="null">
			<c path="String"/>
			<meta/>
		</uri>
		<resourceName public="1" set="null">
			<c path="String"/>
			<meta/>
		</resourceName>
		<playbackBytesPerSecond public="1" set="null">
			<c path="Float"/>
			<meta/>
		</playbackBytesPerSecond>
		<metaData public="1" set="null">
			<d/>
			<meta/>
		</metaData>
		<maxBytesPerSecond public="1" set="null">
			<c path="Float"/>
			<meta/>
		</maxBytesPerSecond>
		<isLive public="1" set="null">
			<e path="Bool"/>
			<meta/>
		</isLive>
		<droppedFrames public="1" set="null">
			<c path="Float"/>
			<meta/>
		</droppedFrames>
		<dataBytesPerSecond public="1" set="null">
			<c path="Float"/>
			<meta/>
		</dataBytesPerSecond>
		<dataByteCount public="1" set="null">
			<c path="Float"/>
			<meta/>
		</dataByteCount>
		<dataBufferLength public="1" set="null">
			<c path="Float"/>
			<meta/>
		</dataBufferLength>
		<dataBufferByteLength public="1" set="null">
			<c path="Float"/>
			<meta/>
		</dataBufferByteLength>
		<currentBytesPerSecond public="1" set="null">
			<c path="Float"/>
			<meta/>
		</currentBytesPerSecond>
		<byteCount public="1" set="null">
			<c path="Float"/>
			<meta/>
		</byteCount>
		<audioLossRate public="1" set="null">
			<c path="Float"/>
			<meta/>
		</audioLossRate>
		<audioBytesPerSecond public="1" set="null">
			<c path="Float"/>
			<meta/>
		</audioBytesPerSecond>
		<audioByteCount public="1" set="null">
			<c path="Float"/>
			<meta/>
		</audioByteCount>
		<audioBufferLength public="1" set="null">
			<c path="Float"/>
			<meta/>
		</audioBufferLength>
		<audioBufferByteLength public="1" set="null">
			<c path="Float"/>
			<meta/>
		</audioBufferByteLength>
		<SRTT public="1" set="null">
			<c path="Float"/>
			<meta/>
		</SRTT>
		<new public="1" set="method"><f a="curBPS:byteCount:maxBPS:audioBPS:audioByteCount:videoBPS:videoByteCount:dataBPS:dataByteCount:playbackBPS:droppedFrames:audioBufferByteLength:videoBufferByteLength:dataBufferByteLength:audioBufferLength:videoBufferLength:dataBufferLength:srtt:audioLossRate:videoLossRate:?metaData:?xmpData:?uri:?resourceName:?isLive">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<d/>
	<d/>
	<c path="String"/>
	<c path="String"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></new>
		<meta><m n=":final"/></meta>
	</class>
	<class path="flash.net.NetStreamMulticastInfo" params="" file="C:\Motion-Twin\haxe\std/flash/net/NetStreamMulticastInfo.hx" extern="1">
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<sendDataBytesPerSecond public="1" set="null">
			<c path="Float"/>
			<meta/>
		</sendDataBytesPerSecond>
		<sendControlBytesPerSecondToServer public="1" set="null">
			<c path="Float"/>
			<meta/>
		</sendControlBytesPerSecondToServer>
		<sendControlBytesPerSecond public="1" set="null">
			<c path="Float"/>
			<meta/>
		</sendControlBytesPerSecond>
		<receiveDataBytesPerSecondFromServer public="1" set="null">
			<c path="Float"/>
			<meta/>
		</receiveDataBytesPerSecondFromServer>
		<receiveDataBytesPerSecondFromIPMulticast public="1" set="null">
			<c path="Float"/>
			<meta/>
		</receiveDataBytesPerSecondFromIPMulticast>
		<receiveDataBytesPerSecond public="1" set="null">
			<c path="Float"/>
			<meta/>
		</receiveDataBytesPerSecond>
		<receiveControlBytesPerSecond public="1" set="null">
			<c path="Float"/>
			<meta/>
		</receiveControlBytesPerSecond>
		<fragmentsRequestedFromPeers public="1" set="null">
			<c path="Float"/>
			<meta/>
		</fragmentsRequestedFromPeers>
		<fragmentsRequestedByPeers public="1" set="null">
			<c path="Float"/>
			<meta/>
		</fragmentsRequestedByPeers>
		<fragmentsReceivedFromServer public="1" set="null">
			<c path="Float"/>
			<meta/>
		</fragmentsReceivedFromServer>
		<fragmentsReceivedFromIPMulticast public="1" set="null">
			<c path="Float"/>
			<meta/>
		</fragmentsReceivedFromIPMulticast>
		<fragmentsPushedToPeers public="1" set="null">
			<c path="Float"/>
			<meta/>
		</fragmentsPushedToPeers>
		<fragmentsPushedFromPeers public="1" set="null">
			<c path="Float"/>
			<meta/>
		</fragmentsPushedFromPeers>
		<bytesRequestedFromPeers public="1" set="null">
			<c path="Float"/>
			<meta/>
		</bytesRequestedFromPeers>
		<bytesRequestedByPeers public="1" set="null">
			<c path="Float"/>
			<meta/>
		</bytesRequestedByPeers>
		<bytesReceivedFromServer public="1" set="null">
			<c path="Float"/>
			<meta/>
		</bytesReceivedFromServer>
		<bytesReceivedFromIPMulticast public="1" set="null">
			<c path="Float"/>
			<meta/>
		</bytesReceivedFromIPMulticast>
		<bytesPushedToPeers public="1" set="null">
			<c path="Float"/>
			<meta/>
		</bytesPushedToPeers>
		<bytesPushedFromPeers public="1" set="null">
			<c path="Float"/>
			<meta/>
		</bytesPushedFromPeers>
		<new public="1"><f a="sendDataBytesPerSecond:sendControlBytesPerSecond:receiveDataBytesPerSecond:receiveControlBytesPerSecond:bytesPushedToPeers:fragmentsPushedToPeers:bytesRequestedByPeers:fragmentsRequestedByPeers:bytesPushedFromPeers:fragmentsPushedFromPeers:bytesRequestedFromPeers:fragmentsRequestedFromPeers:sendControlBytesPerSecondToServer:receiveDataBytesPerSecondFromServer:bytesReceivedFromServer:fragmentsReceivedFromServer:receiveDataBytesPerSecondFromIPMulticast:bytesReceivedFromIPMulticast:fragmentsReceivedFromIPMulticast">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<e path="Void"/>
</f></new>
		<meta>
			<m n=":final"/>
			<m n=":require"><e>flash10_1</e></m>
		</meta>
	</class>
	<class path="flash.net.NetStreamPlayOptions" params="" file="C:\Motion-Twin\haxe\std/flash/net/NetStreamPlayOptions.hx" extern="1">
		<extends path="flash.events.EventDispatcher"/>
		<transition public="1">
			<c path="String"/>
			<meta/>
		</transition>
		<streamName public="1">
			<c path="String"/>
			<meta/>
		</streamName>
		<start public="1">
			<c path="Float"/>
			<meta/>
		</start>
		<oldStreamName public="1">
			<c path="String"/>
			<meta/>
		</oldStreamName>
		<offset public="1">
			<c path="Float"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</offset>
		<len public="1">
			<c path="Float"/>
			<meta/>
		</len>
		<new public="1" set="method"><f a=""><e path="Void"/></f></new>
		<haxe_dynamic><d/></haxe_dynamic>
	</class>
	<class path="flash.net.Responder" params="" file="C:\Motion-Twin\haxe\std/flash/net/Responder.hx" extern="1"><new public="1" set="method"><f a="result:?status">
	<d/>
	<d/>
	<e path="Void"/>
</f></new></class>
	<class path="flash.net.URLRequest" params="" file="C:\Motion-Twin\haxe\std/flash/net/URLRequest.hx" extern="1">
		<url public="1">
			<c path="String"/>
			<meta/>
		</url>
		<requestHeaders public="1">
			<c path="Array"><c path="flash.net.URLRequestHeader"/></c>
			<meta/>
		</requestHeaders>
		<method public="1">
			<c path="String"/>
			<meta/>
		</method>
		<digest public="1">
			<c path="String"/>
			<meta/>
		</digest>
		<data public="1">
			<d/>
			<meta/>
		</data>
		<contentType public="1">
			<c path="String"/>
			<meta/>
		</contentType>
		<new public="1" set="method"><f a="?url">
	<c path="String"/>
	<e path="Void"/>
</f></new>
		<meta><m n=":final"/></meta>
	</class>
	<class path="flash.net.URLRequestHeader" params="" file="C:\Motion-Twin\haxe\std/flash/net/URLRequestHeader.hx" extern="1">
		<value public="1">
			<c path="String"/>
			<meta/>
		</value>
		<name public="1">
			<c path="String"/>
			<meta/>
		</name>
		<new public="1" set="method"><f a="?name:?value">
	<c path="String"/>
	<c path="String"/>
	<e path="Void"/>
</f></new>
		<meta><m n=":final"/></meta>
	</class>
	<class path="flash.system.ApplicationDomain" params="" file="C:\Motion-Twin\haxe\std/flash/system/ApplicationDomain.hx" extern="1">
		<MIN_DOMAIN_MEMORY_LENGTH public="1" static="1">
			<t path="UInt"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</MIN_DOMAIN_MEMORY_LENGTH>
		<currentDomain public="1" set="null" static="1">
			<c path="flash.system.ApplicationDomain"/>
			<meta/>
		</currentDomain>
		<hasDefinition public="1" set="method"><f a="name">
	<c path="String"/>
	<e path="Bool"/>
</f></hasDefinition>
		<getQualifiedDefinitionNames public="1">
			<f a=""><c path="flash.Vector"><c path="String"/></c></f>
			<meta><m n=":require"><e>flash11_3</e></m></meta>
		</getQualifiedDefinitionNames>
		<getDefinition public="1" set="method"><f a="name">
	<c path="String"/>
	<d/>
</f></getDefinition>
		<parentDomain public="1" set="null">
			<c path="flash.system.ApplicationDomain"/>
			<meta/>
		</parentDomain>
		<domainMemory public="1">
			<c path="flash.utils.ByteArray"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</domainMemory>
		<new public="1" set="method"><f a="?parentDomain">
	<c path="flash.system.ApplicationDomain"/>
	<e path="Void"/>
</f></new>
		<meta><m n=":final"/></meta>
	</class>
	<enum path="flash.system.ImageDecodingPolicy" params="" file="C:\Motion-Twin\haxe\std/flash/system/ImageDecodingPolicy.hx">
		<ON_LOAD/>
		<ON_DEMAND/>
		<meta><m n=":fakeEnum"><e>String</e></m></meta>
	</enum>
	<class path="flash.system.LoaderContext" params="" file="C:\Motion-Twin\haxe\std/flash/system/LoaderContext.hx" extern="1">
		<securityDomain public="1">
			<c path="flash.system.SecurityDomain"/>
			<meta/>
		</securityDomain>
		<requestedContentParent public="1">
			<c path="flash.display.DisplayObjectContainer"/>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</requestedContentParent>
		<parameters public="1">
			<d/>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</parameters>
		<imageDecodingPolicy public="1">
			<e path="flash.system.ImageDecodingPolicy"/>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</imageDecodingPolicy>
		<checkPolicyFile public="1">
			<e path="Bool"/>
			<meta/>
		</checkPolicyFile>
		<applicationDomain public="1">
			<c path="flash.system.ApplicationDomain"/>
			<meta/>
		</applicationDomain>
		<allowLoadBytesCodeExecution public="1">
			<e path="Bool"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</allowLoadBytesCodeExecution>
		<allowCodeImport public="1">
			<e path="Bool"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</allowCodeImport>
		<new public="1" set="method"><f a="?checkPolicyFile:?applicationDomain:?securityDomain">
	<e path="Bool"/>
	<c path="flash.system.ApplicationDomain"/>
	<c path="flash.system.SecurityDomain"/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="flash.system.SecurityDomain" params="" file="C:\Motion-Twin\haxe\std/flash/system/SecurityDomain.hx" extern="1">
		<currentDomain public="1" set="null" static="1">
			<c path="flash.system.SecurityDomain"/>
			<meta/>
		</currentDomain>
		<domainID public="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash11_3</e></m></meta>
		</domainID>
	</class>
	<enum path="flash.text.AntiAliasType" params="" file="C:\Motion-Twin\haxe\std/flash/text/AntiAliasType.hx">
		<NORMAL/>
		<ADVANCED/>
		<meta><m n=":fakeEnum"><e>String</e></m></meta>
	</enum>
	<enum path="flash.text.GridFitType" params="" file="C:\Motion-Twin\haxe\std/flash/text/GridFitType.hx">
		<SUBPIXEL/>
		<PIXEL/>
		<NONE/>
		<meta><m n=":fakeEnum"><e>String</e></m></meta>
	</enum>
	<class path="flash.text.StyleSheet" params="" file="C:\Motion-Twin\haxe\std/flash/text/StyleSheet.hx" extern="1">
		<extends path="flash.events.EventDispatcher"/>
		<transform public="1" set="method"><f a="formatObject">
	<d/>
	<c path="flash.text.TextFormat"/>
</f></transform>
		<setStyle public="1" set="method"><f a="styleName:styleObject">
	<c path="String"/>
	<d/>
	<e path="Void"/>
</f></setStyle>
		<parseCSS public="1" set="method"><f a="CSSText">
	<c path="String"/>
	<e path="Void"/>
</f></parseCSS>
		<getStyle public="1" set="method"><f a="styleName">
	<c path="String"/>
	<d/>
</f></getStyle>
		<clear public="1" set="method"><f a=""><e path="Void"/></f></clear>
		<styleNames public="1" set="null">
			<c path="Array"><d/></c>
			<meta/>
		</styleNames>
		<new public="1" set="method"><f a=""><e path="Void"/></f></new>
		<haxe_dynamic><d/></haxe_dynamic>
	</class>
	<class path="flash.text.TextField" params="" file="C:\Motion-Twin\haxe\std/flash/text/TextField.hx" extern="1">
		<extends path="flash.display.InteractiveObject"/>
		<isFontCompatible public="1" static="1">
			<f a="fontName:fontStyle">
				<c path="String"/>
				<c path="String"/>
				<e path="Bool"/>
			</f>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</isFontCompatible>
		<setTextFormat public="1" set="method"><f a="format:?beginIndex:?endIndex">
	<c path="flash.text.TextFormat"/>
	<c path="Int"/>
	<c path="Int"/>
	<e path="Void"/>
</f></setTextFormat>
		<setSelection public="1" set="method"><f a="beginIndex:endIndex">
	<c path="Int"/>
	<c path="Int"/>
	<e path="Void"/>
</f></setSelection>
		<replaceText public="1" set="method"><f a="beginIndex:endIndex:newText">
	<c path="Int"/>
	<c path="Int"/>
	<c path="String"/>
	<e path="Void"/>
</f></replaceText>
		<replaceSelectedText public="1" set="method"><f a="value">
	<c path="String"/>
	<e path="Void"/>
</f></replaceSelectedText>
		<pasteRichText public="1" set="method"><f a="richText">
	<c path="String"/>
	<e path="Bool"/>
</f></pasteRichText>
		<insertXMLText public="1" set="method"><f a="beginIndex:endIndex:richText:?pasting">
	<c path="Int"/>
	<c path="Int"/>
	<c path="String"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></insertXMLText>
		<getXMLText public="1" set="method"><f a="?beginIndex:?endIndex">
	<c path="Int"/>
	<c path="Int"/>
	<c path="String"/>
</f></getXMLText>
		<getTextRuns public="1" set="method"><f a="?beginIndex:?endIndex">
	<c path="Int"/>
	<c path="Int"/>
	<c path="Array"><d/></c>
</f></getTextRuns>
		<getTextFormat public="1" set="method"><f a="?beginIndex:?endIndex">
	<c path="Int"/>
	<c path="Int"/>
	<c path="flash.text.TextFormat"/>
</f></getTextFormat>
		<getRawText public="1" set="method"><f a=""><c path="String"/></f></getRawText>
		<getParagraphLength public="1" set="method"><f a="charIndex">
	<c path="Int"/>
	<c path="Int"/>
</f></getParagraphLength>
		<getLineText public="1" set="method"><f a="lineIndex">
	<c path="Int"/>
	<c path="String"/>
</f></getLineText>
		<getLineOffset public="1" set="method"><f a="lineIndex">
	<c path="Int"/>
	<c path="Int"/>
</f></getLineOffset>
		<getLineMetrics public="1" set="method"><f a="lineIndex">
	<c path="Int"/>
	<c path="flash.text.TextLineMetrics"/>
</f></getLineMetrics>
		<getLineLength public="1" set="method"><f a="lineIndex">
	<c path="Int"/>
	<c path="Int"/>
</f></getLineLength>
		<getLineIndexOfChar public="1" set="method"><f a="charIndex">
	<c path="Int"/>
	<c path="Int"/>
</f></getLineIndexOfChar>
		<getLineIndexAtPoint public="1" set="method"><f a="x:y">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Int"/>
</f></getLineIndexAtPoint>
		<getImageReference public="1" set="method"><f a="id">
	<c path="String"/>
	<c path="flash.display.DisplayObject"/>
</f></getImageReference>
		<getFirstCharInParagraph public="1" set="method"><f a="charIndex">
	<c path="Int"/>
	<c path="Int"/>
</f></getFirstCharInParagraph>
		<getCharIndexAtPoint public="1" set="method"><f a="x:y">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Int"/>
</f></getCharIndexAtPoint>
		<getCharBoundaries public="1" set="method"><f a="charIndex">
	<c path="Int"/>
	<c path="flash.geom.Rectangle"/>
</f></getCharBoundaries>
		<copyRichText public="1" set="method"><f a=""><c path="String"/></f></copyRichText>
		<appendText public="1" set="method"><f a="newText">
	<c path="String"/>
	<e path="Void"/>
</f></appendText>
		<wordWrap public="1">
			<e path="Bool"/>
			<meta/>
		</wordWrap>
		<useRichTextClipboard public="1">
			<e path="Bool"/>
			<meta/>
		</useRichTextClipboard>
		<type public="1">
			<e path="flash.text.TextFieldType"/>
			<meta/>
		</type>
		<thickness public="1">
			<c path="Float"/>
			<meta/>
		</thickness>
		<textWidth public="1" set="null">
			<c path="Float"/>
			<meta/>
		</textWidth>
		<textInteractionMode public="1">
			<e path="flash.text.TextInteractionMode"/>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</textInteractionMode>
		<textHeight public="1" set="null">
			<c path="Float"/>
			<meta/>
		</textHeight>
		<textColor public="1">
			<t path="UInt"/>
			<meta/>
		</textColor>
		<text public="1">
			<c path="String"/>
			<meta/>
		</text>
		<styleSheet public="1">
			<c path="flash.text.StyleSheet"/>
			<meta/>
		</styleSheet>
		<sharpness public="1">
			<c path="Float"/>
			<meta/>
		</sharpness>
		<selectionEndIndex public="1" set="null">
			<c path="Int"/>
			<meta/>
		</selectionEndIndex>
		<selectionBeginIndex public="1" set="null">
			<c path="Int"/>
			<meta/>
		</selectionBeginIndex>
		<selectedText public="1" set="null">
			<c path="String"/>
			<meta/>
		</selectedText>
		<selectable public="1">
			<e path="Bool"/>
			<meta/>
		</selectable>
		<scrollV public="1">
			<c path="Int"/>
			<meta/>
		</scrollV>
		<scrollH public="1">
			<c path="Int"/>
			<meta/>
		</scrollH>
		<restrict public="1">
			<c path="String"/>
			<meta/>
		</restrict>
		<numLines public="1" set="null">
			<c path="Int"/>
			<meta/>
		</numLines>
		<multiline public="1">
			<e path="Bool"/>
			<meta/>
		</multiline>
		<mouseWheelEnabled public="1">
			<e path="Bool"/>
			<meta/>
		</mouseWheelEnabled>
		<maxScrollV public="1" set="null">
			<c path="Int"/>
			<meta/>
		</maxScrollV>
		<maxScrollH public="1" set="null">
			<c path="Int"/>
			<meta/>
		</maxScrollH>
		<maxChars public="1">
			<c path="Int"/>
			<meta/>
		</maxChars>
		<length public="1" set="null">
			<c path="Int"/>
			<meta/>
		</length>
		<htmlText public="1">
			<c path="String"/>
			<meta/>
		</htmlText>
		<gridFitType public="1">
			<e path="flash.text.GridFitType"/>
			<meta/>
		</gridFitType>
		<embedFonts public="1">
			<e path="Bool"/>
			<meta/>
		</embedFonts>
		<displayAsPassword public="1">
			<e path="Bool"/>
			<meta/>
		</displayAsPassword>
		<defaultTextFormat public="1">
			<c path="flash.text.TextFormat"/>
			<meta/>
		</defaultTextFormat>
		<condenseWhite public="1">
			<e path="Bool"/>
			<meta/>
		</condenseWhite>
		<caretIndex public="1" set="null">
			<c path="Int"/>
			<meta/>
		</caretIndex>
		<bottomScrollV public="1" set="null">
			<c path="Int"/>
			<meta/>
		</bottomScrollV>
		<borderColor public="1">
			<t path="UInt"/>
			<meta/>
		</borderColor>
		<border public="1">
			<e path="Bool"/>
			<meta/>
		</border>
		<backgroundColor public="1">
			<t path="UInt"/>
			<meta/>
		</backgroundColor>
		<background public="1">
			<e path="Bool"/>
			<meta/>
		</background>
		<autoSize public="1">
			<e path="flash.text.TextFieldAutoSize"/>
			<meta/>
		</autoSize>
		<antiAliasType public="1">
			<e path="flash.text.AntiAliasType"/>
			<meta/>
		</antiAliasType>
		<alwaysShowSelection public="1">
			<e path="Bool"/>
			<meta/>
		</alwaysShowSelection>
		<new public="1" set="method">
			<f a=""><e path="Void"/></f>
			<meta/>
		</new>
		<meta/>
	</class>
	<enum path="flash.text.TextFieldAutoSize" params="" file="C:\Motion-Twin\haxe\std/flash/text/TextFieldAutoSize.hx">
		<RIGHT/>
		<NONE/>
		<LEFT/>
		<CENTER/>
		<meta><m n=":fakeEnum"><e>String</e></m></meta>
	</enum>
	<enum path="flash.text.TextFieldType" params="" file="C:\Motion-Twin\haxe\std/flash/text/TextFieldType.hx">
		<INPUT/>
		<DYNAMIC/>
		<meta><m n=":fakeEnum"><e>String</e></m></meta>
	</enum>
	<class path="flash.text.TextFormat" params="" file="C:\Motion-Twin\haxe\std/flash/text/TextFormat.hx" extern="1">
		<url public="1">
			<c path="String"/>
			<meta/>
		</url>
		<underline public="1">
			<t path="Null"><e path="Bool"/></t>
			<meta/>
		</underline>
		<target public="1">
			<c path="String"/>
			<meta/>
		</target>
		<tabStops public="1">
			<c path="Array"><t path="UInt"/></c>
			<meta/>
		</tabStops>
		<size public="1">
			<t path="Null"><c path="Float"/></t>
			<meta/>
		</size>
		<rightMargin public="1">
			<t path="Null"><c path="Float"/></t>
			<meta/>
		</rightMargin>
		<letterSpacing public="1">
			<t path="Null"><c path="Float"/></t>
			<meta/>
		</letterSpacing>
		<leftMargin public="1">
			<t path="Null"><c path="Float"/></t>
			<meta/>
		</leftMargin>
		<leading public="1">
			<t path="Null"><c path="Float"/></t>
			<meta/>
		</leading>
		<kerning public="1">
			<t path="Null"><e path="Bool"/></t>
			<meta/>
		</kerning>
		<italic public="1">
			<t path="Null"><e path="Bool"/></t>
			<meta/>
		</italic>
		<indent public="1">
			<t path="Null"><c path="Float"/></t>
			<meta/>
		</indent>
		<font public="1">
			<c path="String"/>
			<meta/>
		</font>
		<display public="1">
			<e path="flash.text.TextFormatDisplay"/>
			<meta/>
		</display>
		<color public="1">
			<t path="Null"><t path="UInt"/></t>
			<meta/>
		</color>
		<bullet public="1">
			<t path="Null"><e path="Bool"/></t>
			<meta/>
		</bullet>
		<bold public="1">
			<t path="Null"><e path="Bool"/></t>
			<meta/>
		</bold>
		<blockIndent public="1">
			<t path="Null"><c path="Float"/></t>
			<meta/>
		</blockIndent>
		<align public="1">
			<e path="flash.text.TextFormatAlign"/>
			<meta/>
		</align>
		<new public="1" set="method"><f a="?font:?size:?color:?bold:?italic:?underline:?url:?target:?align:?leftMargin:?rightMargin:?indent:?leading">
	<c path="String"/>
	<c path="Float"/>
	<t path="UInt"/>
	<e path="Bool"/>
	<e path="Bool"/>
	<e path="Bool"/>
	<c path="String"/>
	<c path="String"/>
	<e path="flash.text.TextFormatAlign"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<e path="Void"/>
</f></new>
	</class>
	<enum path="flash.text.TextFormatAlign" params="" file="C:\Motion-Twin\haxe\std/flash/text/TextFormatAlign.hx">
		<START/>
		<RIGHT/>
		<LEFT/>
		<JUSTIFY/>
		<END/>
		<CENTER/>
		<meta><m n=":fakeEnum"><e>String</e></m></meta>
	</enum>
	<enum path="flash.text.TextFormatDisplay" params="" file="C:\Motion-Twin\haxe\std/flash/text/TextFormatDisplay.hx">
		<INLINE/>
		<BLOCK/>
		<meta><m n=":fakeEnum"><e>String</e></m></meta>
	</enum>
	<enum path="flash.text.TextInteractionMode" params="" file="C:\Motion-Twin\haxe\std/flash/text/TextInteractionMode.hx">
		<SELECTION/>
		<NORMAL/>
		<meta><m n=":fakeEnum"><e>String</e></m></meta>
	</enum>
	<class path="flash.text.TextLineMetrics" params="" file="C:\Motion-Twin\haxe\std/flash/text/TextLineMetrics.hx" extern="1">
		<x public="1">
			<c path="Float"/>
			<meta/>
		</x>
		<width public="1">
			<c path="Float"/>
			<meta/>
		</width>
		<leading public="1">
			<c path="Float"/>
			<meta/>
		</leading>
		<height public="1">
			<c path="Float"/>
			<meta/>
		</height>
		<descent public="1">
			<c path="Float"/>
			<meta/>
		</descent>
		<ascent public="1">
			<c path="Float"/>
			<meta/>
		</ascent>
		<new public="1" set="method"><f a="x:width:height:ascent:descent:leading">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="flash.text.TextSnapshot" params="" file="C:\Motion-Twin\haxe\std/flash/text/TextSnapshot.hx" extern="1">
		<setSelected public="1" set="method"><f a="beginIndex:endIndex:select">
	<c path="Int"/>
	<c path="Int"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></setSelected>
		<setSelectColor public="1" set="method"><f a="?hexColor">
	<t path="UInt"/>
	<e path="Void"/>
</f></setSelectColor>
		<hitTestTextNearPos public="1" set="method"><f a="x:y:?maxDistance">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
</f></hitTestTextNearPos>
		<getTextRunInfo public="1" set="method"><f a="beginIndex:endIndex">
	<c path="Int"/>
	<c path="Int"/>
	<c path="Array"><d/></c>
</f></getTextRunInfo>
		<getText public="1" set="method"><f a="beginIndex:endIndex:?includeLineEndings">
	<c path="Int"/>
	<c path="Int"/>
	<e path="Bool"/>
	<c path="String"/>
</f></getText>
		<getSelectedText public="1" set="method"><f a="?includeLineEndings">
	<e path="Bool"/>
	<c path="String"/>
</f></getSelectedText>
		<getSelected public="1" set="method"><f a="beginIndex:endIndex">
	<c path="Int"/>
	<c path="Int"/>
	<e path="Bool"/>
</f></getSelected>
		<findText public="1" set="method"><f a="beginIndex:textToFind:caseSensitive">
	<c path="Int"/>
	<c path="String"/>
	<e path="Bool"/>
	<c path="Int"/>
</f></findText>
		<charCount public="1" set="null">
			<c path="Int"/>
			<meta/>
		</charCount>
		<new public="1" set="method"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="flash.ui.ContextMenu" params="" file="C:\Motion-Twin\haxe\std/flash/ui/ContextMenu.hx" extern="1">
		<extends path="flash.display.NativeMenu"/>
		<isSupported public="1" static="1">
			<e path="Bool"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</isSupported>
		<hideBuiltInItems public="1" set="method"><f a=""><e path="Void"/></f></hideBuiltInItems>
		<clone public="1" set="method"><f a=""><c path="flash.ui.ContextMenu"/></f></clone>
		<link public="1">
			<c path="flash.net.URLRequest"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</link>
		<customItems public="1">
			<c path="Array"><d/></c>
			<meta/>
		</customItems>
		<clipboardMenu public="1">
			<e path="Bool"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</clipboardMenu>
		<clipboardItems public="1">
			<c path="flash.ui.ContextMenuClipboardItems"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</clipboardItems>
		<builtInItems public="1">
			<c path="flash.ui.ContextMenuBuiltInItems"/>
			<meta/>
		</builtInItems>
		<new public="1" set="method"><f a=""><e path="Void"/></f></new>
		<meta><m n=":final"/></meta>
	</class>
	<class path="flash.ui.ContextMenuBuiltInItems" params="" file="C:\Motion-Twin\haxe\std/flash/ui/ContextMenuBuiltInItems.hx" extern="1">
		<clone public="1" set="method"><f a=""><c path="flash.ui.ContextMenuBuiltInItems"/></f></clone>
		<zoom public="1">
			<e path="Bool"/>
			<meta/>
		</zoom>
		<save public="1">
			<e path="Bool"/>
			<meta/>
		</save>
		<rewind public="1">
			<e path="Bool"/>
			<meta/>
		</rewind>
		<quality public="1">
			<e path="Bool"/>
			<meta/>
		</quality>
		<print public="1">
			<e path="Bool"/>
			<meta/>
		</print>
		<play public="1">
			<e path="Bool"/>
			<meta/>
		</play>
		<loop public="1">
			<e path="Bool"/>
			<meta/>
		</loop>
		<forwardAndBack public="1">
			<e path="Bool"/>
			<meta/>
		</forwardAndBack>
		<new public="1" set="method"><f a=""><e path="Void"/></f></new>
		<meta><m n=":final"/></meta>
	</class>
	<class path="flash.ui.ContextMenuClipboardItems" params="" file="C:\Motion-Twin\haxe\std/flash/ui/ContextMenuClipboardItems.hx" extern="1">
		<clone public="1" set="method"><f a=""><c path="flash.ui.ContextMenuClipboardItems"/></f></clone>
		<selectAll public="1">
			<e path="Bool"/>
			<meta/>
		</selectAll>
		<paste public="1">
			<e path="Bool"/>
			<meta/>
		</paste>
		<cut public="1">
			<e path="Bool"/>
			<meta/>
		</cut>
		<copy public="1">
			<e path="Bool"/>
			<meta/>
		</copy>
		<clear public="1">
			<e path="Bool"/>
			<meta/>
		</clear>
		<new public="1" set="method"><f a=""><e path="Void"/></f></new>
		<meta><m n=":final"/></meta>
	</class>
	<class path="flash.utils.IDataInput" params="" file="C:\Motion-Twin\haxe\std/flash/utils/IDataInput.hx" extern="1" interface="1">
		<readUnsignedShort public="1" set="method"><f a=""><t path="UInt"/></f></readUnsignedShort>
		<readUnsignedInt public="1" set="method"><f a=""><t path="UInt"/></f></readUnsignedInt>
		<readUnsignedByte public="1" set="method"><f a=""><t path="UInt"/></f></readUnsignedByte>
		<readUTFBytes public="1" set="method"><f a="length">
	<t path="UInt"/>
	<c path="String"/>
</f></readUTFBytes>
		<readUTF public="1" set="method"><f a=""><c path="String"/></f></readUTF>
		<readShort public="1" set="method"><f a=""><c path="Int"/></f></readShort>
		<readObject public="1" set="method"><f a=""><d/></f></readObject>
		<readMultiByte public="1" set="method"><f a="length:charSet">
	<t path="UInt"/>
	<c path="String"/>
	<c path="String"/>
</f></readMultiByte>
		<readInt public="1" set="method"><f a=""><c path="Int"/></f></readInt>
		<readFloat public="1" set="method"><f a=""><c path="Float"/></f></readFloat>
		<readDouble public="1" set="method"><f a=""><c path="Float"/></f></readDouble>
		<readBytes public="1" set="method"><f a="bytes:?offset:?length">
	<c path="flash.utils.ByteArray"/>
	<t path="UInt"/>
	<t path="UInt"/>
	<e path="Void"/>
</f></readBytes>
		<readByte public="1" set="method"><f a=""><c path="Int"/></f></readByte>
		<readBoolean public="1" set="method"><f a=""><e path="Bool"/></f></readBoolean>
		<objectEncoding public="1">
			<t path="UInt"/>
			<meta/>
		</objectEncoding>
		<endian public="1">
			<e path="flash.utils.Endian"/>
			<meta/>
		</endian>
		<bytesAvailable public="1" set="null">
			<t path="UInt"/>
			<meta/>
		</bytesAvailable>
	</class>
	<class path="flash.utils.IDataOutput" params="" file="C:\Motion-Twin\haxe\std/flash/utils/IDataOutput.hx" extern="1" interface="1">
		<writeUnsignedInt public="1" set="method"><f a="value">
	<t path="UInt"/>
	<e path="Void"/>
</f></writeUnsignedInt>
		<writeUTFBytes public="1" set="method"><f a="value">
	<c path="String"/>
	<e path="Void"/>
</f></writeUTFBytes>
		<writeUTF public="1" set="method"><f a="value">
	<c path="String"/>
	<e path="Void"/>
</f></writeUTF>
		<writeShort public="1" set="method"><f a="value">
	<c path="Int"/>
	<e path="Void"/>
</f></writeShort>
		<writeObject public="1" set="method"><f a="object">
	<d/>
	<e path="Void"/>
</f></writeObject>
		<writeMultiByte public="1" set="method"><f a="value:charSet">
	<c path="String"/>
	<c path="String"/>
	<e path="Void"/>
</f></writeMultiByte>
		<writeInt public="1" set="method"><f a="value">
	<c path="Int"/>
	<e path="Void"/>
</f></writeInt>
		<writeFloat public="1" set="method"><f a="value">
	<c path="Float"/>
	<e path="Void"/>
</f></writeFloat>
		<writeDouble public="1" set="method"><f a="value">
	<c path="Float"/>
	<e path="Void"/>
</f></writeDouble>
		<writeBytes public="1" set="method"><f a="bytes:?offset:?length">
	<c path="flash.utils.ByteArray"/>
	<t path="UInt"/>
	<t path="UInt"/>
	<e path="Void"/>
</f></writeBytes>
		<writeByte public="1" set="method"><f a="value">
	<c path="Int"/>
	<e path="Void"/>
</f></writeByte>
		<writeBoolean public="1" set="method"><f a="value">
	<e path="Bool"/>
	<e path="Void"/>
</f></writeBoolean>
		<objectEncoding public="1">
			<t path="UInt"/>
			<meta/>
		</objectEncoding>
		<endian public="1">
			<e path="flash.utils.Endian"/>
			<meta/>
		</endian>
	</class>
	<class path="flash.utils.ByteArray" params="" file="C:\Motion-Twin\haxe\std/flash/utils/ByteArray.hx" extern="1">
		<implements path="flash.utils.IDataInput"/>
		<implements path="flash.utils.IDataOutput"/>
		<defaultObjectEncoding public="1" static="1">
			<t path="UInt"/>
			<meta/>
		</defaultObjectEncoding>
		<writeUnsignedInt public="1" set="method">
			<f a="value">
				<t path="UInt"/>
				<e path="Void"/>
			</f>
			<meta/>
		</writeUnsignedInt>
		<writeUTFBytes public="1" set="method">
			<f a="value">
				<c path="String"/>
				<e path="Void"/>
			</f>
			<meta/>
		</writeUTFBytes>
		<writeUTF public="1" set="method">
			<f a="value">
				<c path="String"/>
				<e path="Void"/>
			</f>
			<meta/>
		</writeUTF>
		<writeShort public="1" set="method">
			<f a="value">
				<c path="Int"/>
				<e path="Void"/>
			</f>
			<meta/>
		</writeShort>
		<writeObject public="1" set="method">
			<f a="object">
				<d/>
				<e path="Void"/>
			</f>
			<meta/>
		</writeObject>
		<writeMultiByte public="1" set="method">
			<f a="value:charSet">
				<c path="String"/>
				<c path="String"/>
				<e path="Void"/>
			</f>
			<meta/>
		</writeMultiByte>
		<writeInt public="1" set="method">
			<f a="value">
				<c path="Int"/>
				<e path="Void"/>
			</f>
			<meta/>
		</writeInt>
		<writeFloat public="1" set="method">
			<f a="value">
				<c path="Float"/>
				<e path="Void"/>
			</f>
			<meta/>
		</writeFloat>
		<writeDouble public="1" set="method">
			<f a="value">
				<c path="Float"/>
				<e path="Void"/>
			</f>
			<meta/>
		</writeDouble>
		<writeBytes public="1" set="method">
			<f a="bytes:?offset:?length">
				<c path="flash.utils.ByteArray"/>
				<t path="UInt"/>
				<t path="UInt"/>
				<e path="Void"/>
			</f>
			<meta/>
		</writeBytes>
		<writeByte public="1" set="method">
			<f a="value">
				<c path="Int"/>
				<e path="Void"/>
			</f>
			<meta/>
		</writeByte>
		<writeBoolean public="1" set="method">
			<f a="value">
				<e path="Bool"/>
				<e path="Void"/>
			</f>
			<meta/>
		</writeBoolean>
		<uncompress public="1" set="method"><f a=""><e path="Void"/></f></uncompress>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<readUnsignedShort public="1" set="method">
			<f a=""><t path="UInt"/></f>
			<meta/>
		</readUnsignedShort>
		<readUnsignedInt public="1" set="method">
			<f a=""><t path="UInt"/></f>
			<meta/>
		</readUnsignedInt>
		<readUnsignedByte public="1" set="method">
			<f a=""><t path="UInt"/></f>
			<meta/>
		</readUnsignedByte>
		<readUTFBytes public="1" set="method">
			<f a="length">
				<t path="UInt"/>
				<c path="String"/>
			</f>
			<meta/>
		</readUTFBytes>
		<readUTF public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta/>
		</readUTF>
		<readShort public="1" set="method">
			<f a=""><c path="Int"/></f>
			<meta/>
		</readShort>
		<readObject public="1" set="method">
			<f a=""><d/></f>
			<meta/>
		</readObject>
		<readMultiByte public="1" set="method">
			<f a="length:charSet">
				<t path="UInt"/>
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta/>
		</readMultiByte>
		<readInt public="1" set="method">
			<f a=""><c path="Int"/></f>
			<meta/>
		</readInt>
		<readFloat public="1" set="method">
			<f a=""><c path="Float"/></f>
			<meta/>
		</readFloat>
		<readDouble public="1" set="method">
			<f a=""><c path="Float"/></f>
			<meta/>
		</readDouble>
		<readBytes public="1" set="method">
			<f a="bytes:?offset:?length">
				<c path="flash.utils.ByteArray"/>
				<t path="UInt"/>
				<t path="UInt"/>
				<e path="Void"/>
			</f>
			<meta/>
		</readBytes>
		<readByte public="1" set="method">
			<f a=""><c path="Int"/></f>
			<meta/>
		</readByte>
		<readBoolean public="1" set="method">
			<f a=""><e path="Bool"/></f>
			<meta/>
		</readBoolean>
		<inflate public="1">
			<f a=""><e path="Void"/></f>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</inflate>
		<deflate public="1">
			<f a=""><e path="Void"/></f>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</deflate>
		<compress public="1" set="method"><f a=""><e path="Void"/></f></compress>
		<clear public="1">
			<f a=""><e path="Void"/></f>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</clear>
		<position public="1">
			<t path="UInt"/>
			<meta/>
		</position>
		<objectEncoding public="1">
			<t path="UInt"/>
			<meta/>
		</objectEncoding>
		<length public="1">
			<t path="UInt"/>
			<meta/>
		</length>
		<endian public="1">
			<e path="flash.utils.Endian"/>
			<meta/>
		</endian>
		<bytesAvailable public="1" set="null">
			<t path="UInt"/>
			<meta/>
		</bytesAvailable>
		<new public="1" set="method"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="flash.utils.Dictionary" params="" file="C:\Motion-Twin\haxe\std/flash/utils/Dictionary.hx" extern="1">
		<new public="1" set="method">
			<f a="?weakKeys">
				<e path="Bool"/>
				<e path="Void"/>
			</f>
			<meta/>
		</new>
		<meta/>
		<haxe_dynamic><d/></haxe_dynamic>
	</class>
	<enum path="flash.utils.Endian" params="" file="C:\Motion-Twin\haxe\std/flash/utils/Endian.hx">
		<LITTLE_ENDIAN/>
		<BIG_ENDIAN/>
		<meta><m n=":fakeEnum"><e>String</e></m></meta>
	</enum>
	<class path="flash.utils.TypedDictionary" params="K:T" file="C:\Motion-Twin\haxe\std/flash/utils/TypedDictionary.hx">
		<extends path="flash.utils.Dictionary"/>
		<new public="1" set="method" line="30">
			<f a="?weakKeys">
				<e path="Bool"/>
				<e path="Void"/>
			</f>
			<meta/>
		</new>
		<haxe_doc>This is a typed version of the Flash9 Dictionary class.</haxe_doc>
		<meta/>
	</class>
	<class path="haxe.FastCell" params="T" file="C:\Motion-Twin\haxe\std/haxe/FastList.hx" module="haxe.FastList">
		<next public="1">
			<c path="haxe.FastCell"><c path="haxe.FastCell.T"/></c>
			<meta/>
		</next>
		<elt public="1">
			<c path="haxe.FastCell.T"/>
			<meta/>
		</elt>
		<new public="1" set="method" line="33">
			<f a="elt:next">
				<c path="haxe.FastCell.T"/>
				<c path="haxe.FastCell"><c path="haxe.FastCell.T"/></c>
				<e path="Void"/>
			</f>
			<meta/>
		</new>
		<meta/>
	</class>
	<class path="haxe.FastList" params="T" file="C:\Motion-Twin\haxe\std/haxe/FastList.hx">
		<iterator public="1" set="method" line="138">
			<f a=""><t path="Iterator"><c path="haxe.FastList.T"/></t></f>
			<meta/>
			<haxe_doc>Returns an iterator on the elements of the list.</haxe_doc>
		</iterator>
		<remove public="1" set="method" line="107">
			<f a="v">
				<c path="haxe.FastList.T"/>
				<e path="Bool"/>
			</f>
			<meta/>
			<haxe_doc>Remove the first element that is [== v] from the list.
		Returns [true] if an element was removed, [false] otherwise.</haxe_doc>
		</remove>
		<head public="1">
			<c path="haxe.FastCell"><c path="haxe.FastList.T"/></c>
			<meta/>
		</head>
		<new public="1" set="method" line="63">
			<f a=""><e path="Void"/></f>
			<meta/>
			<haxe_doc>Creates a new empty list.</haxe_doc>
		</new>
		<haxe_doc>A linked-list of elements. A different class is created for each container used in platforms where it matters</haxe_doc>
		<meta/>
	</class>
	<class path="haxe.Log" params="" file="C:\Motion-Twin\haxe\std/haxe/Log.hx">
		<trace public="1" set="dynamic" line="29" static="1">
			<f a="v:?infos">
				<d/>
				<t path="haxe.PosInfos"/>
				<e path="Void"/>
			</f>
			<meta/>
		</trace>
		<meta/>
	</class>
	<typedef path="haxe.PosInfos" params="" file="C:\Motion-Twin\haxe\std/haxe/PosInfos.hx"><a>
	<methodName><c path="String"/></methodName>
	<lineNumber><c path="Int"/></lineNumber>
	<fileName><c path="String"/></fileName>
	<customParams>
		<c path="Array"><d/></c>
		<meta><m n=":optional"/></meta>
	</customParams>
	<className><c path="String"/></className>
</a></typedef>
	<class path="haxe.Serializer" params="" file="C:\Motion-Twin\haxe\std/haxe/Serializer.hx" extern="1"><meta><m n=":native"><e>Dynamic</e></m></meta></class>
	<typedef path="haxe.TypeResolver" params="" file="C:\Motion-Twin\haxe\std/haxe/Unserializer.hx" module="haxe.Unserializer"><a>
	<resolveEnum set="method"><f a="name">
	<c path="String"/>
	<c path="Enum"><d/></c>
</f></resolveEnum>
	<resolveClass set="method"><f a="name">
	<c path="String"/>
	<c path="Class"><d/></c>
</f></resolveClass>
</a></typedef>
	<class path="haxe.Unserializer" params="" file="C:\Motion-Twin\haxe\std/haxe/Unserializer.hx" extern="1"><meta><m n=":native"><e>Dynamic</e></m></meta></class>
	<class path="haxe.macro.Compiler" params="" file="C:\Motion-Twin\haxe\std/haxe/macro/Compiler.hx" extern="1">
		<haxe_doc>All these methods can be called for compiler configuration macros.</haxe_doc>
		<meta><m n=":native"><e>Dynamic</e></m></meta>
	</class>
	<class path="haxe.macro.Context" params="" file="C:\Motion-Twin\haxe\std/haxe/macro/Context.hx" extern="1">
		<haxe_doc>This is an API that can be used by macros implementations.</haxe_doc>
		<meta><m n=":native"><e>Dynamic</e></m></meta>
	</class>
	<typedef path="haxe.macro.Position" params="" file="C:\Motion-Twin\haxe\std/haxe/macro/Expr.hx" module="haxe.macro.Expr"><a>
	<min><c path="Int"/></min>
	<max><c path="Int"/></max>
	<file><c path="String"/></file>
</a></typedef>
	<enum path="haxe.macro.Constant" params="" file="C:\Motion-Twin\haxe\std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<CType a="s"><c path="String"/></CType>
		<CString a="s"><c path="String"/></CString>
		<CRegexp a="r:opt">
			<c path="String"/>
			<c path="String"/>
		</CRegexp>
		<CInt a="v"><c path="String"/></CInt>
		<CIdent a="s"><c path="String"/></CIdent>
		<CFloat a="f"><c path="String"/></CFloat>
	</enum>
	<enum path="haxe.macro.Binop" params="" file="C:\Motion-Twin\haxe\std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<OpXor/>
		<OpUShr/>
		<OpSub/>
		<OpShr/>
		<OpShl/>
		<OpOr/>
		<OpNotEq/>
		<OpMult/>
		<OpMod/>
		<OpLte/>
		<OpLt/>
		<OpInterval/>
		<OpGte/>
		<OpGt/>
		<OpEq/>
		<OpDiv/>
		<OpBoolOr/>
		<OpBoolAnd/>
		<OpAssignOp a="op"><e path="haxe.macro.Binop"/></OpAssignOp>
		<OpAssign/>
		<OpAnd/>
		<OpAdd/>
	</enum>
	<enum path="haxe.macro.Unop" params="" file="C:\Motion-Twin\haxe\std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<OpNot/>
		<OpNegBits/>
		<OpNeg/>
		<OpIncrement/>
		<OpDecrement/>
	</enum>
	<typedef path="haxe.macro.Expr" params="" file="C:\Motion-Twin\haxe\std/haxe/macro/Expr.hx"><a>
	<pos><t path="haxe.macro.Position"/></pos>
	<expr><e path="haxe.macro.ExprDef"/></expr>
</a></typedef>
	<typedef path="haxe.macro.ExprRequire" params="T" file="C:\Motion-Twin\haxe\std/haxe/macro/Expr.hx" module="haxe.macro.Expr"><t path="haxe.macro.Expr"/></typedef>
	<typedef path="haxe.macro.ExprOf" params="T" file="C:\Motion-Twin\haxe\std/haxe/macro/Expr.hx" module="haxe.macro.Expr"><t path="haxe.macro.Expr"/></typedef>
	<enum path="haxe.macro.ExprDef" params="" file="C:\Motion-Twin\haxe\std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<EWhile a="econd:e:normalWhile">
			<t path="haxe.macro.Expr"/>
			<t path="haxe.macro.Expr"/>
			<e path="Bool"/>
		</EWhile>
		<EVars a="vars"><c path="Array"><a>
	<type><t path="Null"><e path="haxe.macro.ComplexType"/></t></type>
	<name><c path="String"/></name>
	<expr><t path="Null"><t path="haxe.macro.Expr"/></t></expr>
</a></c></EVars>
		<EUntyped a="e"><t path="haxe.macro.Expr"/></EUntyped>
		<EUnop a="op:postFix:e">
			<e path="haxe.macro.Unop"/>
			<e path="Bool"/>
			<t path="haxe.macro.Expr"/>
		</EUnop>
		<EType a="e:field">
			<t path="haxe.macro.Expr"/>
			<c path="String"/>
		</EType>
		<ETry a="e:catches">
			<t path="haxe.macro.Expr"/>
			<c path="Array"><a>
	<type><e path="haxe.macro.ComplexType"/></type>
	<name><c path="String"/></name>
	<expr><t path="haxe.macro.Expr"/></expr>
</a></c>
		</ETry>
		<EThrow a="e"><t path="haxe.macro.Expr"/></EThrow>
		<ETernary a="econd:eif:eelse">
			<t path="haxe.macro.Expr"/>
			<t path="haxe.macro.Expr"/>
			<t path="haxe.macro.Expr"/>
		</ETernary>
		<ESwitch a="e:cases:edef">
			<t path="haxe.macro.Expr"/>
			<c path="Array"><a>
	<values><c path="Array"><t path="haxe.macro.Expr"/></c></values>
	<expr><t path="haxe.macro.Expr"/></expr>
</a></c>
			<t path="Null"><t path="haxe.macro.Expr"/></t>
		</ESwitch>
		<EReturn a="?e"><t path="haxe.macro.Expr"/></EReturn>
		<EParenthesis a="e"><t path="haxe.macro.Expr"/></EParenthesis>
		<EObjectDecl a="fields"><c path="Array"><a>
	<field><c path="String"/></field>
	<expr><t path="haxe.macro.Expr"/></expr>
</a></c></EObjectDecl>
		<ENew a="t:params">
			<t path="haxe.macro.TypePath"/>
			<c path="Array"><t path="haxe.macro.Expr"/></c>
		</ENew>
		<EIn a="e1:e2">
			<t path="haxe.macro.Expr"/>
			<t path="haxe.macro.Expr"/>
		</EIn>
		<EIf a="econd:eif:eelse">
			<t path="haxe.macro.Expr"/>
			<t path="haxe.macro.Expr"/>
			<t path="Null"><t path="haxe.macro.Expr"/></t>
		</EIf>
		<EFunction a="name:f">
			<t path="Null"><c path="String"/></t>
			<t path="haxe.macro.Function"/>
		</EFunction>
		<EFor a="it:expr">
			<t path="haxe.macro.Expr"/>
			<t path="haxe.macro.Expr"/>
		</EFor>
		<EField a="e:field">
			<t path="haxe.macro.Expr"/>
			<c path="String"/>
		</EField>
		<EDisplayNew a="t"><t path="haxe.macro.TypePath"/></EDisplayNew>
		<EDisplay a="e:isCall">
			<t path="haxe.macro.Expr"/>
			<e path="Bool"/>
		</EDisplay>
		<EContinue/>
		<EConst a="c"><e path="haxe.macro.Constant"/></EConst>
		<ECheckType a="e:t">
			<t path="haxe.macro.Expr"/>
			<e path="haxe.macro.ComplexType"/>
		</ECheckType>
		<ECast a="e:t">
			<t path="haxe.macro.Expr"/>
			<t path="Null"><e path="haxe.macro.ComplexType"/></t>
		</ECast>
		<ECall a="e:params">
			<t path="haxe.macro.Expr"/>
			<c path="Array"><t path="haxe.macro.Expr"/></c>
		</ECall>
		<EBreak/>
		<EBlock a="exprs"><c path="Array"><t path="haxe.macro.Expr"/></c></EBlock>
		<EBinop a="op:e1:e2">
			<e path="haxe.macro.Binop"/>
			<t path="haxe.macro.Expr"/>
			<t path="haxe.macro.Expr"/>
		</EBinop>
		<EArrayDecl a="values"><c path="Array"><t path="haxe.macro.Expr"/></c></EArrayDecl>
		<EArray a="e1:e2">
			<t path="haxe.macro.Expr"/>
			<t path="haxe.macro.Expr"/>
		</EArray>
	</enum>
	<enum path="haxe.macro.ComplexType" params="" file="C:\Motion-Twin\haxe\std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<TPath a="p"><t path="haxe.macro.TypePath"/></TPath>
		<TParent a="t"><e path="haxe.macro.ComplexType"/></TParent>
		<TOptional a="t"><e path="haxe.macro.ComplexType"/></TOptional>
		<TFunction a="args:ret">
			<c path="Array"><e path="haxe.macro.ComplexType"/></c>
			<e path="haxe.macro.ComplexType"/>
		</TFunction>
		<TExtend a="p:fields">
			<t path="haxe.macro.TypePath"/>
			<c path="Array"><t path="haxe.macro.Field"/></c>
		</TExtend>
		<TAnonymous a="fields"><c path="Array"><t path="haxe.macro.Field"/></c></TAnonymous>
	</enum>
	<typedef path="haxe.macro.TypePath" params="" file="C:\Motion-Twin\haxe\std/haxe/macro/Expr.hx" module="haxe.macro.Expr"><a>
	<sub>
		<t path="Null"><c path="String"/></t>
		<meta><m n=":optional"/></meta>
	</sub>
	<params><c path="Array"><e path="haxe.macro.TypeParam"/></c></params>
	<pack><c path="Array"><c path="String"/></c></pack>
	<name><c path="String"/></name>
</a></typedef>
	<enum path="haxe.macro.TypeParam" params="" file="C:\Motion-Twin\haxe\std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<TPType a="t"><e path="haxe.macro.ComplexType"/></TPType>
		<TPExpr a="e"><t path="haxe.macro.Expr"/></TPExpr>
	</enum>
	<typedef path="haxe.macro.Function" params="" file="C:\Motion-Twin\haxe\std/haxe/macro/Expr.hx" module="haxe.macro.Expr"><a>
	<ret><t path="Null"><e path="haxe.macro.ComplexType"/></t></ret>
	<params><c path="Array"><a>
	<name><c path="String"/></name>
	<constraints><c path="Array"><e path="haxe.macro.ComplexType"/></c></constraints>
</a></c></params>
	<expr><t path="Null"><t path="haxe.macro.Expr"/></t></expr>
	<args><c path="Array"><t path="haxe.macro.FunctionArg"/></c></args>
</a></typedef>
	<typedef path="haxe.macro.FunctionArg" params="" file="C:\Motion-Twin\haxe\std/haxe/macro/Expr.hx" module="haxe.macro.Expr"><a>
	<value>
		<t path="Null"><t path="haxe.macro.Expr"/></t>
		<meta><m n=":optional"/></meta>
	</value>
	<type><t path="Null"><e path="haxe.macro.ComplexType"/></t></type>
	<opt><e path="Bool"/></opt>
	<name><c path="String"/></name>
</a></typedef>
	<typedef path="haxe.macro.Metadata" params="" file="C:\Motion-Twin\haxe\std/haxe/macro/Expr.hx" module="haxe.macro.Expr"><c path="Array"><a>
	<pos><t path="haxe.macro.Position"/></pos>
	<params><c path="Array"><t path="haxe.macro.Expr"/></c></params>
	<name><c path="String"/></name>
</a></c></typedef>
	<typedef path="haxe.macro.Field" params="" file="C:\Motion-Twin\haxe\std/haxe/macro/Expr.hx" module="haxe.macro.Expr"><a>
	<pos><t path="haxe.macro.Position"/></pos>
	<name><c path="String"/></name>
	<meta>
		<t path="haxe.macro.Metadata"/>
		<meta><m n=":optional"/></meta>
	</meta>
	<kind><e path="haxe.macro.FieldType"/></kind>
	<doc>
		<t path="Null"><c path="String"/></t>
		<meta><m n=":optional"/></meta>
	</doc>
	<access>
		<c path="Array"><e path="haxe.macro.Access"/></c>
		<meta><m n=":optional"/></meta>
	</access>
</a></typedef>
	<enum path="haxe.macro.Access" params="" file="C:\Motion-Twin\haxe\std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<AStatic/>
		<APublic/>
		<APrivate/>
		<AOverride/>
		<AInline/>
		<ADynamic/>
	</enum>
	<enum path="haxe.macro.FieldType" params="" file="C:\Motion-Twin\haxe\std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<FVar a="t:?e">
			<t path="Null"><e path="haxe.macro.ComplexType"/></t>
			<t path="haxe.macro.Expr"/>
		</FVar>
		<FProp a="get:set:t:?e">
			<c path="String"/>
			<c path="String"/>
			<e path="haxe.macro.ComplexType"/>
			<t path="haxe.macro.Expr"/>
		</FProp>
		<FFun a="f"><t path="haxe.macro.Function"/></FFun>
	</enum>
	<typedef path="haxe.macro.TypeDefinition" params="" file="C:\Motion-Twin\haxe\std/haxe/macro/Expr.hx" module="haxe.macro.Expr"><a>
	<pos><t path="haxe.macro.Position"/></pos>
	<params><c path="Array"><a>
	<name><c path="String"/></name>
	<constraints><c path="Array"><e path="haxe.macro.ComplexType"/></c></constraints>
</a></c></params>
	<pack><c path="Array"><c path="String"/></c></pack>
	<name><c path="String"/></name>
	<meta><t path="haxe.macro.Metadata"/></meta>
	<kind><e path="haxe.macro.TypeDefKind"/></kind>
	<isExtern><e path="Bool"/></isExtern>
	<fields><c path="Array"><t path="haxe.macro.Field"/></c></fields>
</a></typedef>
	<enum path="haxe.macro.TypeDefKind" params="" file="C:\Motion-Twin\haxe\std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<TDStructure/>
		<TDEnum/>
		<TDClass a="?extend:?implement:?isInterface">
			<t path="haxe.macro.TypePath"/>
			<c path="Array"><t path="haxe.macro.TypePath"/></c>
			<e path="Bool"/>
		</TDClass>
	</enum>
	<class path="haxe.macro.Error" params="" file="C:\Motion-Twin\haxe\std/haxe/macro/Expr.hx" module="haxe.macro.Expr" extern="1">
		<haxe_doc>This error can be used to handle or produce compilation errors in macros.</haxe_doc>
		<meta><m n=":native"><e>Dynamic</e></m></meta>
	</class>
	<typedef path="haxe.macro.Ref" params="T" file="C:\Motion-Twin\haxe\std/haxe/macro/Type.hx" module="haxe.macro.Type"><a>
	<toString set="method"><f a=""><c path="String"/></f></toString>
	<get set="method"><f a=""><c path="haxe.macro.Ref.T"/></f></get>
</a></typedef>
	<enum path="haxe.macro.Type" params="" file="C:\Motion-Twin\haxe\std/haxe/macro/Type.hx">
		<TType a="t:params">
			<t path="haxe.macro.Ref"><t path="haxe.macro.DefType"/></t>
			<c path="Array"><e path="haxe.macro.Type"/></c>
		</TType>
		<TMono a="t"><t path="haxe.macro.Ref"><t path="Null"><e path="haxe.macro.Type"/></t></t></TMono>
		<TLazy a="f"><f a=""><e path="haxe.macro.Type"/></f></TLazy>
		<TInst a="t:params">
			<t path="haxe.macro.Ref"><t path="haxe.macro.ClassType"/></t>
			<c path="Array"><e path="haxe.macro.Type"/></c>
		</TInst>
		<TFun a="args:ret">
			<c path="Array"><a>
	<t><e path="haxe.macro.Type"/></t>
	<opt><e path="Bool"/></opt>
	<name><c path="String"/></name>
</a></c>
			<e path="haxe.macro.Type"/>
		</TFun>
		<TEnum a="t:params">
			<t path="haxe.macro.Ref"><t path="haxe.macro.EnumType"/></t>
			<c path="Array"><e path="haxe.macro.Type"/></c>
		</TEnum>
		<TDynamic a="t"><t path="Null"><e path="haxe.macro.Type"/></t></TDynamic>
		<TAnonymous a="a"><t path="haxe.macro.Ref"><t path="haxe.macro.AnonType"/></t></TAnonymous>
	</enum>
	<typedef path="haxe.macro.AnonType" params="" file="C:\Motion-Twin\haxe\std/haxe/macro/Type.hx" module="haxe.macro.Type"><a><fields><c path="Array"><t path="haxe.macro.ClassField"/></c></fields></a></typedef>
	<typedef path="haxe.macro.BaseType" params="" file="C:\Motion-Twin\haxe\std/haxe/macro/Type.hx" module="haxe.macro.Type"><a>
	<pos><t path="haxe.macro.Position"/></pos>
	<params><c path="Array"><a>
	<t><e path="haxe.macro.Type"/></t>
	<name><c path="String"/></name>
</a></c></params>
	<pack><c path="Array"><c path="String"/></c></pack>
	<name><c path="String"/></name>
	<module><c path="String"/></module>
	<meta><t path="haxe.macro.MetaAccess"/></meta>
	<isPrivate><e path="Bool"/></isPrivate>
	<isExtern><e path="Bool"/></isExtern>
	<exclude set="method"><f a=""><e path="Void"/></f></exclude>
	<doc><t path="Null"><c path="String"/></t></doc>
</a></typedef>
	<typedef path="haxe.macro.ClassField" params="" file="C:\Motion-Twin\haxe\std/haxe/macro/Type.hx" module="haxe.macro.Type"><a>
	<type><e path="haxe.macro.Type"/></type>
	<pos><t path="haxe.macro.Position"/></pos>
	<params><c path="Array"><a>
	<t><e path="haxe.macro.Type"/></t>
	<name><c path="String"/></name>
</a></c></params>
	<name><c path="String"/></name>
	<meta><t path="haxe.macro.MetaAccess"/></meta>
	<kind><e path="haxe.macro.FieldKind"/></kind>
	<isPublic><e path="Bool"/></isPublic>
	<expr set="method"><f a=""><t path="Null"><e path="haxe.macro.TypedExpr"/></t></f></expr>
	<doc><t path="Null"><c path="String"/></t></doc>
</a></typedef>
	<enum path="haxe.macro.ClassKind" params="" file="C:\Motion-Twin\haxe\std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<KTypeParameter/>
		<KNormal/>
		<KMacroType/>
		<KGenericInstance a="cl:params">
			<t path="haxe.macro.Ref"><t path="haxe.macro.ClassType"/></t>
			<c path="Array"><e path="haxe.macro.Type"/></c>
		</KGenericInstance>
		<KGeneric/>
		<KExtension a="cl:params">
			<t path="haxe.macro.Ref"><t path="haxe.macro.ClassType"/></t>
			<c path="Array"><e path="haxe.macro.Type"/></c>
		</KExtension>
		<KExpr a="expr"><t path="haxe.macro.Expr"/></KExpr>
	</enum>
	<typedef path="haxe.macro.ClassType" params="" file="C:\Motion-Twin\haxe\std/haxe/macro/Type.hx" module="haxe.macro.Type"><a>
	<superClass><t path="Null"><a>
	<t><t path="haxe.macro.Ref"><t path="haxe.macro.ClassType"/></t></t>
	<params><c path="Array"><e path="haxe.macro.Type"/></c></params>
</a></t></superClass>
	<statics><t path="haxe.macro.Ref"><c path="Array"><t path="haxe.macro.ClassField"/></c></t></statics>
	<pos><t path="haxe.macro.Position"/></pos>
	<params><c path="Array"><a>
	<t><e path="haxe.macro.Type"/></t>
	<name><c path="String"/></name>
</a></c></params>
	<pack><c path="Array"><c path="String"/></c></pack>
	<name><c path="String"/></name>
	<module><c path="String"/></module>
	<meta><t path="haxe.macro.MetaAccess"/></meta>
	<kind><e path="haxe.macro.ClassKind"/></kind>
	<isPrivate><e path="Bool"/></isPrivate>
	<isInterface><e path="Bool"/></isInterface>
	<isExtern><e path="Bool"/></isExtern>
	<interfaces><c path="Array"><a>
	<t><t path="haxe.macro.Ref"><t path="haxe.macro.ClassType"/></t></t>
	<params><c path="Array"><e path="haxe.macro.Type"/></c></params>
</a></c></interfaces>
	<init><t path="Null"><e path="haxe.macro.TypedExpr"/></t></init>
	<fields><t path="haxe.macro.Ref"><c path="Array"><t path="haxe.macro.ClassField"/></c></t></fields>
	<exclude set="method"><f a=""><e path="Void"/></f></exclude>
	<doc><t path="Null"><c path="String"/></t></doc>
	<constructor><t path="Null"><t path="haxe.macro.Ref"><t path="haxe.macro.ClassField"/></t></t></constructor>
</a></typedef>
	<typedef path="haxe.macro.EnumField" params="" file="C:\Motion-Twin\haxe\std/haxe/macro/Type.hx" module="haxe.macro.Type"><a>
	<type><e path="haxe.macro.Type"/></type>
	<pos><t path="haxe.macro.Position"/></pos>
	<name><c path="String"/></name>
	<meta><t path="haxe.macro.MetaAccess"/></meta>
	<index><c path="Int"/></index>
	<doc><t path="Null"><c path="String"/></t></doc>
</a></typedef>
	<typedef path="haxe.macro.EnumType" params="" file="C:\Motion-Twin\haxe\std/haxe/macro/Type.hx" module="haxe.macro.Type"><a>
	<pos><t path="haxe.macro.Position"/></pos>
	<params><c path="Array"><a>
	<t><e path="haxe.macro.Type"/></t>
	<name><c path="String"/></name>
</a></c></params>
	<pack><c path="Array"><c path="String"/></c></pack>
	<names><c path="Array"><c path="String"/></c></names>
	<name><c path="String"/></name>
	<module><c path="String"/></module>
	<meta><t path="haxe.macro.MetaAccess"/></meta>
	<isPrivate><e path="Bool"/></isPrivate>
	<isExtern><e path="Bool"/></isExtern>
	<exclude set="method"><f a=""><e path="Void"/></f></exclude>
	<doc><t path="Null"><c path="String"/></t></doc>
	<constructs><c path="Hash"><t path="haxe.macro.EnumField"/></c></constructs>
</a></typedef>
	<typedef path="haxe.macro.DefType" params="" file="C:\Motion-Twin\haxe\std/haxe/macro/Type.hx" module="haxe.macro.Type"><a>
	<type><e path="haxe.macro.Type"/></type>
	<pos><t path="haxe.macro.Position"/></pos>
	<params><c path="Array"><a>
	<t><e path="haxe.macro.Type"/></t>
	<name><c path="String"/></name>
</a></c></params>
	<pack><c path="Array"><c path="String"/></c></pack>
	<name><c path="String"/></name>
	<module><c path="String"/></module>
	<meta><t path="haxe.macro.MetaAccess"/></meta>
	<isPrivate><e path="Bool"/></isPrivate>
	<isExtern><e path="Bool"/></isExtern>
	<exclude set="method"><f a=""><e path="Void"/></f></exclude>
	<doc><t path="Null"><c path="String"/></t></doc>
</a></typedef>
	<typedef path="haxe.macro.MetaAccess" params="" file="C:\Motion-Twin\haxe\std/haxe/macro/Type.hx" module="haxe.macro.Type"><a>
	<remove set="method"><f a="name">
	<c path="String"/>
	<e path="Void"/>
</f></remove>
	<has set="method"><f a="name">
	<c path="String"/>
	<e path="Bool"/>
</f></has>
	<get set="method"><f a=""><t path="haxe.macro.Metadata"/></f></get>
	<add set="method"><f a="name:params:pos">
	<c path="String"/>
	<c path="Array"><t path="haxe.macro.Expr"/></c>
	<t path="haxe.macro.Position"/>
	<e path="Void"/>
</f></add>
</a></typedef>
	<enum path="haxe.macro.FieldKind" params="" file="C:\Motion-Twin\haxe\std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<FVar a="read:write">
			<e path="haxe.macro.VarAccess"/>
			<e path="haxe.macro.VarAccess"/>
		</FVar>
		<FMethod a="k"><e path="haxe.macro.MethodKind"/></FMethod>
	</enum>
	<enum path="haxe.macro.VarAccess" params="" file="C:\Motion-Twin\haxe\std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<AccResolve/>
		<AccRequire a="r"><c path="String"/></AccRequire>
		<AccNormal/>
		<AccNo/>
		<AccNever/>
		<AccInline/>
		<AccCall a="m"><c path="String"/></AccCall>
	</enum>
	<enum path="haxe.macro.MethodKind" params="" file="C:\Motion-Twin\haxe\std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<MethNormal/>
		<MethMacro/>
		<MethInline/>
		<MethDynamic/>
	</enum>
	<enum path="haxe.macro.TypedExpr" params="" file="C:\Motion-Twin\haxe\std/haxe/macro/Type.hx" module="haxe.macro.Type"/>
	<typedef path="msignal.AnySignal" params="" file="C:\Motion-Twin\haxe\lib\msignal/1,1,2/msignal/Signal.hx" module="msignal.Signal"><c path="msignal.Signal">
	<d/>
	<d/>
</c></typedef>
	<class path="msignal.Signal" params="TSlot:TListener" file="C:\Motion-Twin\haxe\lib\msignal/1,1,2/msignal/Signal.hx">
		<get_numListeners set="method" line="167">
			<f a=""><c path="Int"/></f>
			<meta/>
		</get_numListeners>
		<createSlot set="method" line="162">
			<f a="listener:?once:?priority">
				<c path="msignal.Signal.TListener"/>
				<e path="Bool"/>
				<c path="Int"/>
				<c path="msignal.Signal.TSlot"/>
			</f>
			<meta><m n="IgnoreCover"/></meta>
		</createSlot>
		<registrationPossible set="method" line="144">
			<f a="listener:once">
				<c path="msignal.Signal.TListener"/>
				<e path="Bool"/>
				<e path="Bool"/>
			</f>
			<meta/>
		</registrationPossible>
		<registerListener set="method" line="128">
			<f a="listener:?once:?priority">
				<c path="msignal.Signal.TListener"/>
				<e path="Bool"/>
				<c path="Int"/>
				<c path="msignal.Signal.TSlot"/>
			</f>
			<meta/>
		</registerListener>
		<remove public="1" set="method" line="111">
			<f a="listener">
				<c path="msignal.Signal.TListener"/>
				<c path="msignal.Signal.TSlot"/>
			</f>
			<meta/>
			<haxe_doc>Unsubscribes a listener from the signal.
	
	@param listener The listener to remove
	@return The removed listener slot</haxe_doc>
		</remove>
		<add public="1" set="method" line="59">
			<f a="listener">
				<c path="msignal.Signal.TListener"/>
				<c path="msignal.Signal.TSlot"/>
			</f>
			<meta/>
			<haxe_doc>Subscribes a listener for the signal.
	
	@param listener A function matching the signature of TListener
	@return The added listener slot</haxe_doc>
		</add>
		<priorityBased>
			<e path="Bool"/>
			<meta/>
		</priorityBased>
		<slots>
			<c path="msignal.SlotList">
				<c path="msignal.Signal.TSlot"/>
				<c path="msignal.Signal.TListener"/>
			</c>
			<meta/>
		</slots>
		<valueClasses public="1">
			<c path="Array"><d/></c>
			<meta/>
		</valueClasses>
		<new set="method" line="45">
			<f a="?valueClasses">
				<c path="Array"><d/></c>
				<e path="Void"/>
			</f>
			<meta/>
		</new>
		<haxe_doc>A Signal manages a list of listeners, which are executed when the signal is 
dispatched.</haxe_doc>
		<meta/>
	</class>
	<class path="msignal.Signal0" params="" file="C:\Motion-Twin\haxe\lib\msignal/1,1,2/msignal/Signal.hx" module="msignal.Signal">
		<extends path="msignal.Signal">
			<c path="msignal.Slot0"/>
			<f a=""><e path="Void"/></f>
		</extends>
		<createSlot set="method" line="197" override="1">
			<f a="listener:?once:?priority">
				<f a=""><e path="Void"/></f>
				<e path="Bool"/>
				<c path="Int"/>
				<c path="msignal.Slot0"/>
			</f>
			<meta/>
		</createSlot>
		<haxe_doc>Signal that executes listeners with no arguments.</haxe_doc>
	</class>
	<class path="msignal.Signal1" params="TValue" file="C:\Motion-Twin\haxe\lib\msignal/1,1,2/msignal/Signal.hx" module="msignal.Signal">
		<extends path="msignal.Signal">
			<c path="msignal.Slot1"><c path="msignal.Signal1.TValue"/></c>
			<f a="">
				<c path="msignal.Signal1.TValue"/>
				<e path="Void"/>
			</f>
		</extends>
		<createSlot set="method" line="227" override="1">
			<f a="listener:?once:?priority">
				<f a="">
					<c path="msignal.Signal1.TValue"/>
					<e path="Void"/>
				</f>
				<e path="Bool"/>
				<c path="Int"/>
				<c path="msignal.Slot1"><c path="msignal.Signal1.TValue"/></c>
			</f>
			<meta/>
		</createSlot>
		<dispatch public="1" set="method" line="216">
			<f a="value">
				<c path="msignal.Signal1.TValue"/>
				<e path="Void"/>
			</f>
			<meta/>
			<haxe_doc>Executes the signals listeners with one arguement.</haxe_doc>
		</dispatch>
		<new public="1" set="method" line="208">
			<f a="?type">
				<d/>
				<e path="Void"/>
			</f>
			<meta/>
		</new>
		<haxe_doc>Signal that executes listeners with one arguments.</haxe_doc>
		<meta/>
	</class>
	<class path="msignal.Signal2" params="TValue1:TValue2" file="C:\Motion-Twin\haxe\lib\msignal/1,1,2/msignal/Signal.hx" module="msignal.Signal">
		<extends path="msignal.Signal">
			<c path="msignal.Slot2">
				<c path="msignal.Signal2.TValue1"/>
				<c path="msignal.Signal2.TValue2"/>
			</c>
			<f a=":">
				<c path="msignal.Signal2.TValue1"/>
				<c path="msignal.Signal2.TValue2"/>
				<e path="Void"/>
			</f>
		</extends>
		<createSlot set="method" line="257" override="1">
			<f a="listener:?once:?priority">
				<f a=":">
					<c path="msignal.Signal2.TValue1"/>
					<c path="msignal.Signal2.TValue2"/>
					<e path="Void"/>
				</f>
				<e path="Bool"/>
				<c path="Int"/>
				<c path="msignal.Slot2">
					<c path="msignal.Signal2.TValue1"/>
					<c path="msignal.Signal2.TValue2"/>
				</c>
			</f>
			<meta/>
		</createSlot>
		<haxe_doc>Signal that executes listeners with two arguments.</haxe_doc>
	</class>
	<typedef path="msignal.AnySlot" params="" file="C:\Motion-Twin\haxe\lib\msignal/1,1,2/msignal/Slot.hx" module="msignal.Slot"><c path="msignal.Slot">
	<d/>
	<d/>
</c></typedef>
	<class path="msignal.Slot" params="TSignal:TListener" file="C:\Motion-Twin\haxe\lib\msignal/1,1,2/msignal/Slot.hx">
		<set_listener set="method" line="91">
			<f a="value">
				<c path="msignal.Slot.TListener"/>
				<c path="msignal.Slot.TListener"/>
			</f>
			<meta/>
		</set_listener>
		<remove public="1" set="method" line="76">
			<f a=""><e path="Void"/></f>
			<meta/>
			<haxe_doc>Removes the slot from its signal.</haxe_doc>
		</remove>
		<signal>
			<c path="msignal.Slot.TSignal"/>
			<meta/>
		</signal>
		<enabled public="1">
			<e path="Bool"/>
			<meta/>
			<haxe_doc>Whether the listener is called on execution. Defaults to true.</haxe_doc>
		</enabled>
		<priority public="1" set="null">
			<c path="Int"/>
			<meta/>
			<haxe_doc>The priority of this slot should be given in the execution order.
	An Signal will call higher numbers before lower ones.
	Defaults to 0.</haxe_doc>
		</priority>
		<once public="1" set="null">
			<e path="Bool"/>
			<meta/>
			<haxe_doc>Whether this slot is automatically removed after it has been used once.</haxe_doc>
		</once>
		<listener public="1" set="set_listener">
			<c path="msignal.Slot.TListener"/>
			<meta/>
			<haxe_doc>The listener associated with this slot.
	Note: for hxcpp 2.10 this requires a getter method to compile</haxe_doc>
		</listener>
		<new set="method" line="64">
			<f a="signal:listener:?once:?priority">
				<c path="msignal.Slot.TSignal"/>
				<c path="msignal.Slot.TListener"/>
				<e path="Bool"/>
				<c path="Int"/>
				<e path="Void"/>
			</f>
			<meta/>
		</new>
		<haxe_doc>Defines the basic properties of a listener associated with a Signal.</haxe_doc>
		<meta/>
	</class>
	<class path="msignal.Slot0" params="" file="C:\Motion-Twin\haxe\lib\msignal/1,1,2/msignal/Slot.hx" module="msignal.Slot">
		<extends path="msignal.Slot">
			<c path="msignal.Signal0"/>
			<f a=""><e path="Void"/></f>
		</extends>
		<new public="1" set="method" line="103">
			<f a="signal:listener:?once:?priority">
				<c path="msignal.Signal0"/>
				<f a=""><e path="Void"/></f>
				<e path="Bool"/>
				<c path="Int"/>
				<e path="Void"/>
			</f>
			<meta/>
		</new>
		<haxe_doc>A slot that executes a listener with no arguments.</haxe_doc>
		<meta/>
	</class>
	<class path="msignal.Slot1" params="TValue" file="C:\Motion-Twin\haxe\lib\msignal/1,1,2/msignal/Slot.hx" module="msignal.Slot">
		<extends path="msignal.Slot">
			<c path="msignal.Signal1"><c path="msignal.Slot1.TValue"/></c>
			<f a="">
				<c path="msignal.Slot1.TValue"/>
				<e path="Void"/>
			</f>
		</extends>
		<execute public="1" set="method" line="138">
			<f a="value1">
				<c path="msignal.Slot1.TValue"/>
				<e path="Void"/>
			</f>
			<meta/>
			<haxe_doc><![CDATA[Executes a listener with one argument.
	If <code>param</code> is not null, it overrides the value provided.]]></haxe_doc>
		</execute>
		<param public="1">
			<d/>
			<meta/>
			<haxe_doc>Allows the slot to inject the argument to dispatch.</haxe_doc>
		</param>
		<new public="1" set="method" line="129">
			<f a="signal:listener:?once:?priority">
				<c path="msignal.Signal1"><c path="msignal.Slot1.TValue"/></c>
				<f a="">
					<c path="msignal.Slot1.TValue"/>
					<e path="Void"/>
				</f>
				<e path="Bool"/>
				<c path="Int"/>
				<e path="Void"/>
			</f>
			<meta/>
		</new>
		<haxe_doc>A slot that executes a listener with one argument.</haxe_doc>
		<meta/>
	</class>
	<class path="msignal.Slot2" params="TValue1:TValue2" file="C:\Motion-Twin\haxe\lib\msignal/1,1,2/msignal/Slot.hx" module="msignal.Slot">
		<extends path="msignal.Slot">
			<c path="msignal.Signal2">
				<c path="msignal.Slot2.TValue1"/>
				<c path="msignal.Slot2.TValue2"/>
			</c>
			<f a=":">
				<c path="msignal.Slot2.TValue1"/>
				<c path="msignal.Slot2.TValue2"/>
				<e path="Void"/>
			</f>
		</extends>
		<new public="1" set="method" line="162">
			<f a="signal:listener:?once:?priority">
				<c path="msignal.Signal2">
					<c path="msignal.Slot2.TValue1"/>
					<c path="msignal.Slot2.TValue2"/>
				</c>
				<f a=":">
					<c path="msignal.Slot2.TValue1"/>
					<c path="msignal.Slot2.TValue2"/>
					<e path="Void"/>
				</f>
				<e path="Bool"/>
				<c path="Int"/>
				<e path="Void"/>
			</f>
			<meta/>
		</new>
		<haxe_doc>A slot that executes a listener with two arguments.</haxe_doc>
		<meta/>
	</class>
	<class path="msignal.SlotList" params="TSlot:TListener" file="C:\Motion-Twin\haxe\lib\msignal/1,1,2/msignal/SlotList.hx">
		<NIL public="1" static="1">
			<c path="msignal.SlotList">
				<d/>
				<d/>
			</c>
			<meta/>
			<haxe_doc>Represents an empty list. Used as the list terminator.</haxe_doc>
		</NIL>
		<find public="1" set="method" line="240">
			<f a="listener">
				<c path="msignal.SlotList.TListener"/>
				<c path="msignal.SlotList.TSlot"/>
			</f>
			<meta/>
			<haxe_doc>Retrieves the Slot associated with a supplied listener within the SlotList.
	@param   listener The Function being searched for
	@return  The ISlot in this list associated with the listener parameter through the ISlot.listener property.
			 Returns null if no such ISlot instance exists or the list is empty.</haxe_doc>
		</find>
		<filterNot public="1" set="method" line="189">
			<f a="listener">
				<c path="msignal.SlotList.TListener"/>
				<c path="msignal.SlotList">
					<c path="msignal.SlotList.TSlot"/>
					<c path="msignal.SlotList.TListener"/>
				</c>
			</f>
			<meta/>
			<haxe_doc>Returns the slots in this list that do not contain the supplied listener.
	Note: assumes the listener is not repeated within the list.
	@param	listener The function to remove.
	@return A list consisting of all elements of this list that do not have listener.</haxe_doc>
		</filterNot>
		<insertWithPriority public="1" set="method" line="152">
			<f a="slot">
				<c path="msignal.SlotList.TSlot"/>
				<c path="msignal.SlotList">
					<c path="msignal.SlotList.TSlot"/>
					<c path="msignal.SlotList.TListener"/>
				</c>
			</f>
			<meta/>
		</insertWithPriority>
		<prepend public="1" set="method" line="105">
			<f a="slot">
				<c path="msignal.SlotList.TSlot"/>
				<c path="msignal.SlotList">
					<c path="msignal.SlotList.TSlot"/>
					<c path="msignal.SlotList.TListener"/>
				</c>
			</f>
			<meta/>
			<haxe_doc>Prepends a slot to this list.
	@param	slot The item to be prepended.
	@return	A list consisting of slot followed by all elements of this list.</haxe_doc>
		</prepend>
		<get_length set="method" line="79">
			<f a=""><c path="Int"/></f>
			<meta/>
		</get_length>
		<length public="1" get="get_length" set="null">
			<c path="Int"/>
			<meta/>
			<haxe_doc>The number of slots in the list.</haxe_doc>
		</length>
		<nonEmpty public="1">
			<e path="Bool"/>
			<meta/>
		</nonEmpty>
		<tail public="1">
			<c path="msignal.SlotList">
				<c path="msignal.SlotList.TSlot"/>
				<c path="msignal.SlotList.TListener"/>
			</c>
			<meta/>
		</tail>
		<head public="1">
			<c path="msignal.SlotList.TSlot"/>
			<meta/>
		</head>
		<new public="1" set="method" line="49">
			<f a="head:?tail">
				<c path="msignal.SlotList.TSlot"/>
				<c path="msignal.SlotList">
					<c path="msignal.SlotList.TSlot"/>
					<c path="msignal.SlotList.TListener"/>
				</c>
				<e path="Void"/>
			</f>
			<meta/>
			<haxe_doc><![CDATA[Creates and returns a new SlotList object.
	 *
	<p>A user never has to create a SlotList manually. 
	Use the <code>NIL</code> element to represent an empty list. 
	<code>NIL.prepend(value)</code> would create a list containing <code>value</code></p>.
	 *
	@param head The first slot in the list.
	@param tail A list containing all slots except head.]]></haxe_doc>
		</new>
		<meta/>
	</class>
	<class path="org.tbyrne.collections.UniqueList" params="T" file="../src/org/tbyrne/collections/UniqueList.hx">
		<clear public="1" set="method" line="50">
			<f a=""><e path="Void"/></f>
			<meta/>
		</clear>
		<remove public="1" set="method" line="42">
			<f a="value">
				<c path="org.tbyrne.collections.UniqueList.T"/>
				<e path="Bool"/>
			</f>
			<meta/>
		</remove>
		<containsItem public="1" set="method" line="39">
			<f a="value">
				<c path="org.tbyrne.collections.UniqueList.T"/>
				<e path="Bool"/>
			</f>
			<meta/>
		</containsItem>
		<add public="1" set="method" line="31">
			<f a="value">
				<c path="org.tbyrne.collections.UniqueList.T"/>
				<e path="Bool"/>
			</f>
			<meta/>
		</add>
		<first public="1" set="method" line="27">
			<f a=""><t path="Null"><c path="org.tbyrne.collections.UniqueList.T"/></t></f>
			<meta/>
		</first>
		<_length>
			<c path="Int"/>
			<meta/>
		</_length>
		<list>
			<c path="haxe.FastList"><c path="org.tbyrne.collections.UniqueList.T"/></c>
			<meta/>
		</list>
		<get_length set="method" line="18">
			<f a=""><c path="Int"/></f>
			<meta/>
		</get_length>
		<length public="1" get="get_length" set="null">
			<c path="Int"/>
			<meta/>
		</length>
		<iterator public="1" set="method" line="14">
			<f a=""><t path="Iterator"><c path="org.tbyrne.collections.UniqueList.T"/></t></f>
			<meta/>
		</iterator>
		<new public="1" set="method" line="6">
			<f a="?list">
				<t path="Iterable"><c path="org.tbyrne.collections.UniqueList.T"/></t>
				<e path="Void"/>
			</f>
			<meta/>
		</new>
		<meta/>
	</class>
	<class path="org.tbyrne.logging.LogMsg" params="" file="../src/org/tbyrne/logging/LogMsg.hx">
		<title public="1">
			<c path="String"/>
			<meta/>
		</title>
		<types public="1">
			<c path="Array"><c path="String"/></c>
			<meta/>
		</types>
		<message public="1">
			<c path="String"/>
			<meta/>
		</message>
		<id public="1">
			<c path="String"/>
			<meta/>
		</id>
		<new public="1" set="method" line="15">
			<f a="?message:?types:?title:?id">
				<c path="String"/>
				<c path="Array"><c path="String"/></c>
				<c path="String"/>
				<c path="String"/>
				<e path="Void"/>
			</f>
			<meta/>
		</new>
		<haxe_doc>* ...
 * @author Tom Byrne</haxe_doc>
		<meta/>
	</class>
	<class path="org.tbyrne.logging.LogType" params="" file="../src/org/tbyrne/logging/LogMsg.hx" module="org.tbyrne.logging.LogMsg">
		<devInfo public="1" static="1">
			<c path="String"/>
			<meta/>
		</devInfo>
		<devWarning public="1" static="1">
			<c path="String"/>
			<meta/>
		</devWarning>
		<devError public="1" static="1">
			<c path="String"/>
			<meta/>
		</devError>
		<userInfo public="1" static="1">
			<c path="String"/>
			<meta/>
		</userInfo>
		<userWarning public="1" static="1">
			<c path="String"/>
			<meta/>
		</userWarning>
		<userError public="1" static="1">
			<c path="String"/>
			<meta/>
		</userError>
		<performanceWarning public="1" static="1">
			<c path="String"/>
			<meta/>
		</performanceWarning>
		<deprecationWarning public="1" static="1">
			<c path="String"/>
			<meta/>
		</deprecationWarning>
		<externalError public="1" static="1">
			<c path="String"/>
			<meta/>
		</externalError>
		<meta/>
	</class>
</haxe>